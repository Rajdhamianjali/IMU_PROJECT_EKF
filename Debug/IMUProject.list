
IMUProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  0800bbc8  0800bbc8  0001bbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c980  0800c980  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c980  0800c980  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c980  0800c980  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c984  0800c984  0001c984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001e0  0800cb68  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800cb68  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001292d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d6  00000000  00000000  00032b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00035510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  00035fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965e  00000000  00000000  00036990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e21d  00000000  00000000  0004ffee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086dbf  00000000  00000000  0005e20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004394  00000000  00000000  000e5020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bbb0 	.word	0x0800bbb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800bbb0 	.word	0x0800bbb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <EKF_Init>:


#include "EKF.h"

void EKF_Init(Eekf *ekf_1, float P[2], float Q[2], float R[3])
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]

	/* Reset state estimates */
	ekf_1->phi_r = 0.0f;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = 0.0f;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf_1->P[0][0] = P[0];
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = 0.0f;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = 0.0f;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = P[1];
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf_1->Q[0] = Q[0];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	619a      	str	r2, [r3, #24]
	ekf_1->Q[1] = Q[1];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	61da      	str	r2, [r3, #28]

	ekf_1->R[0] = R[0];
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	621a      	str	r2, [r3, #32]
	ekf_1->R[1] = R[1];
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
	ekf_1->R[2] = R[2];
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <EKF_Predict>:

void EKF_Predict(Eekf *ekf_1, float p_rps, float q_rps, float r_rps,
		 float sampleTime_s)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b093      	sub	sp, #76	; 0x4c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]

	/* Pre-compute trigonometric quantities */
	float sp = sinf(ekf_1->phi_r);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f008 f8fe 	bl	80093cc <sinf>
 80011d0:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(ekf_1->phi_r);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f008 f8c0 	bl	800935c <cosf>
 80011dc:	6438      	str	r0, [r7, #64]	; 0x40
	float tt = tanf(ekf_1->theta_r);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f928 	bl	8009438 <tanf>
 80011e8:	63f8      	str	r0, [r7, #60]	; 0x3c

	/* Compute state transition function dx/dt = f(x,u) */
	float dphidt = p_rps + tt * (q_rps * sp + r_rps * cp);
 80011ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fda9 	bl	8000d44 <__aeabi_fmul>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461c      	mov	r4, r3
 80011f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f7ff fda3 	bl	8000d44 <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fc96 	bl	8000b34 <__addsf3>
 8001208:	4603      	mov	r3, r0
 800120a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd99 	bl	8000d44 <__aeabi_fmul>
 8001212:	4603      	mov	r3, r0
 8001214:	4619      	mov	r1, r3
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff fc8c 	bl	8000b34 <__addsf3>
 800121c:	4603      	mov	r3, r0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
	float dthetadt = q_rps * cp - r_rps * sp;
 8001220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fd8e 	bl	8000d44 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	461c      	mov	r4, r3
 800122c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff fd88 	bl	8000d44 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fc79 	bl	8000b30 <__aeabi_fsub>
 800123e:	4603      	mov	r3, r0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34

	/* Update state estimates (x(n+1) = x(n) + T * dx/dt) */
	ekf_1->phi_r += sampleTime_s * dphidt;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681c      	ldr	r4, [r3, #0]
 8001246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001248:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800124a:	f7ff fd7b 	bl	8000d44 <__aeabi_fmul>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fc6e 	bl	8000b34 <__addsf3>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r += sampleTime_s * dthetadt;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685c      	ldr	r4, [r3, #4]
 8001264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001266:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001268:	f7ff fd6c 	bl	8000d44 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fc5f 	bl	8000b34 <__addsf3>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]

	/* Re-compute trigonometric quantities */
	sp = sinf(ekf_1->phi_r);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f008 f8a2 	bl	80093cc <sinf>
 8001288:	6478      	str	r0, [r7, #68]	; 0x44
	cp = cosf(ekf_1->phi_r);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f008 f864 	bl	800935c <cosf>
 8001294:	6438      	str	r0, [r7, #64]	; 0x40
	tt = tanf(ekf_1->theta_r);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f008 f8cc 	bl	8009438 <tanf>
 80012a0:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ctInv = 1.0f / cosf(ekf_1->theta_r);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 f858 	bl	800935c <cosf>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012b4:	f7ff fdfa 	bl	8000eac <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30

	/* Compute Jacobian of state transition function A(x,u) = df(x,u)/dx */
	float A[2][2] = { {
			tt *(q_rps * cp - r_rps * sp),
 80012bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fd40 	bl	8000d44 <__aeabi_fmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461c      	mov	r4, r3
 80012c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff fd3a 	bl	8000d44 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fc2b 	bl	8000b30 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fd30 	bl	8000d44 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
	float A[2][2] = { {
 80012e6:	623b      	str	r3, [r7, #32]
			(q_rps * sp + r_rps * cp) *ctInv * ctInv
 80012e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd2a 	bl	8000d44 <__aeabi_fmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461c      	mov	r4, r3
 80012f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f7ff fd24 	bl	8000d44 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4619      	mov	r1, r3
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff fc17 	bl	8000b34 <__addsf3>
 8001306:	4603      	mov	r3, r0
 8001308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd1a 	bl	8000d44 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd15 	bl	8000d44 <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
	float A[2][2] = { {
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
		}, {
			-(q_rps *sp
 800131e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fd0f 	bl	8000d44 <__aeabi_fmul>
 8001326:	4603      	mov	r3, r0
 8001328:	461c      	mov	r4, r3
				+ r_rps * cp), 0.0f
 800132a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff fd09 	bl	8000d44 <__aeabi_fmul>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fbfc 	bl	8000b34 <__addsf3>
 800133c:	4603      	mov	r3, r0
			-(q_rps *sp
 800133e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float A[2][2] = { {
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
	};

	/* Update state covariance matrix P(n+1) = P(n) + T * (A * P(n) + P(n) * A' + Q) (note that A[1][1] = 0!) */
	float Pnew[2][2] = { {
			A[0][0] *ekf_1->P[0][0] + A[0][1] *ekf_1->P[1][0]
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff fcf6 	bl	8000d44 <__aeabi_fmul>
 8001358:	4603      	mov	r3, r0
 800135a:	461c      	mov	r4, r3
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f7ff fced 	bl	8000d44 <__aeabi_fmul>
 800136a:	4603      	mov	r3, r0
 800136c:	4619      	mov	r1, r3
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fbe0 	bl	8000b34 <__addsf3>
 8001374:	4603      	mov	r3, r0
 8001376:	461c      	mov	r4, r3
			+ ekf_1->P[0][0] *A[0][0] + ekf_1->P[0][1] *A[1][0] + ekf_1->Q[0],
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	6a3a      	ldr	r2, [r7, #32]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fcdf 	bl	8000d44 <__aeabi_fmul>
 8001386:	4603      	mov	r3, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fbd2 	bl	8000b34 <__addsf3>
 8001390:	4603      	mov	r3, r0
 8001392:	461c      	mov	r4, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fcd1 	bl	8000d44 <__aeabi_fmul>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff fbc4 	bl	8000b34 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f7ff fbbc 	bl	8000b34 <__addsf3>
 80013bc:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 80013be:	613b      	str	r3, [r7, #16]
			A[0][0] *ekf_1->P[0][1] + A[0][1] *ekf_1->P[1][1]
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff fcbb 	bl	8000d44 <__aeabi_fmul>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461c      	mov	r4, r3
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff fcb2 	bl	8000d44 <__aeabi_fmul>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fba5 	bl	8000b34 <__addsf3>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461c      	mov	r4, r3
			+ ekf_1->P[0][0] *A[0][1]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fca4 	bl	8000d44 <__aeabi_fmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fb97 	bl	8000b34 <__addsf3>
 8001406:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8001408:	617b      	str	r3, [r7, #20]
		}, {
			A[1][0] *ekf_1->P[0][0]
 800140a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f7ff fc96 	bl	8000d44 <__aeabi_fmul>
 8001418:	4603      	mov	r3, r0
 800141a:	461c      	mov	r4, r3
			+ ekf_1->P[1][0] *A[0][0] + ekf_1->P[1][1] *A[1][0], A[1][0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fc8d 	bl	8000d44 <__aeabi_fmul>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff fb80 	bl	8000b34 <__addsf3>
 8001434:	4603      	mov	r3, r0
 8001436:	461c      	mov	r4, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fc7f 	bl	8000d44 <__aeabi_fmul>
 8001446:	4603      	mov	r3, r0
 8001448:	4619      	mov	r1, r3
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff fb72 	bl	8000b34 <__addsf3>
 8001450:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8001452:	61bb      	str	r3, [r7, #24]
			+ ekf_1->P[1][0] *A[0][0] + ekf_1->P[1][1] *A[1][0], A[1][0]
 8001454:	6aba      	ldr	r2, [r7, #40]	; 0x28
			*ekf_1->P[0][1] + ekf_1->P[1][0] *A[0][1] + ekf_1->Q[1]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f7ff fc71 	bl	8000d44 <__aeabi_fmul>
 8001462:	4603      	mov	r3, r0
 8001464:	461c      	mov	r4, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc68 	bl	8000d44 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fb5b 	bl	8000b34 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fb53 	bl	8000b34 <__addsf3>
 800148e:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8001490:	61fb      	str	r3, [r7, #28]
		}
	};

	ekf_1->P[0][0] += sampleTime_s * Pnew[0][0];
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689c      	ldr	r4, [r3, #8]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc52 	bl	8000d44 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff fb45 	bl	8000b34 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] += sampleTime_s * Pnew[0][1];
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	68dc      	ldr	r4, [r3, #12]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc42 	bl	8000d44 <__aeabi_fmul>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4619      	mov	r1, r3
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fb35 	bl	8000b34 <__addsf3>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] += sampleTime_s * Pnew[1][0];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	691c      	ldr	r4, [r3, #16]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc32 	bl	8000d44 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fb25 	bl	8000b34 <__addsf3>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] += sampleTime_s * Pnew[1][1];
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	695c      	ldr	r4, [r3, #20]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fc22 	bl	8000d44 <__aeabi_fmul>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fb15 	bl	8000b34 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	615a      	str	r2, [r3, #20]

}
 8001512:	bf00      	nop
 8001514:	374c      	adds	r7, #76	; 0x4c
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <EKF_Update>:

void EKF_Update(Eekf *ekf_1, float ax_mps2, float ay_mps2, float az_mps2)
{
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151c:	b0c5      	sub	sp, #276	; 0x114
 800151e:	af00      	add	r7, sp, #0
 8001520:	f107 040c 	add.w	r4, r7, #12
 8001524:	6020      	str	r0, [r4, #0]
 8001526:	f107 0008 	add.w	r0, r7, #8
 800152a:	6001      	str	r1, [r0, #0]
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	600a      	str	r2, [r1, #0]
 8001530:	463a      	mov	r2, r7
 8001532:	6013      	str	r3, [r2, #0]

	/* Normalise accelerometer readings */
	float accNormFactor = 1.0f
			      / sqrtf(ax_mps2 * ax_mps2 + ay_mps2 * ay_mps2 + az_mps2 * az_mps2);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f7ff fc02 	bl	8000d44 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	461c      	mov	r4, r3
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f7ff fbfb 	bl	8000d44 <__aeabi_fmul>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff faee 	bl	8000b34 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	461c      	mov	r4, r3
 800155c:	463b      	mov	r3, r7
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	f7ff fbef 	bl	8000d44 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fae2 	bl	8000b34 <__addsf3>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f007 ffd6 	bl	8009524 <sqrtf>
 8001578:	4603      	mov	r3, r0
	float accNormFactor = 1.0f
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001580:	f7ff fc94 	bl	8000eac <__aeabi_fdiv>
 8001584:	4603      	mov	r3, r0
 8001586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	float ax_norm = ax_mps2 * accNormFactor;
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f7ff fbd6 	bl	8000d44 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float ay_norm = ay_mps2 * accNormFactor;
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	f7ff fbcd 	bl	8000d44 <__aeabi_fmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float az_norm = az_mps2 * accNormFactor;
 80015b0:	463b      	mov	r3, r7
 80015b2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f7ff fbc4 	bl	8000d44 <__aeabi_fmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Compute Jacobian of output function C(x,u) = dh(x,u)/dx */
	float sp = sinf(ekf_1->phi_r);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fefe 	bl	80093cc <sinf>
 80015d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	float cp = cosf(ekf_1->phi_r);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 febd 	bl	800935c <cosf>
 80015e2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	float st = sinf(ekf_1->theta_r);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 feec 	bl	80093cc <sinf>
 80015f4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	float ct = cosf(ekf_1->theta_r);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f007 feab 	bl	800935c <cosf>
 8001606:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	float C[3][2] =
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001616:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 800161a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800161e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001622:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fb8c 	bl	8000d44 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
	float C[3][2] =
 800162e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001632:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001636:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800163a:	f7ff fb83 	bl	8000d44 <__aeabi_fmul>
 800163e:	4603      	mov	r3, r0
	float C[3][2] =
 8001640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001644:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001648:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800164c:	f7ff fb7a 	bl	8000d44 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
	float C[3][2] =
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001656:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800165a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800165e:	f7ff fb71 	bl	8000d44 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
	float C[3][2] =
 8001664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/* Compute Kalman gain K = P * C' * (R + C * P * C ')^-1 in steps (note that C[0][0] = 0!) */

	/* P * C'*/
	float PCt[2][3] = { {
			ekf_1->P[0][1] *C[0][1], ekf_1->P[0][0] *C[1][0]
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb64 	bl	8000d44 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			ekf_1->P[0][1] *C[0][1], ekf_1->P[0][0] *C[1][0]
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb57 	bl	8000d44 <__aeabi_fmul>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *C[1][1], ekf_1->P[0][0] *C[2][0]
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb4b 	bl	8000d44 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fa3e 	bl	8000b34 <__addsf3>
 80016b8:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 80016ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			+ ekf_1->P[0][1] *C[1][1], ekf_1->P[0][0] *C[2][0]
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb39 	bl	8000d44 <__aeabi_fmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *C[2][1]
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb2d 	bl	8000d44 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fa20 	bl	8000b34 <__addsf3>
 80016f4:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 80016f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		}, {
			ekf_1->P[1][1] *C[0][1], ekf_1->P[1][0]
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb1b 	bl	8000d44 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 8001710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			ekf_1->P[1][1] *C[0][1], ekf_1->P[1][0]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
			*C[1][0] + ekf_1->P[1][1] *C[1][1], ekf_1->P[1][0] *C[2][0]
 800171c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb0e 	bl	8000d44 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	461c      	mov	r4, r3
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fb02 	bl	8000d44 <__aeabi_fmul>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff f9f5 	bl	8000b34 <__addsf3>
 800174a:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 800174c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			*C[1][0] + ekf_1->P[1][1] *C[1][1], ekf_1->P[1][0] *C[2][0]
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff faf0 	bl	8000d44 <__aeabi_fmul>
 8001764:	4603      	mov	r3, r0
 8001766:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *C[2][1]
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fae4 	bl	8000d44 <__aeabi_fmul>
 800177c:	4603      	mov	r3, r0
 800177e:	4619      	mov	r1, r3
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff f9d7 	bl	8000b34 <__addsf3>
 8001786:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 8001788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		}
	};

	/* R + C * P * C' */
	float RCPCt[3][3] = { {
			C[0][1] *PCt[1][0] + ekf_1->R[0], C[0][1]
 800178c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fad4 	bl	8000d44 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f7ff f9c2 	bl	8000b34 <__addsf3>
 80017b0:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80017b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			C[0][1] *PCt[1][0] + ekf_1->R[0], C[0][1]
 80017b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			*PCt[1][1], C[0][1] *PCt[1][2]
 80017ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fabf 	bl	8000d44 <__aeabi_fmul>
 80017c6:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80017c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			*PCt[1][1], C[0][1] *PCt[1][2]
 80017cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017d0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fab4 	bl	8000d44 <__aeabi_fmul>
 80017dc:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80017de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}, {
			C[1][0] *PCt[0][0]
 80017e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff faa9 	bl	8000d44 <__aeabi_fmul>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461c      	mov	r4, r3
			+ C[1][1] *PCt[1][0], C[1][0] *PCt[0][1] + C[1][1] *PCt[1][1]
 80017f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017fa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa9f 	bl	8000d44 <__aeabi_fmul>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff f992 	bl	8000b34 <__addsf3>
 8001810:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 8001812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			+ C[1][1] *PCt[1][0], C[1][0] *PCt[0][1] + C[1][1] *PCt[1][1]
 8001816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800181a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa8f 	bl	8000d44 <__aeabi_fmul>
 8001826:	4603      	mov	r3, r0
 8001828:	461c      	mov	r4, r3
 800182a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800182e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fa85 	bl	8000d44 <__aeabi_fmul>
 800183a:	4603      	mov	r3, r0
 800183c:	4619      	mov	r1, r3
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff f978 	bl	8000b34 <__addsf3>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
			+ ekf_1->R[1], C[1][0] *PCt[0][2] + C[1][1] *PCt[1][2]
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f7ff f96e 	bl	8000b34 <__addsf3>
 8001858:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 800185a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			+ ekf_1->R[1], C[1][0] *PCt[0][2] + C[1][1] *PCt[1][2]
 800185e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fa6b 	bl	8000d44 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	461c      	mov	r4, r3
 8001872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fa61 	bl	8000d44 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff f954 	bl	8000b34 <__addsf3>
 800188c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}, {
			C[2][0]
 8001892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
			*PCt[0][0] + C[2][1] *PCt[1][0], C[2][0] *PCt[0][1]
 8001896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa51 	bl	8000d44 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461c      	mov	r4, r3
 80018a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018aa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa47 	bl	8000d44 <__aeabi_fmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff f93a 	bl	8000b34 <__addsf3>
 80018c0:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			*PCt[0][0] + C[2][1] *PCt[1][0], C[2][0] *PCt[0][1]
 80018c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa37 	bl	8000d44 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461c      	mov	r4, r3
			+ C[2][1] *PCt[1][1], C[2][0] *PCt[0][2] + C[2][1] *PCt[1][2]
 80018da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fa2d 	bl	8000d44 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff f920 	bl	8000b34 <__addsf3>
 80018f4:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80018f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			+ C[2][1] *PCt[1][1], C[2][0] *PCt[0][2] + C[2][1] *PCt[1][2]
 80018fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa1d 	bl	8000d44 <__aeabi_fmul>
 800190a:	4603      	mov	r3, r0
 800190c:	461c      	mov	r4, r3
 800190e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fa13 	bl	8000d44 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff f906 	bl	8000b34 <__addsf3>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
			+ ekf_1->R[2]
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	4619      	mov	r1, r3
 8001936:	4610      	mov	r0, r2
 8001938:	f7ff f8fc 	bl	8000b34 <__addsf3>
 800193c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
	};

	/* inv(R + C * P * C') */
	float detMatInv = 1.0f
			  / (RCPCt[0][0]
 8001942:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
			     * (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 8001946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800194a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f9f7 	bl	8000d44 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	461d      	mov	r5, r3
 800195a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800195e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f9ed 	bl	8000d44 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
 800196c:	4619      	mov	r1, r3
 800196e:	4628      	mov	r0, r5
 8001970:	f7ff f8de 	bl	8000b30 <__aeabi_fsub>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff f9e3 	bl	8000d44 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	461d      	mov	r5, r3
			     - RCPCt[1][0]
 8001982:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
			     * (RCPCt[2][2] * RCPCt[0][1]
 8001986:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800198a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9d7 	bl	8000d44 <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	461e      	mov	r6, r3
				- RCPCt[2][1] * RCPCt[0][2])
 800199a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800199e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f9cd 	bl	8000d44 <__aeabi_fmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4630      	mov	r0, r6
 80019b0:	f7ff f8be 	bl	8000b30 <__aeabi_fsub>
 80019b4:	4603      	mov	r3, r0
			     * (RCPCt[2][2] * RCPCt[0][1]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff f9c3 	bl	8000d44 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
			     - RCPCt[1][0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4628      	mov	r0, r5
 80019c4:	f7ff f8b4 	bl	8000b30 <__aeabi_fsub>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461d      	mov	r5, r3
			     + RCPCt[2][0]
 80019cc:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
			     * (RCPCt[1][2] * RCPCt[0][1]
 80019d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f9b2 	bl	8000d44 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461e      	mov	r6, r3
				- RCPCt[1][1] * RCPCt[0][2]));
 80019e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9a8 	bl	8000d44 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4630      	mov	r0, r6
 80019fa:	f7ff f899 	bl	8000b30 <__aeabi_fsub>
 80019fe:	4603      	mov	r3, r0
			     * (RCPCt[1][2] * RCPCt[0][1]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff f99e 	bl	8000d44 <__aeabi_fmul>
 8001a08:	4603      	mov	r3, r0
			     + RCPCt[2][0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f7ff f891 	bl	8000b34 <__addsf3>
 8001a12:	4603      	mov	r3, r0
	float detMatInv = 1.0f
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a1a:	f7ff fa47 	bl	8000eac <__aeabi_fdiv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float matInv[3][3] = { {
			RCPCt[2][2] *RCPCt[1][1]
 8001a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a28:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f988 	bl	8000d44 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461c      	mov	r4, r3
			- RCPCt[2][1] *RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f97e 	bl	8000d44 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff f86f 	bl	8000b30 <__aeabi_fsub>
 8001a52:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001a54:	66fb      	str	r3, [r7, #108]	; 0x6c
			- RCPCt[2][1] *RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f96f 	bl	8000d44 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461c      	mov	r4, r3
						      - RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] *RCPCt[0][1]
 8001a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f965 	bl	8000d44 <__aeabi_fmul>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff f856 	bl	8000b30 <__aeabi_fsub>
 8001a84:	4603      	mov	r3, r0
			- RCPCt[2][1] *RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001a86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001a8a:	673b      	str	r3, [r7, #112]	; 0x70
						      - RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] *RCPCt[0][1]
 8001a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f954 	bl	8000d44 <__aeabi_fmul>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461c      	mov	r4, r3
			- RCPCt[1][1] *RCPCt[0][2]
 8001aa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aa4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f94a 	bl	8000d44 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff f83b 	bl	8000b30 <__aeabi_fsub>
 8001aba:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001abc:	677b      	str	r3, [r7, #116]	; 0x74
		}, {
			-(RCPCt[2][2] * RCPCt[1][0]
 8001abe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ac2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f93b 	bl	8000d44 <__aeabi_fmul>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461c      	mov	r4, r3
				- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] *RCPCt[0][0]
 8001ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ad6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f931 	bl	8000d44 <__aeabi_fmul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff f822 	bl	8000b30 <__aeabi_fsub>
 8001aec:	4603      	mov	r3, r0
			-(RCPCt[2][2] * RCPCt[1][0]
 8001aee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001af2:	67bb      	str	r3, [r7, #120]	; 0x78
				- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] *RCPCt[0][0]
 8001af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001af8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f920 	bl	8000d44 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461c      	mov	r4, r3
				- RCPCt[2][0] *RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f916 	bl	8000d44 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff f807 	bl	8000b30 <__aeabi_fsub>
 8001b22:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001b24:	67fb      	str	r3, [r7, #124]	; 0x7c
				- RCPCt[2][0] *RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f907 	bl	8000d44 <__aeabi_fmul>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461c      	mov	r4, r3
				- RCPCt[1][0] * RCPCt[0][2])
 8001b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f8fd 	bl	8000d44 <__aeabi_fmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7fe ffee 	bl	8000b30 <__aeabi_fsub>
 8001b54:	4603      	mov	r3, r0
				- RCPCt[2][0] *RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}, {
			RCPCt[2][1] *RCPCt[1][0]
 8001b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b62:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f8eb 	bl	8000d44 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461c      	mov	r4, r3
			- RCPCt[2][0] *RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b76:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f8e1 	bl	8000d44 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7fe ffd2 	bl	8000b30 <__aeabi_fsub>
 8001b8c:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001b8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			- RCPCt[2][0] *RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f8d1 	bl	8000d44 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461c      	mov	r4, r3
						      - RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] *RCPCt[0][0]
 8001ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001baa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f8c7 	bl	8000d44 <__aeabi_fmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7fe ffb8 	bl	8000b30 <__aeabi_fsub>
 8001bc0:	4603      	mov	r3, r0
			- RCPCt[2][0] *RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001bc2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						      - RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] *RCPCt[0][0]
 8001bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f8b5 	bl	8000d44 <__aeabi_fmul>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461c      	mov	r4, r3
			- RCPCt[1][0] *RCPCt[0][1]
 8001bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f8ab 	bl	8000d44 <__aeabi_fmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe ff9c 	bl	8000b30 <__aeabi_fsub>
 8001bf8:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
	};

	for (unsigned int i = 0; i < 3; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001c04:	e034      	b.n	8001c70 <EKF_Update+0x756>

		for (unsigned int j = 0; j < 3; j++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c0c:	e027      	b.n	8001c5e <EKF_Update+0x744>

			matInv[i][j] *= detMatInv;
 8001c0e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c24:	4413      	add	r3, r2
 8001c26:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001c2a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f888 	bl	8000d44 <__aeabi_fmul>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4619      	mov	r1, r3
 8001c38:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c4e:	4413      	add	r3, r2
 8001c50:	f843 1ca4 	str.w	r1, [r3, #-164]
		for (unsigned int j = 0; j < 3; j++) {
 8001c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d9d3      	bls.n	8001c0e <EKF_Update+0x6f4>
	for (unsigned int i = 0; i < 3; i++) {
 8001c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d9c6      	bls.n	8001c06 <EKF_Update+0x6ec>

	}

	/* C' * inv(R + C * P * C') */
	float CtmatInv[2][3] = { {
			C[1][0] *matInv[1][0] + C[2][0] *matInv[2][0],
 8001c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f85f 	bl	8000d44 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461c      	mov	r4, r3
 8001c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f855 	bl	8000d44 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7fe ff48 	bl	8000b34 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
			C[1][0] *matInv[1][1] + C[2][0] *matInv[2][1], C[1][0]
 8001ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f847 	bl	8000d44 <__aeabi_fmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461c      	mov	r4, r3
 8001cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f83d 	bl	8000d44 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7fe ff30 	bl	8000b34 <__addsf3>
 8001cd4:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001cd6:	65bb      	str	r3, [r7, #88]	; 0x58
			C[1][0] *matInv[1][1] + C[2][0] *matInv[2][1], C[1][0]
 8001cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
			*matInv[1][2] + C[2][0] *matInv[2][2]
 8001cdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f82e 	bl	8000d44 <__aeabi_fmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461c      	mov	r4, r3
 8001cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cf0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f824 	bl	8000d44 <__aeabi_fmul>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7fe ff17 	bl	8000b34 <__addsf3>
 8001d06:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001d08:	65fb      	str	r3, [r7, #92]	; 0x5c
		}, {
			C[0][1]
 8001d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			*matInv[0][0] + C[1][1] *matInv[1][0] + C[2][1] *matInv[2][0],
 8001d0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f816 	bl	8000d44 <__aeabi_fmul>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f80d 	bl	8000d44 <__aeabi_fmul>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7fe ff00 	bl	8000b34 <__addsf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461c      	mov	r4, r3
 8001d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fffe 	bl	8000d44 <__aeabi_fmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7fe fef1 	bl	8000b34 <__addsf3>
 8001d52:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001d54:	663b      	str	r3, [r7, #96]	; 0x60
			C[0][1] *matInv[0][1] + C[1][1] *matInv[1][1]
 8001d56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fff0 	bl	8000d44 <__aeabi_fmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461c      	mov	r4, r3
 8001d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffe7 	bl	8000d44 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7fe feda 	bl	8000b34 <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461c      	mov	r4, r3
			+ C[2][1] *matInv[2][1], C[0][1] *matInv[0][2]
 8001d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ffd8 	bl	8000d44 <__aeabi_fmul>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fecb 	bl	8000b34 <__addsf3>
 8001d9e:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001da0:	667b      	str	r3, [r7, #100]	; 0x64
			+ C[2][1] *matInv[2][1], C[0][1] *matInv[0][2]
 8001da2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001da6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ffca 	bl	8000d44 <__aeabi_fmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461c      	mov	r4, r3
			+ C[1][1] *matInv[1][2] + C[2][1] *matInv[2][2]
 8001db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001db8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ffc0 	bl	8000d44 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7fe feb3 	bl	8000b34 <__addsf3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461c      	mov	r4, r3
 8001dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffb1 	bl	8000d44 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7fe fea4 	bl	8000b34 <__addsf3>
 8001dec:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001dee:	66bb      	str	r3, [r7, #104]	; 0x68
		}
	};

	/* K = P * C' * inv(R + C * P * C') */
	float K[2][3] = { {
			ekf_1->P[0][0] *CtmatInv[0][0]
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ffa1 	bl	8000d44 <__aeabi_fmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *CtmatInv[1][0], ekf_1->P[0][0] *CtmatInv[0][1]
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ff96 	bl	8000d44 <__aeabi_fmul>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7fe fe89 	bl	8000b34 <__addsf3>
 8001e22:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
			+ ekf_1->P[0][1] *CtmatInv[1][0], ekf_1->P[0][0] *CtmatInv[0][1]
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ff86 	bl	8000d44 <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *CtmatInv[1][1], ekf_1->P[0][0] *CtmatInv[0][2]
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff7b 	bl	8000d44 <__aeabi_fmul>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7fe fe6e 	bl	8000b34 <__addsf3>
 8001e58:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
			+ ekf_1->P[0][1] *CtmatInv[1][1], ekf_1->P[0][0] *CtmatInv[0][2]
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff6b 	bl	8000d44 <__aeabi_fmul>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *CtmatInv[1][2]
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff60 	bl	8000d44 <__aeabi_fmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7fe fe53 	bl	8000b34 <__addsf3>
 8001e8e:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
		}, {
			ekf_1->P[1][0] *CtmatInv[0][0]
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff50 	bl	8000d44 <__aeabi_fmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *CtmatInv[1][0], ekf_1->P[1][0] *CtmatInv[0][1]
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff45 	bl	8000d44 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7fe fe38 	bl	8000b34 <__addsf3>
 8001ec4:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
			+ ekf_1->P[1][1] *CtmatInv[1][0], ekf_1->P[1][0] *CtmatInv[0][1]
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe ff35 	bl	8000d44 <__aeabi_fmul>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *CtmatInv[1][1], ekf_1->P[1][0] *CtmatInv[0][2]
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ff2a 	bl	8000d44 <__aeabi_fmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7fe fe1d 	bl	8000b34 <__addsf3>
 8001efa:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001efc:	64fb      	str	r3, [r7, #76]	; 0x4c
			+ ekf_1->P[1][1] *CtmatInv[1][1], ekf_1->P[1][0] *CtmatInv[0][2]
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe ff1a 	bl	8000d44 <__aeabi_fmul>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *CtmatInv[1][2]
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe ff0f 	bl	8000d44 <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7fe fe02 	bl	8000b34 <__addsf3>
 8001f30:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001f32:	653b      	str	r3, [r7, #80]	; 0x50
		}
	};

	/* Update state covariance matrix P(n+1) = (I - K * C) * P(n) */
	float IminKC[2][2] = { {
			1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8001f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ff01 	bl	8000d44 <__aeabi_fmul>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461c      	mov	r4, r3
 8001f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fef8 	bl	8000d44 <__aeabi_fmul>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7fe fdeb 	bl	8000b34 <__addsf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f66:	f7fe fde3 	bl	8000b30 <__aeabi_fsub>
 8001f6a:	4603      	mov	r3, r0
	float IminKC[2][2] = { {
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
			-(K[0][1] * C[1][1] + K[1][0] * C[2][1])
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f70:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fee4 	bl	8000d44 <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461c      	mov	r4, r3
 8001f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fedb 	bl	8000d44 <__aeabi_fmul>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7fe fdce 	bl	8000b34 <__addsf3>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { {
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
		},
		{
			-(K[1][1] * C[1][0] + K[1][2] * C[2][0]), 1.0f
 8001fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fecb 	bl	8000d44 <__aeabi_fmul>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fec2 	bl	8000d44 <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe fdb5 	bl	8000b34 <__addsf3>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { {
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
				- (K[1][1] * C[1][1] + K[1][2] * C[2][1])
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe feb2 	bl	8000d44 <__aeabi_fmul>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461c      	mov	r4, r3
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fea9 	bl	8000d44 <__aeabi_fmul>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7fe fd9c 	bl	8000b34 <__addsf3>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002004:	f7fe fd94 	bl	8000b30 <__aeabi_fsub>
 8002008:	4603      	mov	r3, r0
	float IminKC[2][2] = { {
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
			}
	};

	float Pnew[2][2] = { {
			IminKC[0][0] *ekf_1->P[0][0]
 800200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7fe fe93 	bl	8000d44 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	461c      	mov	r4, r3
			+ IminKC[0][1] *ekf_1->P[1][0], IminKC[0][0] *ekf_1->P[0][1]
 8002022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f7fe fe88 	bl	8000d44 <__aeabi_fmul>
 8002034:	4603      	mov	r3, r0
 8002036:	4619      	mov	r1, r3
 8002038:	4620      	mov	r0, r4
 800203a:	f7fe fd7b 	bl	8000b34 <__addsf3>
 800203e:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8002040:	61fb      	str	r3, [r7, #28]
			+ IminKC[0][1] *ekf_1->P[1][0], IminKC[0][0] *ekf_1->P[0][1]
 8002042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7fe fe78 	bl	8000d44 <__aeabi_fmul>
 8002054:	4603      	mov	r3, r0
 8002056:	461c      	mov	r4, r3
			+ IminKC[0][1] *ekf_1->P[1][1]
 8002058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7fe fe6d 	bl	8000d44 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	4619      	mov	r1, r3
 800206e:	4620      	mov	r0, r4
 8002070:	f7fe fd60 	bl	8000b34 <__addsf3>
 8002074:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8002076:	623b      	str	r3, [r7, #32]
		}, {
			IminKC[1][0] *ekf_1->P[0][0]
 8002078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f7fe fe5d 	bl	8000d44 <__aeabi_fmul>
 800208a:	4603      	mov	r3, r0
 800208c:	461c      	mov	r4, r3
			+ IminKC[1][1] *ekf_1->P[1][0], IminKC[1][0] *ekf_1->P[0][1]
 800208e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7fe fe52 	bl	8000d44 <__aeabi_fmul>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe fd45 	bl	8000b34 <__addsf3>
 80020aa:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
			+ IminKC[1][1] *ekf_1->P[1][0], IminKC[1][0] *ekf_1->P[0][1]
 80020ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7fe fe42 	bl	8000d44 <__aeabi_fmul>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461c      	mov	r4, r3
			+ IminKC[1][1] *ekf_1->P[1][1]
 80020c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f7fe fe37 	bl	8000d44 <__aeabi_fmul>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	4620      	mov	r0, r4
 80020dc:	f7fe fd2a 	bl	8000b34 <__addsf3>
 80020e0:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
		}
	};

	ekf_1->P[0][0] = Pnew[0][0];
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = Pnew[0][1];
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = Pnew[1][0];
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = Pnew[1][1];
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	615a      	str	r2, [r3, #20]

	/* Compute output function h(x,u) */
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r) *sinf(ekf_1->phi_r),
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	f007 f959 	bl	80093cc <sinf>
 800211a:	4602      	mov	r2, r0
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	f007 f916 	bl	800935c <cosf>
 8002130:	4603      	mov	r3, r0
 8002132:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f007 f944 	bl	80093cc <sinf>
 8002144:	4603      	mov	r3, r0
 8002146:	4619      	mov	r1, r3
 8002148:	4620      	mov	r0, r4
 800214a:	f7fe fdfb 	bl	8000d44 <__aeabi_fmul>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	605a      	str	r2, [r3, #4]
		       -cosf(ekf_1->theta_r) *cosf(ekf_1->phi_r)
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	f007 f8fb 	bl	800935c <cosf>
 8002166:	4603      	mov	r3, r0
 8002168:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f007 f8f1 	bl	800935c <cosf>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4620      	mov	r0, r4
 8002180:	f7fe fde0 	bl	8000d44 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r) *sinf(ekf_1->phi_r),
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	609a      	str	r2, [r3, #8]
		     };

	/* Update state estimate x(n+1) = x(n) + K * (y - h) */
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 800218e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800219c:	f7fe fcc8 	bl	8000b30 <__aeabi_fsub>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7fe fdcd 	bl	8000d44 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461d      	mov	r5, r3
 80021ae:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80021bc:	f7fe fcb8 	bl	8000b30 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fdbd 	bl	8000d44 <__aeabi_fmul>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4628      	mov	r0, r5
 80021d0:	f7fe fcb0 	bl	8000b34 <__addsf3>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461d      	mov	r5, r3
		     + K[0][2] * (az_norm - h[2]);
 80021d8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80021e6:	f7fe fca3 	bl	8000b30 <__aeabi_fsub>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fe fda8 	bl	8000d44 <__aeabi_fmul>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7fe fc9b 	bl	8000b34 <__addsf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 800220a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8002218:	f7fe fc8a 	bl	8000b30 <__aeabi_fsub>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	4620      	mov	r0, r4
 8002222:	f7fe fd8f 	bl	8000d44 <__aeabi_fmul>
 8002226:	4603      	mov	r3, r0
 8002228:	461d      	mov	r5, r3
 800222a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4619      	mov	r1, r3
 8002234:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8002238:	f7fe fc7a 	bl	8000b30 <__aeabi_fsub>
 800223c:	4603      	mov	r3, r0
 800223e:	4619      	mov	r1, r3
 8002240:	4620      	mov	r0, r4
 8002242:	f7fe fd7f 	bl	8000d44 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
 8002248:	4619      	mov	r1, r3
 800224a:	4628      	mov	r0, r5
 800224c:	f7fe fc72 	bl	8000b34 <__addsf3>
 8002250:	4603      	mov	r3, r0
 8002252:	461d      	mov	r5, r3
		       + K[1][2] * (az_norm - h[2]);
 8002254:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4619      	mov	r1, r3
 800225e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8002262:	f7fe fc65 	bl	8000b30 <__aeabi_fsub>
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	4620      	mov	r0, r4
 800226c:	f7fe fd6a 	bl	8000d44 <__aeabi_fmul>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	4628      	mov	r0, r5
 8002276:	f7fe fc5d 	bl	8000b34 <__addsf3>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]

	return;
 8002286:	bf00      	nop
}
 8002288:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002290 <LSM9DS1_ReadReg>:
 * @brief  Read data from Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LSM9DS1_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2110      	movs	r1, #16
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LSM9DS1_ReadReg+0x50>)
 80022ac:	f002 fb3a 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 80022b0:	1cf9      	adds	r1, r7, #3
 80022b2:	2364      	movs	r3, #100	; 0x64
 80022b4:	2201      	movs	r2, #1
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f002 ffde 	bl	8005278 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 80022bc:	f107 010f 	add.w	r1, r7, #15
 80022c0:	2364      	movs	r3, #100	; 0x64
 80022c2:	2201      	movs	r2, #1
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f003 f91a 	bl	80054fe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2110      	movs	r1, #16
 80022ce:	4804      	ldr	r0, [pc, #16]	; (80022e0 <LSM9DS1_ReadReg+0x50>)
 80022d0:	f002 fb28 	bl	8004924 <HAL_GPIO_WritePin>
	return val;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010800 	.word	0x40010800

080022e4 <LSM9DS1_WriteReg>:
 * @brief  Write on Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LSM9DS1_WriteReg(SPI_HandleTypeDef *hspi, uint8_t add, uint8_t val) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
 80022f0:	4613      	mov	r3, r2
 80022f2:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	2110      	movs	r1, #16
 8002302:	480c      	ldr	r0, [pc, #48]	; (8002334 <LSM9DS1_WriteReg+0x50>)
 8002304:	f002 fb0e 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8002308:	1cf9      	adds	r1, r7, #3
 800230a:	2364      	movs	r3, #100	; 0x64
 800230c:	2201      	movs	r2, #1
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f002 ffb2 	bl	8005278 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 8002314:	1cb9      	adds	r1, r7, #2
 8002316:	2364      	movs	r3, #100	; 0x64
 8002318:	2201      	movs	r2, #1
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f002 ffac 	bl	8005278 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2110      	movs	r1, #16
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <LSM9DS1_WriteReg+0x50>)
 8002326:	f002 fafd 	bl	8004924 <HAL_GPIO_WritePin>

}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40010800 	.word	0x40010800

08002338 <LSM9DS1_Init>:
 * @brief  Initialize LSM9DS1 to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LSM9DS1 sensor Scale
 */
void LSM9DS1_Init(SPI_HandleTypeDef *hspi, uint8_t ctrl2) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74; // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 8002344:	2374      	movs	r3, #116	; 0x74
 8002346:	73fb      	strb	r3, [r7, #15]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG1_M, ctrl1);
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	461a      	mov	r2, r3
 800234c:	2120      	movs	r1, #32
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffc8 	bl	80022e4 <LSM9DS1_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG2_M, ctrl2);
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	461a      	mov	r2, r3
 8002358:	2121      	movs	r1, #33	; 0x21
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffc2 	bl	80022e4 <LSM9DS1_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 8002360:	2300      	movs	r3, #0
 8002362:	73bb      	strb	r3, [r7, #14]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG3_M, ctrl3);
 8002364:	7bbb      	ldrb	r3, [r7, #14]
 8002366:	461a      	mov	r2, r3
 8002368:	2122      	movs	r1, #34	; 0x22
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffba 	bl	80022e4 <LSM9DS1_WriteReg>

	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 8002370:	230c      	movs	r3, #12
 8002372:	737b      	strb	r3, [r7, #13]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG4_M, ctrl4);
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	461a      	mov	r2, r3
 8002378:	2123      	movs	r1, #35	; 0x23
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffb2 	bl	80022e4 <LSM9DS1_WriteReg>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <MPU_begin>:

//MPU6500 Functions

uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU6500_t *pMPU6500) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	// Initialize variables
	uint8_t addr, val;
//	 Confirm device
//	HAL_Delay(100);
	whoAmI();
 8002392:	f000 f8dd 	bl	8002550 <whoAmI>
	readRegisters(WHO_AM_I, 1, &check);
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <MPU_begin+0x7c>)
 8002398:	2101      	movs	r1, #1
 800239a:	2075      	movs	r0, #117	; 0x75
 800239c:	f000 f8c5 	bl	800252a <readRegisters>
	if (check == WHO_AM_I_6500_ANS) {
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MPU_begin+0x7c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d128      	bne.n	80023fa <MPU_begin+0x72>
//	 Startup / reset the sensor
		addr = PWR_MGMT_1;
 80023a8:	236b      	movs	r3, #107	; 0x6b
 80023aa:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80023b0:	7bba      	ldrb	r2, [r7, #14]
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f8a2 	bl	8002500 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 80023bc:	236a      	movs	r3, #106	; 0x6a
 80023be:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 80023c0:	2310      	movs	r3, #16
 80023c2:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80023c4:	7bba      	ldrb	r2, [r7, #14]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f898 	bl	8002500 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 80023d0:	2311      	movs	r3, #17
 80023d2:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f8c9 	bl	800256c <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges
		MPU_writeAccFullScaleRange(pMPU6500,
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80023e0:	4619      	mov	r1, r3
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f000 f8d8 	bl	8002598 <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80023ee:	4619      	mov	r1, r3
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	f000 f92d 	bl	8002650 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <MPU_begin+0x74>
	} else {
		return 0;
 80023fa:	2300      	movs	r3, #0
	}
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200002ec 	.word	0x200002ec

08002408 <MPU_CS>:

void MPU_CS(uint8_t state) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, CS_MPU_Pin, state);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <MPU_CS+0x20>)
 800241c:	f002 fa82 	bl	8004924 <HAL_GPIO_WritePin>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010c00 	.word	0x40010c00

0800242c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&IMU_STREAM, (uint8_t*) &Byte,
 800243a:	f107 020f 	add.w	r2, r7, #15
 800243e:	1df9      	adds	r1, r7, #7
 8002440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	4806      	ldr	r0, [pc, #24]	; (8002464 <SPIx_WriteRead+0x38>)
 800244a:	f003 f970 	bl	800572e <HAL_SPI_TransmitReceive>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	e000      	b.n	800245a <SPIx_WriteRead+0x2e>
	} else {
	}
	return receivedbyte;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000340 	.word	0x20000340

08002468 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
 8002474:	4613      	mov	r3, r2
 8002476:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff ffc5 	bl	8002408 <MPU_CS>
	SPIx_WriteRead(WriteAddr);
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ffd3 	bl	800242c <SPIx_WriteRead>
	while (NumByteToWrite >= 0x01) {
 8002486:	e00a      	b.n	800249e <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*pBuffer);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffcd 	bl	800242c <SPIx_WriteRead>
		NumByteToWrite--;
 8002492:	883b      	ldrh	r3, [r7, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01) {
 800249e:	883b      	ldrh	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f1      	bne.n	8002488 <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ffaf 	bl	8002408 <MPU_CS>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	4613      	mov	r3, r2
 80024c2:	803b      	strh	r3, [r7, #0]

	MPU_CS(CS_SEL);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff ff9f 	bl	8002408 <MPU_CS>
	uint8_t data = ReadAddr | READWRITE_CMD;
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&IMU_STREAM, &data, 1, 100);
 80024d4:	f107 010f 	add.w	r1, r7, #15
 80024d8:	2364      	movs	r3, #100	; 0x64
 80024da:	2201      	movs	r2, #1
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <MPU_SPI_Read+0x48>)
 80024de:	f002 fecb 	bl	8005278 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&IMU_STREAM, pBuffer, NumByteToRead, 100);
 80024e2:	883a      	ldrh	r2, [r7, #0]
 80024e4:	2364      	movs	r3, #100	; 0x64
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <MPU_SPI_Read+0x48>)
 80024ea:	f003 f808 	bl	80054fe <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7ff ff8a 	bl	8002408 <MPU_CS>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000340 	.word	0x20000340

08002500 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8002510:	79f9      	ldrb	r1, [r7, #7]
 8002512:	1dbb      	adds	r3, r7, #6
 8002514:	2201      	movs	r2, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffa6 	bl	8002468 <MPU_SPI_Write>
	HAL_Delay(10);
 800251c:	200a      	movs	r0, #10
 800251e:	f001 fed3 	bl	80042c8 <HAL_Delay>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t *dest) {
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	603a      	str	r2, [r7, #0]
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	460b      	mov	r3, r1
 8002538:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 800253a:	79bb      	ldrb	r3, [r7, #6]
 800253c:	b29a      	uxth	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4619      	mov	r1, r3
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	f7ff ffb6 	bl	80024b4 <MPU_SPI_Read>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
uint8_t whoAmI() {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, &_buffer1);
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <whoAmI+0x18>)
 8002556:	2101      	movs	r1, #1
 8002558:	2075      	movs	r0, #117	; 0x75
 800255a:	f7ff ffe6 	bl	800252a <readRegisters>

	// return the register value
	return _buffer1;
 800255e:	4b02      	ldr	r3, [pc, #8]	; (8002568 <whoAmI+0x18>)
 8002560:	781b      	ldrb	r3, [r3, #0]
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000288 	.word	0x20000288

0800256c <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG2, bandwidth);
 8002576:	221d      	movs	r2, #29
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff ffbf 	bl	8002500 <writeRegister>
	writeRegister(CONFIG, bandwidth);
 8002582:	221a      	movs	r2, #26
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7ff ffb9 	bl	8002500 <writeRegister>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 80025a4:	231c      	movs	r3, #28
 80025a6:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d83e      	bhi.n	800262c <MPU_writeAccFullScaleRange+0x94>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <MPU_writeAccFullScaleRange+0x1c>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025df 	.word	0x080025df
 80025bc:	080025f9 	.word	0x080025f9
 80025c0:	08002613 	.word	0x08002613
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80025ca:	60da      	str	r2, [r3, #12]
		val = 0x00;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80025d0:	7bba      	ldrb	r2, [r7, #14]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff92 	bl	8002500 <writeRegister>
		break;
 80025dc:	e033      	b.n	8002646 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80025e4:	60da      	str	r2, [r3, #12]
		val = 0x08;
 80025e6:	2308      	movs	r3, #8
 80025e8:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80025ea:	7bba      	ldrb	r2, [r7, #14]
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff85 	bl	8002500 <writeRegister>
		break;
 80025f6:	e026      	b.n	8002646 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80025fe:	60da      	str	r2, [r3, #12]
		val = 0x10;
 8002600:	2310      	movs	r3, #16
 8002602:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002604:	7bba      	ldrb	r2, [r7, #14]
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff78 	bl	8002500 <writeRegister>
		break;
 8002610:	e019      	b.n	8002646 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002618:	60da      	str	r2, [r3, #12]
		val = 0x18;
 800261a:	2318      	movs	r3, #24
 800261c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800261e:	7bba      	ldrb	r2, [r7, #14]
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff6b 	bl	8002500 <writeRegister>
		break;
 800262a:	e00c      	b.n	8002646 <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002632:	60da      	str	r2, [r3, #12]
		val = 0x08;
 8002634:	2308      	movs	r3, #8
 8002636:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002638:	7bba      	ldrb	r2, [r7, #14]
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff5e 	bl	8002500 <writeRegister>
		break;
 8002644:	bf00      	nop
	}
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop

08002650 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 800265c:	231b      	movs	r3, #27
 800265e:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d83a      	bhi.n	80026dc <MPU_writeGyroFullScaleRange+0x8c>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <MPU_writeGyroFullScaleRange+0x1c>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	08002695 	.word	0x08002695
 8002674:	080026ad 	.word	0x080026ad
 8002678:	080026c5 	.word	0x080026c5
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <MPU_writeGyroFullScaleRange+0xac>)
 8002680:	611a      	str	r2, [r3, #16]
		val = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002686:	7bba      	ldrb	r2, [r7, #14]
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff37 	bl	8002500 <writeRegister>
		break;
 8002692:	e02f      	b.n	80026f4 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <MPU_writeGyroFullScaleRange+0xb0>)
 8002698:	611a      	str	r2, [r3, #16]
		val = 0x08;
 800269a:	2308      	movs	r3, #8
 800269c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800269e:	7bba      	ldrb	r2, [r7, #14]
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff2b 	bl	8002500 <writeRegister>
		break;
 80026aa:	e023      	b.n	80026f4 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <MPU_writeGyroFullScaleRange+0xb4>)
 80026b0:	611a      	str	r2, [r3, #16]
		val = 0x10;
 80026b2:	2310      	movs	r3, #16
 80026b4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026b6:	7bba      	ldrb	r2, [r7, #14]
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff1f 	bl	8002500 <writeRegister>
		break;
 80026c2:	e017      	b.n	80026f4 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a10      	ldr	r2, [pc, #64]	; (8002708 <MPU_writeGyroFullScaleRange+0xb8>)
 80026c8:	611a      	str	r2, [r3, #16]
		val = 0x18;
 80026ca:	2318      	movs	r3, #24
 80026cc:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026ce:	7bba      	ldrb	r2, [r7, #14]
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff13 	bl	8002500 <writeRegister>
		break;
 80026da:	e00b      	b.n	80026f4 <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <MPU_writeGyroFullScaleRange+0xb0>)
 80026e0:	611a      	str	r2, [r3, #16]
		val = 0x08;
 80026e2:	2308      	movs	r3, #8
 80026e4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026e6:	7bba      	ldrb	r2, [r7, #14]
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff07 	bl	8002500 <writeRegister>
		break;
 80026f2:	bf00      	nop
	}
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	43030000 	.word	0x43030000
 8002700:	42830000 	.word	0x42830000
 8002704:	42033333 	.word	0x42033333
 8002708:	41833333 	.word	0x41833333

0800270c <MPU6500_GetData>:
	MPU_CS(CS_DES);
	return val;
}

/* read the data, each argument should point to a array for x, y, and x */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500
	readRegisters(ACCEL_OUT, 14, _buffer);
 8002714:	233b      	movs	r3, #59	; 0x3b
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <MPU6500_GetData+0xa0>)
 8002718:	210e      	movs	r1, #14
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff05 	bl	800252a <readRegisters>

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <MPU6500_GetData+0xa0>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	b21a      	sxth	r2, r3
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <MPU6500_GetData+0xa0>)
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	b21b      	sxth	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	b21a      	sxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <MPU6500_GetData+0xa0>)
 8002738:	789b      	ldrb	r3, [r3, #2]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	b21a      	sxth	r2, r3
 800273e:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <MPU6500_GetData+0xa0>)
 8002740:	78db      	ldrb	r3, [r3, #3]
 8002742:	b21b      	sxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	b21a      	sxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <MPU6500_GetData+0xa0>)
 800274e:	791b      	ldrb	r3, [r3, #4]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <MPU6500_GetData+0xa0>)
 8002756:	795b      	ldrb	r3, [r3, #5]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b21a      	sxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	809a      	strh	r2, [r3, #4]
//	Accelerometer after offset reduction
//	pMPU6500->rawData.ax = pMPU6500->rawData.ax - 32767;
//	pMPU6500->rawData.ay = pMPU6500->rawData.ay - 32767;
//	pMPU6500->rawData.az = pMPU6500->rawData.az - 15650 + 16384;

	pMPU6500->rawData.gx = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <MPU6500_GetData+0xa0>)
 8002764:	7a1b      	ldrb	r3, [r3, #8]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	b21a      	sxth	r2, r3
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MPU6500_GetData+0xa0>)
 800276c:	7a5b      	ldrb	r3, [r3, #9]
 800276e:	b21b      	sxth	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b21a      	sxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MPU6500_GetData+0xa0>)
 800277a:	7a9b      	ldrb	r3, [r3, #10]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	b21a      	sxth	r2, r3
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <MPU6500_GetData+0xa0>)
 8002782:	7adb      	ldrb	r3, [r3, #11]
 8002784:	b21b      	sxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b21a      	sxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[12]) << 8) | _buffer[13];
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <MPU6500_GetData+0xa0>)
 8002790:	7b1b      	ldrb	r3, [r3, #12]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	b21a      	sxth	r2, r3
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <MPU6500_GetData+0xa0>)
 8002798:	7b5b      	ldrb	r3, [r3, #13]
 800279a:	b21b      	sxth	r3, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	b21a      	sxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	815a      	strh	r2, [r3, #10]
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200001fc 	.word	0x200001fc

080027b0 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(MPU6500_t *pMPU6500, uint16_t numCalPoints) {
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
	// Init
	int32_t x = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
	int32_t y = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
	int32_t z = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]

	// Zero guard
	if (numCalPoints == 0) {
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <MPU_calibrateGyro+0x22>
		numCalPoints = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	807b      	strh	r3, [r7, #2]
	}

	// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	e01d      	b.n	8002814 <MPU_calibrateGyro+0x64>
		MPU6500_GetData(pMPU6500);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff97 	bl	800270c <MPU6500_GetData>

		x += pMPU6500->rawData.gx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80027e4:	461a      	mov	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	4413      	add	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
		y += pMPU6500->rawData.gy;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027f2:	461a      	mov	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
		z += pMPU6500->rawData.gz;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002800:	461a      	mov	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4413      	add	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3);
 8002808:	2003      	movs	r0, #3
 800280a:	f001 fd5d 	bl	80042c8 <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	3301      	adds	r3, #1
 8002812:	817b      	strh	r3, [r7, #10]
 8002814:	897a      	ldrh	r2, [r7, #10]
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	429a      	cmp	r2, r3
 800281a:	d3dd      	bcc.n	80027d8 <MPU_calibrateGyro+0x28>
	}

	// Average the saved data points to find the gyroscope offset
	pMPU6500->gyroCal.x = (float) x / (float) numCalPoints;
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7fe fa3d 	bl	8000c9c <__aeabi_i2f>
 8002822:	4604      	mov	r4, r0
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fa34 	bl	8000c94 <__aeabi_ui2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	4620      	mov	r0, r4
 8002832:	f7fe fb3b 	bl	8000eac <__aeabi_fdiv>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
	pMPU6500->gyroCal.y = (float) y / (float) numCalPoints;
 800283e:	6938      	ldr	r0, [r7, #16]
 8002840:	f7fe fa2c 	bl	8000c9c <__aeabi_i2f>
 8002844:	4604      	mov	r4, r0
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fa23 	bl	8000c94 <__aeabi_ui2f>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
 8002852:	4620      	mov	r0, r4
 8002854:	f7fe fb2a 	bl	8000eac <__aeabi_fdiv>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
	pMPU6500->gyroCal.z = (float) z / (float) numCalPoints;
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7fe fa1b 	bl	8000c9c <__aeabi_i2f>
 8002866:	4604      	mov	r4, r0
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fa12 	bl	8000c94 <__aeabi_ui2f>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	4620      	mov	r0, r4
 8002876:	f7fe fb19 	bl	8000eac <__aeabi_fdiv>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	0000      	movs	r0, r0
 800288c:	0000      	movs	r0, r0
	...

08002890 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_readProcessedData(MPU6500_t *pMPU6500) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	// Get raw values from the IMU
	MPU6500_GetData(pMPU6500);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff37 	bl	800270c <MPU6500_GetData>

	// Convert accelerometer values to g's
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ pMPU6500->sensorData.aScaleFactor;
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe f9f9 	bl	8000c9c <__aeabi_i2f>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f7fe fafa 	bl	8000eac <__aeabi_fdiv>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ pMPU6500->sensorData.aScaleFactor;
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f9e8 	bl	8000c9c <__aeabi_i2f>
 80028cc:	4602      	mov	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7fe fae9 	bl	8000eac <__aeabi_fdiv>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ pMPU6500->sensorData.aScaleFactor;
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe f9d7 	bl	8000c9c <__aeabi_i2f>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fe fad8 	bl	8000eac <__aeabi_fdiv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	61da      	str	r2, [r3, #28]

	// Compensate for gyro offset
	pMPU6500->sensorData.gx = pMPU6500->rawData.gx - pMPU6500->gyroCal.x;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f9c6 	bl	8000c9c <__aeabi_i2f>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f7fe f909 	bl	8000b30 <__aeabi_fsub>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = pMPU6500->rawData.gy - pMPU6500->gyroCal.y;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f9b5 	bl	8000c9c <__aeabi_i2f>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f7fe f8f8 	bl	8000b30 <__aeabi_fsub>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = pMPU6500->rawData.gz - pMPU6500->gyroCal.z;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f9a4 	bl	8000c9c <__aeabi_i2f>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7fe f8e7 	bl	8000b30 <__aeabi_fsub>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
//	pMPU6500->sensorData.gx /= pMPU6500->sensorData.gScaleFactor;
//	pMPU6500->sensorData.gy /= pMPU6500->sensorData.gScaleFactor;
//	pMPU6500->sensorData.gz /= pMPU6500->sensorData.gScaleFactor;

	// Convert gyro values to rad/s
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1a      	ldr	r2, [r3, #32]
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f7fe fa99 	bl	8000eac <__aeabi_fdiv>
 800297a:	4603      	mov	r3, r0
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fd53 	bl	8000428 <__aeabi_f2d>
 8002982:	a323      	add	r3, pc, #140	; (adr r3, 8002a10 <MPU_readProcessedData+0x180>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fda6 	bl	80004d8 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f7fe f878 	bl	8000a88 <__aeabi_d2f>
 8002998:	4602      	mov	r2, r0
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f7fe fa7f 	bl	8000eac <__aeabi_fdiv>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fd39 	bl	8000428 <__aeabi_f2d>
 80029b6:	a316      	add	r3, pc, #88	; (adr r3, 8002a10 <MPU_readProcessedData+0x180>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fd8c 	bl	80004d8 <__aeabi_dmul>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f85e 	bl	8000a88 <__aeabi_d2f>
 80029cc:	4602      	mov	r2, r0
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe fa65 	bl	8000eac <__aeabi_fdiv>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd1f 	bl	8000428 <__aeabi_f2d>
 80029ea:	a309      	add	r3, pc, #36	; (adr r3, 8002a10 <MPU_readProcessedData+0x180>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fd72 	bl	80004d8 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f844 	bl	8000a88 <__aeabi_d2f>
 8002a00:	4602      	mov	r2, r0
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	a226e211 	.word	0xa226e211
 8002a14:	3f91df46 	.word	0x3f91df46

08002a18 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_calcAttitude(MPU6500_t *pMPU6500) {
 8002a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a1c:	b09a      	sub	sp, #104	; 0x68
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	61f8      	str	r0, [r7, #28]
	// Read processed data
	MPU_readProcessedData(pMPU6500);
 8002a22:	69f8      	ldr	r0, [r7, #28]
 8002a24:	f7ff ff34 	bl	8002890 <MPU_readProcessedData>

	imu_filter filt_imu;

	sat_attitude attitude_sat;

	myprintf("Sensor data\n");
 8002a28:	48af      	ldr	r0, [pc, #700]	; (8002ce8 <MPU_calcAttitude+0x2d0>)
 8002a2a:	f000 fd79 	bl	8003520 <myprintf>
	myprintf(" ax = %.2f\r\n", pMPU6500->sensorData.ax);
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fcf8 	bl	8000428 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	48ab      	ldr	r0, [pc, #684]	; (8002cec <MPU_calcAttitude+0x2d4>)
 8002a3e:	f000 fd6f 	bl	8003520 <myprintf>
	myprintf(" ay = %.2f\r\n", pMPU6500->sensorData.ay);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fcee 	bl	8000428 <__aeabi_f2d>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	48a7      	ldr	r0, [pc, #668]	; (8002cf0 <MPU_calcAttitude+0x2d8>)
 8002a52:	f000 fd65 	bl	8003520 <myprintf>
	myprintf(" az = %.2f\r\n", pMPU6500->sensorData.az);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fce4 	bl	8000428 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	48a3      	ldr	r0, [pc, #652]	; (8002cf4 <MPU_calcAttitude+0x2dc>)
 8002a66:	f000 fd5b 	bl	8003520 <myprintf>
	myprintf(" gx = %.2f\r\n", pMPU6500->sensorData.gx);
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fcda 	bl	8000428 <__aeabi_f2d>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	489f      	ldr	r0, [pc, #636]	; (8002cf8 <MPU_calcAttitude+0x2e0>)
 8002a7a:	f000 fd51 	bl	8003520 <myprintf>
	myprintf(" gy = %.2f\r\n", pMPU6500->sensorData.gy);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fcd0 	bl	8000428 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	489b      	ldr	r0, [pc, #620]	; (8002cfc <MPU_calcAttitude+0x2e4>)
 8002a8e:	f000 fd47 	bl	8003520 <myprintf>
	myprintf(" gz = %.2f\r\n", pMPU6500->sensorData.gz);
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fcc6 	bl	8000428 <__aeabi_f2d>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4897      	ldr	r0, [pc, #604]	; (8002d00 <MPU_calcAttitude+0x2e8>)
 8002aa2:	f000 fd3d 	bl	8003520 <myprintf>

	filt_imu = IMU_RCFilter(pMPU6500);
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	69f9      	ldr	r1, [r7, #28]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fd5c 	bl	8003568 <IMU_RCFilter>
 8002ab0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002ab4:	463d      	mov	r5, r7
 8002ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002abe:	e884 0003 	stmia.w	r4, {r0, r1}

	myprintf("Filtered accelerometer data\n");
 8002ac2:	4890      	ldr	r0, [pc, #576]	; (8002d04 <MPU_calcAttitude+0x2ec>)
 8002ac4:	f000 fd2c 	bl	8003520 <myprintf>
	myprintf(" ax_mps2 = %.2f\r\n", filt_imu.ax_mps2);
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fcac 	bl	8000428 <__aeabi_f2d>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	488c      	ldr	r0, [pc, #560]	; (8002d08 <MPU_calcAttitude+0x2f0>)
 8002ad6:	f000 fd23 	bl	8003520 <myprintf>
	myprintf(" ay_mps2 = %.2f\r\n", filt_imu.ay_mps2);
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fca3 	bl	8000428 <__aeabi_f2d>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4889      	ldr	r0, [pc, #548]	; (8002d0c <MPU_calcAttitude+0x2f4>)
 8002ae8:	f000 fd1a 	bl	8003520 <myprintf>
	myprintf(" az_mps2 = %.2f\r\n", filt_imu.az_mps2);
 8002aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fc9a 	bl	8000428 <__aeabi_f2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4885      	ldr	r0, [pc, #532]	; (8002d10 <MPU_calcAttitude+0x2f8>)
 8002afa:	f000 fd11 	bl	8003520 <myprintf>

	myprintf("Filtered gyroscope data\n");
 8002afe:	4885      	ldr	r0, [pc, #532]	; (8002d14 <MPU_calcAttitude+0x2fc>)
 8002b00:	f000 fd0e 	bl	8003520 <myprintf>
	myprintf(" p_rps = %.2f\r\n", filt_imu.p_rps);
 8002b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fc8e 	bl	8000428 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4881      	ldr	r0, [pc, #516]	; (8002d18 <MPU_calcAttitude+0x300>)
 8002b12:	f000 fd05 	bl	8003520 <myprintf>
	myprintf(" q_rps = %.2f\r\n", filt_imu.q_rps);
 8002b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fc85 	bl	8000428 <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	487e      	ldr	r0, [pc, #504]	; (8002d1c <MPU_calcAttitude+0x304>)
 8002b24:	f000 fcfc 	bl	8003520 <myprintf>
	myprintf(" r_rps = %.2f\r\n", filt_imu.r_rps);
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fc7c 	bl	8000428 <__aeabi_f2d>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	487a      	ldr	r0, [pc, #488]	; (8002d20 <MPU_calcAttitude+0x308>)
 8002b36:	f000 fcf3 	bl	8003520 <myprintf>

	Attitude_genEstimate(&filt_imu, &attitude_sat);
 8002b3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fd8b 	bl	8003660 <Attitude_genEstimate>
	Attitude_compleEstimate(&filt_imu, &combined_sat_att);
 8002b4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b4e:	4975      	ldr	r1, [pc, #468]	; (8002d24 <MPU_calcAttitude+0x30c>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fe85 	bl	8003860 <Attitude_compleEstimate>
	Attitude_ekfEstimate(&filt_imu, &combined_sat_att);
 8002b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b5a:	4972      	ldr	r1, [pc, #456]	; (8002d24 <MPU_calcAttitude+0x30c>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 ff8b 	bl	8003a78 <Attitude_ekfEstimate>

	// Complementary filter
	accelPitch = atan2(pMPU6500->sensorData.ay,
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fc5e 	bl	8000428 <__aeabi_f2d>
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	460d      	mov	r5, r1
			pMPU6500->sensorData.az) * RAD2DEG;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	69db      	ldr	r3, [r3, #28]
	accelPitch = atan2(pMPU6500->sensorData.ay,
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fc57 	bl	8000428 <__aeabi_f2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f006 fc7b 	bl	800947c <atan2>
			pMPU6500->sensorData.az) * RAD2DEG;
 8002b86:	a356      	add	r3, pc, #344	; (adr r3, 8002ce0 <MPU_calcAttitude+0x2c8>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f7fd fca4 	bl	80004d8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fd ff76 	bl	8000a88 <__aeabi_d2f>
 8002b9c:	4603      	mov	r3, r0
	accelPitch = atan2(pMPU6500->sensorData.ay,
 8002b9e:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <MPU_calcAttitude+0x310>)
 8002ba0:	6013      	str	r3, [r2, #0]
	accelRoll = atan2(pMPU6500->sensorData.ax,
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fc3e 	bl	8000428 <__aeabi_f2d>
 8002bac:	4604      	mov	r4, r0
 8002bae:	460d      	mov	r5, r1
			pMPU6500->sensorData.az) * RAD2DEG;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	69db      	ldr	r3, [r3, #28]
	accelRoll = atan2(pMPU6500->sensorData.ax,
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fc37 	bl	8000428 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f006 fc5b 	bl	800947c <atan2>
			pMPU6500->sensorData.az) * RAD2DEG;
 8002bc6:	a346      	add	r3, pc, #280	; (adr r3, 8002ce0 <MPU_calcAttitude+0x2c8>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fc84 	bl	80004d8 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7fd ff56 	bl	8000a88 <__aeabi_d2f>
 8002bdc:	4603      	mov	r3, r0
	accelRoll = atan2(pMPU6500->sensorData.ax,
 8002bde:	4a53      	ldr	r2, [pc, #332]	; (8002d2c <MPU_calcAttitude+0x314>)
 8002be0:	6013      	str	r3, [r2, #0]

	pMPU6500->attitude.r = pMPU6500->attitude.tau
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
			* (pMPU6500->attitude.r
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	6c1d      	ldr	r5, [r3, #64]	; 0x40
					+ pMPU6500->sensorData.gy * pMPU6500->attitude.dt)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f7fe f8a5 	bl	8000d44 <__aeabi_fmul>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f7fd ff98 	bl	8000b34 <__addsf3>
 8002c04:	4603      	mov	r3, r0
			* (pMPU6500->attitude.r
 8002c06:	4619      	mov	r1, r3
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7fe f89b 	bl	8000d44 <__aeabi_fmul>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461c      	mov	r4, r3
			+ (1 - pMPU6500->attitude.tau) * accelRoll;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002c1c:	f7fd ff88 	bl	8000b30 <__aeabi_fsub>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <MPU_calcAttitude+0x314>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7fe f88a 	bl	8000d44 <__aeabi_fmul>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4619      	mov	r1, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7fd ff7d 	bl	8000b34 <__addsf3>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
	pMPU6500->attitude.r = pMPU6500->attitude.tau
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
	pMPU6500->attitude.p = pMPU6500->attitude.tau
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	6b9c      	ldr	r4, [r3, #56]	; 0x38
			* (pMPU6500->attitude.p
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	6c5d      	ldr	r5, [r3, #68]	; 0x44
					- pMPU6500->sensorData.gx * pMPU6500->attitude.dt)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f7fe f875 	bl	8000d44 <__aeabi_fmul>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4628      	mov	r0, r5
 8002c60:	f7fd ff66 	bl	8000b30 <__aeabi_fsub>
 8002c64:	4603      	mov	r3, r0
			* (pMPU6500->attitude.p
 8002c66:	4619      	mov	r1, r3
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f7fe f86b 	bl	8000d44 <__aeabi_fmul>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461c      	mov	r4, r3
			+ (1 - pMPU6500->attitude.tau) * accelPitch;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002c7c:	f7fd ff58 	bl	8000b30 <__aeabi_fsub>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <MPU_calcAttitude+0x310>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7fe f85a 	bl	8000d44 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4619      	mov	r1, r3
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7fd ff4d 	bl	8000b34 <__addsf3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
	pMPU6500->attitude.p = pMPU6500->attitude.tau
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
	pMPU6500->attitude.y += (pMPU6500->sensorData.gz * pMPU6500->attitude.dt);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7fe f847 	bl	8000d44 <__aeabi_fmul>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7fd ff3a 	bl	8000b34 <__addsf3>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	649a      	str	r2, [r3, #72]	; 0x48

	float magx = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_L_M);
 8002cc8:	2128      	movs	r1, #40	; 0x28
 8002cca:	4819      	ldr	r0, [pc, #100]	; (8002d30 <MPU_calcAttitude+0x318>)
 8002ccc:	f7ff fae0 	bl	8002290 <LSM9DS1_ReadReg>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd ffde 	bl	8000c94 <__aeabi_ui2f>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	667b      	str	r3, [r7, #100]	; 0x64
 8002cdc:	e02a      	b.n	8002d34 <MPU_calcAttitude+0x31c>
 8002cde:	bf00      	nop
 8002ce0:	1a63cbb0 	.word	0x1a63cbb0
 8002ce4:	404ca5dc 	.word	0x404ca5dc
 8002ce8:	0800bbc8 	.word	0x0800bbc8
 8002cec:	0800bbd8 	.word	0x0800bbd8
 8002cf0:	0800bbe8 	.word	0x0800bbe8
 8002cf4:	0800bbf8 	.word	0x0800bbf8
 8002cf8:	0800bc08 	.word	0x0800bc08
 8002cfc:	0800bc18 	.word	0x0800bc18
 8002d00:	0800bc28 	.word	0x0800bc28
 8002d04:	0800bc38 	.word	0x0800bc38
 8002d08:	0800bc58 	.word	0x0800bc58
 8002d0c:	0800bc6c 	.word	0x0800bc6c
 8002d10:	0800bc80 	.word	0x0800bc80
 8002d14:	0800bc94 	.word	0x0800bc94
 8002d18:	0800bcb0 	.word	0x0800bcb0
 8002d1c:	0800bcc0 	.word	0x0800bcc0
 8002d20:	0800bcd0 	.word	0x0800bcd0
 8002d24:	2000027c 	.word	0x2000027c
 8002d28:	2000047c 	.word	0x2000047c
 8002d2c:	20000478 	.word	0x20000478
 8002d30:	20000340 	.word	0x20000340
	float magy = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_L_M);
 8002d34:	212a      	movs	r1, #42	; 0x2a
 8002d36:	4892      	ldr	r0, [pc, #584]	; (8002f80 <MPU_calcAttitude+0x568>)
 8002d38:	f7ff faaa 	bl	8002290 <LSM9DS1_ReadReg>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd ffa8 	bl	8000c94 <__aeabi_ui2f>
 8002d44:	4603      	mov	r3, r0
 8002d46:	663b      	str	r3, [r7, #96]	; 0x60
	float magz = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_L_M);
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	488d      	ldr	r0, [pc, #564]	; (8002f80 <MPU_calcAttitude+0x568>)
 8002d4c:	f7ff faa0 	bl	8002290 <LSM9DS1_ReadReg>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd ff9e 	bl	8000c94 <__aeabi_ui2f>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	65fb      	str	r3, [r7, #92]	; 0x5c

	float rollRad = pMPU6500->attitude.r / 180 * 3.14159265359;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	4988      	ldr	r1, [pc, #544]	; (8002f84 <MPU_calcAttitude+0x56c>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f8a2 	bl	8000eac <__aeabi_fdiv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fb5c 	bl	8000428 <__aeabi_f2d>
 8002d70:	a37f      	add	r3, pc, #508	; (adr r3, 8002f70 <MPU_calcAttitude+0x558>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fbaf 	bl	80004d8 <__aeabi_dmul>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd fe81 	bl	8000a88 <__aeabi_d2f>
 8002d86:	4603      	mov	r3, r0
 8002d88:	65bb      	str	r3, [r7, #88]	; 0x58
	float pitchRad = pMPU6500->attitude.p / 180 * 3.14159265359;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	497d      	ldr	r1, [pc, #500]	; (8002f84 <MPU_calcAttitude+0x56c>)
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe f88b 	bl	8000eac <__aeabi_fdiv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb45 	bl	8000428 <__aeabi_f2d>
 8002d9e:	a374      	add	r3, pc, #464	; (adr r3, 8002f70 <MPU_calcAttitude+0x558>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fb98 	bl	80004d8 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fd fe6a 	bl	8000a88 <__aeabi_d2f>
 8002db4:	4603      	mov	r3, r0
 8002db6:	657b      	str	r3, [r7, #84]	; 0x54

	float Xm = magx * cos(pitchRad) - magy * sin(rollRad) * sin(pitchRad)
 8002db8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002dba:	f7fd fb35 	bl	8000428 <__aeabi_f2d>
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002dc4:	f7fd fb30 	bl	8000428 <__aeabi_f2d>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f006 f930 	bl	8009034 <cos>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd fb7c 	bl	80004d8 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4690      	mov	r8, r2
 8002de6:	4699      	mov	r9, r3
 8002de8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002dea:	f7fd fb1d 	bl	8000428 <__aeabi_f2d>
 8002dee:	4604      	mov	r4, r0
 8002df0:	460d      	mov	r5, r1
 8002df2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002df4:	f7fd fb18 	bl	8000428 <__aeabi_f2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f006 f95a 	bl	80090b8 <sin>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4620      	mov	r0, r4
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	f7fd fb64 	bl	80004d8 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
 8002e18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e1a:	f7fd fb05 	bl	8000428 <__aeabi_f2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f006 f947 	bl	80090b8 <sin>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fb51 	bl	80004d8 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	f7fd f993 	bl	8000168 <__aeabi_dsub>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4690      	mov	r8, r2
 8002e48:	4699      	mov	r9, r3
			+ magz * cos(rollRad) * sin(pitchRad);
 8002e4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e4c:	f7fd faec 	bl	8000428 <__aeabi_f2d>
 8002e50:	4604      	mov	r4, r0
 8002e52:	460d      	mov	r5, r1
 8002e54:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e56:	f7fd fae7 	bl	8000428 <__aeabi_f2d>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f006 f8e7 	bl	8009034 <cos>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fb33 	bl	80004d8 <__aeabi_dmul>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4614      	mov	r4, r2
 8002e78:	461d      	mov	r5, r3
 8002e7a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e7c:	f7fd fad4 	bl	8000428 <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f006 f916 	bl	80090b8 <sin>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fb20 	bl	80004d8 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	f7fd f964 	bl	800016c <__adddf3>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
	float Xm = magx * cos(pitchRad) - magy * sin(rollRad) * sin(pitchRad)
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fd fdec 	bl	8000a88 <__aeabi_d2f>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	653b      	str	r3, [r7, #80]	; 0x50

	float Ym = magy * cos(rollRad) + magz * sin(rollRad);
 8002eb4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002eb6:	f7fd fab7 	bl	8000428 <__aeabi_f2d>
 8002eba:	4604      	mov	r4, r0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ec0:	f7fd fab2 	bl	8000428 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f006 f8b2 	bl	8009034 <cos>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	f7fd fafe 	bl	80004d8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4690      	mov	r8, r2
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002ee6:	f7fd fa9f 	bl	8000428 <__aeabi_f2d>
 8002eea:	4604      	mov	r4, r0
 8002eec:	460d      	mov	r5, r1
 8002eee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ef0:	f7fd fa9a 	bl	8000428 <__aeabi_f2d>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f006 f8dc 	bl	80090b8 <sin>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd fae6 	bl	80004d8 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4640      	mov	r0, r8
 8002f12:	4649      	mov	r1, r9
 8002f14:	f7fd f92a 	bl	800016c <__adddf3>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fdb2 	bl	8000a88 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c

	pMPU6500->attitude.y = atan2(Ym, Xm) * RAD2DEG;
 8002f28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f2a:	f7fd fa7d 	bl	8000428 <__aeabi_f2d>
 8002f2e:	4604      	mov	r4, r0
 8002f30:	460d      	mov	r5, r1
 8002f32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f34:	f7fd fa78 	bl	8000428 <__aeabi_f2d>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f006 fa9c 	bl	800947c <atan2>
 8002f44:	a30c      	add	r3, pc, #48	; (adr r3, 8002f78 <MPU_calcAttitude+0x560>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f7fd fac5 	bl	80004d8 <__aeabi_dmul>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	f7fd fd97 	bl	8000a88 <__aeabi_d2f>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	649a      	str	r2, [r3, #72]	; 0x48

}
 8002f60:	bf00      	nop
 8002f62:	3768      	adds	r7, #104	; 0x68
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f6a:	bf00      	nop
 8002f6c:	f3af 8000 	nop.w
 8002f70:	54442eea 	.word	0x54442eea
 8002f74:	400921fb 	.word	0x400921fb
 8002f78:	1a63cbb0 	.word	0x1a63cbb0
 8002f7c:	404ca5dc 	.word	0x404ca5dc
 8002f80:	20000340 	.word	0x20000340
 8002f84:	43340000 	.word	0x43340000

08002f88 <MagRead>:
uint8_t Mag_Data[6];
void MagRead(lsm9ds1_t *plsm9ds1) {
 8002f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f8c:	b08a      	sub	sp, #40	; 0x28
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]

	double Total = 0;
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Mag_Data[0] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_L_M);
 8002f9e:	2128      	movs	r1, #40	; 0x28
 8002fa0:	48bf      	ldr	r0, [pc, #764]	; (80032a0 <MagRead+0x318>)
 8002fa2:	f7ff f975 	bl	8002290 <LSM9DS1_ReadReg>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4bbe      	ldr	r3, [pc, #760]	; (80032a4 <MagRead+0x31c>)
 8002fac:	701a      	strb	r2, [r3, #0]
	Mag_Data[1] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_H_M);
 8002fae:	2129      	movs	r1, #41	; 0x29
 8002fb0:	48bb      	ldr	r0, [pc, #748]	; (80032a0 <MagRead+0x318>)
 8002fb2:	f7ff f96d 	bl	8002290 <LSM9DS1_ReadReg>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4bba      	ldr	r3, [pc, #744]	; (80032a4 <MagRead+0x31c>)
 8002fbc:	705a      	strb	r2, [r3, #1]
	Mag_Data[2] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_L_M);
 8002fbe:	212a      	movs	r1, #42	; 0x2a
 8002fc0:	48b7      	ldr	r0, [pc, #732]	; (80032a0 <MagRead+0x318>)
 8002fc2:	f7ff f965 	bl	8002290 <LSM9DS1_ReadReg>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4bb6      	ldr	r3, [pc, #728]	; (80032a4 <MagRead+0x31c>)
 8002fcc:	709a      	strb	r2, [r3, #2]
	Mag_Data[3] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_H_M);
 8002fce:	212b      	movs	r1, #43	; 0x2b
 8002fd0:	48b3      	ldr	r0, [pc, #716]	; (80032a0 <MagRead+0x318>)
 8002fd2:	f7ff f95d 	bl	8002290 <LSM9DS1_ReadReg>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4bb2      	ldr	r3, [pc, #712]	; (80032a4 <MagRead+0x31c>)
 8002fdc:	70da      	strb	r2, [r3, #3]
	Mag_Data[4] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_L_M);
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	48af      	ldr	r0, [pc, #700]	; (80032a0 <MagRead+0x318>)
 8002fe2:	f7ff f955 	bl	8002290 <LSM9DS1_ReadReg>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4bae      	ldr	r3, [pc, #696]	; (80032a4 <MagRead+0x31c>)
 8002fec:	711a      	strb	r2, [r3, #4]
	Mag_Data[5] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_H_M);
 8002fee:	212d      	movs	r1, #45	; 0x2d
 8002ff0:	48ab      	ldr	r0, [pc, #684]	; (80032a0 <MagRead+0x318>)
 8002ff2:	f7ff f94d 	bl	8002290 <LSM9DS1_ReadReg>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4baa      	ldr	r3, [pc, #680]	; (80032a4 <MagRead+0x31c>)
 8002ffc:	715a      	strb	r2, [r3, #5]

	plsm9ds1->mag.mx = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 8002ffe:	4ba9      	ldr	r3, [pc, #676]	; (80032a4 <MagRead+0x31c>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	b21a      	sxth	r2, r3
 8003006:	4ba7      	ldr	r3, [pc, #668]	; (80032a4 <MagRead+0x31c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b21b      	sxth	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b21a      	sxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	801a      	strh	r2, [r3, #0]
	plsm9ds1->mag.my = (int16_t) ((Mag_Data[3] << 8) | Mag_Data[2]);
 8003014:	4ba3      	ldr	r3, [pc, #652]	; (80032a4 <MagRead+0x31c>)
 8003016:	78db      	ldrb	r3, [r3, #3]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	b21a      	sxth	r2, r3
 800301c:	4ba1      	ldr	r3, [pc, #644]	; (80032a4 <MagRead+0x31c>)
 800301e:	789b      	ldrb	r3, [r3, #2]
 8003020:	b21b      	sxth	r3, r3
 8003022:	4313      	orrs	r3, r2
 8003024:	b21a      	sxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	805a      	strh	r2, [r3, #2]
	plsm9ds1->mag.mz = (int16_t) ((Mag_Data[5] << 8) | Mag_Data[4]);
 800302a:	4b9e      	ldr	r3, [pc, #632]	; (80032a4 <MagRead+0x31c>)
 800302c:	795b      	ldrb	r3, [r3, #5]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	b21a      	sxth	r2, r3
 8003032:	4b9c      	ldr	r3, [pc, #624]	; (80032a4 <MagRead+0x31c>)
 8003034:	791b      	ldrb	r3, [r3, #4]
 8003036:	b21b      	sxth	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	b21a      	sxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	809a      	strh	r2, [r3, #4]

	float temp_mx = (float) (plsm9ds1->mag.mx * LSM9DS1_SENSITIVITY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fe28 	bl	8000c9c <__aeabi_i2f>
 800304c:	4603      	mov	r3, r0
 800304e:	4996      	ldr	r1, [pc, #600]	; (80032a8 <MagRead+0x320>)
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fe77 	bl	8000d44 <__aeabi_fmul>
 8003056:	4603      	mov	r3, r0
 8003058:	61fb      	str	r3, [r7, #28]
	float temp_my = (float) (plsm9ds1->mag.my * LSM9DS1_SENSITIVITY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fe1b 	bl	8000c9c <__aeabi_i2f>
 8003066:	4603      	mov	r3, r0
 8003068:	498f      	ldr	r1, [pc, #572]	; (80032a8 <MagRead+0x320>)
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fe6a 	bl	8000d44 <__aeabi_fmul>
 8003070:	4603      	mov	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]
	float temp_mz = (float) (plsm9ds1->mag.mz * LSM9DS1_SENSITIVITY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fe0e 	bl	8000c9c <__aeabi_i2f>
 8003080:	4603      	mov	r3, r0
 8003082:	4989      	ldr	r1, [pc, #548]	; (80032a8 <MagRead+0x320>)
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fe5d 	bl	8000d44 <__aeabi_fmul>
 800308a:	4603      	mov	r3, r0
 800308c:	617b      	str	r3, [r7, #20]

	Total = sqrt(
			(float) temp_mx * temp_mx + temp_my * temp_my + temp_mz * temp_mz);
 800308e:	69f9      	ldr	r1, [r7, #28]
 8003090:	69f8      	ldr	r0, [r7, #28]
 8003092:	f7fd fe57 	bl	8000d44 <__aeabi_fmul>
 8003096:	4603      	mov	r3, r0
 8003098:	461c      	mov	r4, r3
 800309a:	69b9      	ldr	r1, [r7, #24]
 800309c:	69b8      	ldr	r0, [r7, #24]
 800309e:	f7fd fe51 	bl	8000d44 <__aeabi_fmul>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7fd fd44 	bl	8000b34 <__addsf3>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461c      	mov	r4, r3
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7fd fe46 	bl	8000d44 <__aeabi_fmul>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4619      	mov	r1, r3
 80030bc:	4620      	mov	r0, r4
 80030be:	f7fd fd39 	bl	8000b34 <__addsf3>
 80030c2:	4603      	mov	r3, r0
	Total = sqrt(
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd f9af 	bl	8000428 <__aeabi_f2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f006 f9d5 	bl	8009480 <sqrt>
 80030d6:	e9c7 0108 	strd	r0, r1, [r7, #32]

	myprintf("Magnetometer data\n");
 80030da:	4874      	ldr	r0, [pc, #464]	; (80032ac <MagRead+0x324>)
 80030dc:	f000 fa20 	bl	8003520 <myprintf>
	myprintf(" mx = %.2f\r\n", temp_mx);
 80030e0:	69f8      	ldr	r0, [r7, #28]
 80030e2:	f7fd f9a1 	bl	8000428 <__aeabi_f2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4871      	ldr	r0, [pc, #452]	; (80032b0 <MagRead+0x328>)
 80030ec:	f000 fa18 	bl	8003520 <myprintf>
	myprintf(" my = %.2f\r\n", temp_my);
 80030f0:	69b8      	ldr	r0, [r7, #24]
 80030f2:	f7fd f999 	bl	8000428 <__aeabi_f2d>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	486e      	ldr	r0, [pc, #440]	; (80032b4 <MagRead+0x32c>)
 80030fc:	f000 fa10 	bl	8003520 <myprintf>
	myprintf(" mz = %.2f\r\n", temp_my);
 8003100:	69b8      	ldr	r0, [r7, #24]
 8003102:	f7fd f991 	bl	8000428 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	486b      	ldr	r0, [pc, #428]	; (80032b8 <MagRead+0x330>)
 800310c:	f000 fa08 	bl	8003520 <myprintf>
	myprintf(" Total = %.2f\r\n", (double) Total);
 8003110:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003114:	4869      	ldr	r0, [pc, #420]	; (80032bc <MagRead+0x334>)
 8003116:	f000 fa03 	bl	8003520 <myprintf>

	myprintf(" roll = %.2f\r\n", combined_sat_att.roll);
 800311a:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <MagRead+0x338>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f982 	bl	8000428 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4866      	ldr	r0, [pc, #408]	; (80032c4 <MagRead+0x33c>)
 800312a:	f000 f9f9 	bl	8003520 <myprintf>
	myprintf(" pitch = %.2f\r\n", combined_sat_att.pitch);
 800312e:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <MagRead+0x338>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd f978 	bl	8000428 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4862      	ldr	r0, [pc, #392]	; (80032c8 <MagRead+0x340>)
 800313e:	f000 f9ef 	bl	8003520 <myprintf>
	combined_sat_att.yaw = 0;
 8003142:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <MagRead+0x338>)
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
	myprintf(" yaw = %.2f\r\n", combined_sat_att.yaw);
 800314a:	4b5d      	ldr	r3, [pc, #372]	; (80032c0 <MagRead+0x338>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f96a 	bl	8000428 <__aeabi_f2d>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	485c      	ldr	r0, [pc, #368]	; (80032cc <MagRead+0x344>)
 800315a:	f000 f9e1 	bl	8003520 <myprintf>

	float Xm = temp_mx * cos(combined_sat_att.pitch)
 800315e:	69f8      	ldr	r0, [r7, #28]
 8003160:	f7fd f962 	bl	8000428 <__aeabi_f2d>
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
 8003168:	4b55      	ldr	r3, [pc, #340]	; (80032c0 <MagRead+0x338>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f95b 	bl	8000428 <__aeabi_f2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f005 ff5b 	bl	8009034 <cos>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4620      	mov	r0, r4
 8003184:	4629      	mov	r1, r5
 8003186:	f7fd f9a7 	bl	80004d8 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
			- temp_my * sin(combined_sat_att.roll) * sin(combined_sat_att.pitch)
 8003192:	69b8      	ldr	r0, [r7, #24]
 8003194:	f7fd f948 	bl	8000428 <__aeabi_f2d>
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
 800319c:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <MagRead+0x338>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f941 	bl	8000428 <__aeabi_f2d>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f005 ff83 	bl	80090b8 <sin>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4620      	mov	r0, r4
 80031b8:	4629      	mov	r1, r5
 80031ba:	f7fd f98d 	bl	80004d8 <__aeabi_dmul>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4614      	mov	r4, r2
 80031c4:	461d      	mov	r5, r3
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <MagRead+0x338>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f92c 	bl	8000428 <__aeabi_f2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f005 ff6e 	bl	80090b8 <sin>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fd f978 	bl	80004d8 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4640      	mov	r0, r8
 80031ee:	4649      	mov	r1, r9
 80031f0:	f7fc ffba 	bl	8000168 <__aeabi_dsub>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4690      	mov	r8, r2
 80031fa:	4699      	mov	r9, r3
			+ temp_mz * cos(combined_sat_att.roll)
 80031fc:	6978      	ldr	r0, [r7, #20]
 80031fe:	f7fd f913 	bl	8000428 <__aeabi_f2d>
 8003202:	4604      	mov	r4, r0
 8003204:	460d      	mov	r5, r1
 8003206:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <MagRead+0x338>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f90c 	bl	8000428 <__aeabi_f2d>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f005 ff0c 	bl	8009034 <cos>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4620      	mov	r0, r4
 8003222:	4629      	mov	r1, r5
 8003224:	f7fd f958 	bl	80004d8 <__aeabi_dmul>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4614      	mov	r4, r2
 800322e:	461d      	mov	r5, r3
					* sin(combined_sat_att.pitch);
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <MagRead+0x338>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f8f7 	bl	8000428 <__aeabi_f2d>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f005 ff39 	bl	80090b8 <sin>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f943 	bl	80004d8 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
			+ temp_mz * cos(combined_sat_att.roll)
 8003256:	4640      	mov	r0, r8
 8003258:	4649      	mov	r1, r9
 800325a:	f7fc ff87 	bl	800016c <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
	float Xm = temp_mx * cos(combined_sat_att.pitch)
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f7fd fc0f 	bl	8000a88 <__aeabi_d2f>
 800326a:	4603      	mov	r3, r0
 800326c:	613b      	str	r3, [r7, #16]

	float Ym = temp_my * cos(combined_sat_att.roll)
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	f7fd f8da 	bl	8000428 <__aeabi_f2d>
 8003274:	4604      	mov	r4, r0
 8003276:	460d      	mov	r5, r1
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <MagRead+0x338>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f8d3 	bl	8000428 <__aeabi_f2d>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f005 fed3 	bl	8009034 <cos>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4620      	mov	r0, r4
 8003294:	4629      	mov	r1, r5
 8003296:	f7fd f91f 	bl	80004d8 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	e017      	b.n	80032d0 <MagRead+0x348>
 80032a0:	20000340 	.word	0x20000340
 80032a4:	2000028c 	.word	0x2000028c
 80032a8:	3d6d9168 	.word	0x3d6d9168
 80032ac:	0800bce0 	.word	0x0800bce0
 80032b0:	0800bcf4 	.word	0x0800bcf4
 80032b4:	0800bd04 	.word	0x0800bd04
 80032b8:	0800bd14 	.word	0x0800bd14
 80032bc:	0800bd24 	.word	0x0800bd24
 80032c0:	2000027c 	.word	0x2000027c
 80032c4:	0800bd34 	.word	0x0800bd34
 80032c8:	0800bd44 	.word	0x0800bd44
 80032cc:	0800bd54 	.word	0x0800bd54
 80032d0:	4690      	mov	r8, r2
 80032d2:	4699      	mov	r9, r3
			+ temp_mz * sin(combined_sat_att.roll);
 80032d4:	6978      	ldr	r0, [r7, #20]
 80032d6:	f7fd f8a7 	bl	8000428 <__aeabi_f2d>
 80032da:	4604      	mov	r4, r0
 80032dc:	460d      	mov	r5, r1
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <MagRead+0x408>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f8a0 	bl	8000428 <__aeabi_f2d>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f005 fee2 	bl	80090b8 <sin>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fd f8ec 	bl	80004d8 <__aeabi_dmul>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4640      	mov	r0, r8
 8003306:	4649      	mov	r1, r9
 8003308:	f7fc ff30 	bl	800016c <__adddf3>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
	float Ym = temp_my * cos(combined_sat_att.roll)
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f7fd fbb8 	bl	8000a88 <__aeabi_d2f>
 8003318:	4603      	mov	r3, r0
 800331a:	60fb      	str	r3, [r7, #12]

	combined_sat_att.yaw = atan2(Ym, Xm);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7fd f883 	bl	8000428 <__aeabi_f2d>
 8003322:	4604      	mov	r4, r0
 8003324:	460d      	mov	r5, r1
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	f7fd f87e 	bl	8000428 <__aeabi_f2d>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	f006 f8a2 	bl	800947c <atan2>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f7fd fba2 	bl	8000a88 <__aeabi_d2f>
 8003344:	4603      	mov	r3, r0
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <MagRead+0x408>)
 8003348:	6093      	str	r3, [r2, #8]

	myprintf(" roll = %.2f\r\n", combined_sat_att.roll);
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MagRead+0x408>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f86a 	bl	8000428 <__aeabi_f2d>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	480e      	ldr	r0, [pc, #56]	; (8003394 <MagRead+0x40c>)
 800335a:	f000 f8e1 	bl	8003520 <myprintf>
	myprintf(" pitch = %.2f\r\n", combined_sat_att.pitch);
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MagRead+0x408>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f860 	bl	8000428 <__aeabi_f2d>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	480a      	ldr	r0, [pc, #40]	; (8003398 <MagRead+0x410>)
 800336e:	f000 f8d7 	bl	8003520 <myprintf>
	myprintf(" yaw = %.2f\r\n", combined_sat_att.yaw);
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <MagRead+0x408>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f856 	bl	8000428 <__aeabi_f2d>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <MagRead+0x414>)
 8003382:	f000 f8cd 	bl	8003520 <myprintf>

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003390:	2000027c 	.word	0x2000027c
 8003394:	0800bd34 	.word	0x0800bd34
 8003398:	0800bd44 	.word	0x0800bd44
 800339c:	0800bd54 	.word	0x0800bd54

080033a0 <IMU_Setup>:

void IMU_Setup() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0

	LSM9DS1_Init(&IMU_STREAM, 0x60); // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 80033a4:	2160      	movs	r1, #96	; 0x60
 80033a6:	481a      	ldr	r0, [pc, #104]	; (8003410 <IMU_Setup+0x70>)
 80033a8:	f7fe ffc6 	bl	8002338 <LSM9DS1_Init>
	HAL_Delay(1000);
 80033ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b0:	f000 ff8a 	bl	80042c8 <HAL_Delay>

	if (MPU_begin(&IMU_STREAM, &MPU6500) != TRUE) {
 80033b4:	4917      	ldr	r1, [pc, #92]	; (8003414 <IMU_Setup+0x74>)
 80033b6:	4816      	ldr	r0, [pc, #88]	; (8003410 <IMU_Setup+0x70>)
 80033b8:	f7fe ffe6 	bl	8002388 <MPU_begin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00e      	beq.n	80033e0 <IMU_Setup+0x40>
		sprintf((char*) serialBuf, "ERROR!\r\n");
 80033c2:	4915      	ldr	r1, [pc, #84]	; (8003418 <IMU_Setup+0x78>)
 80033c4:	4815      	ldr	r0, [pc, #84]	; (800341c <IMU_Setup+0x7c>)
 80033c6:	f003 fbc1 	bl	8006b4c <siprintf>
		HAL_UART_Transmit(&DEBUG_STREAM, serialBuf, strlen((char*) serialBuf),
 80033ca:	4814      	ldr	r0, [pc, #80]	; (800341c <IMU_Setup+0x7c>)
 80033cc:	f7fc fec0 	bl	8000150 <strlen>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	2364      	movs	r3, #100	; 0x64
 80033d6:	4911      	ldr	r1, [pc, #68]	; (800341c <IMU_Setup+0x7c>)
 80033d8:	4811      	ldr	r0, [pc, #68]	; (8003420 <IMU_Setup+0x80>)
 80033da:	f002 fda5 	bl	8005f28 <HAL_UART_Transmit>
 80033de:	e002      	b.n	80033e6 <IMU_Setup+0x46>
				100);
	} else {
		myprintf("MPU6500 Initialization Complete..");
 80033e0:	4810      	ldr	r0, [pc, #64]	; (8003424 <IMU_Setup+0x84>)
 80033e2:	f000 f89d 	bl	8003520 <myprintf>
	}

	//	 Calibrate the IMU
	myprintf("\nNow, Calibrating sensors.\r\n");
 80033e6:	4810      	ldr	r0, [pc, #64]	; (8003428 <IMU_Setup+0x88>)
 80033e8:	f000 f89a 	bl	8003520 <myprintf>
	HAL_Delay(1);
 80033ec:	2001      	movs	r0, #1
 80033ee:	f000 ff6b 	bl	80042c8 <HAL_Delay>
	MPU_calibrateGyro(&MPU6500, 1500);
 80033f2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80033f6:	4807      	ldr	r0, [pc, #28]	; (8003414 <IMU_Setup+0x74>)
 80033f8:	f7ff f9da 	bl	80027b0 <MPU_calibrateGyro>
	HAL_Delay(1000);
 80033fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003400:	f000 ff62 	bl	80042c8 <HAL_Delay>
	myprintf("Calibration  Complete!!!\n\n");
 8003404:	4809      	ldr	r0, [pc, #36]	; (800342c <IMU_Setup+0x8c>)
 8003406:	f000 f88b 	bl	8003520 <myprintf>

}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000340 	.word	0x20000340
 8003414:	20000294 	.word	0x20000294
 8003418:	0800bd64 	.word	0x0800bd64
 800341c:	20000414 	.word	0x20000414
 8003420:	200002f0 	.word	0x200002f0
 8003424:	0800bd70 	.word	0x0800bd70
 8003428:	0800bd94 	.word	0x0800bd94
 800342c:	0800bdb4 	.word	0x0800bdb4

08003430 <RCFilter_Init>:
 *      Author: Anjali
 */

#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 800343c:	4918      	ldr	r1, [pc, #96]	; (80034a0 <RCFilter_Init+0x70>)
 800343e:	68b8      	ldr	r0, [r7, #8]
 8003440:	f7fd fc80 	bl	8000d44 <__aeabi_fmul>
 8003444:	4603      	mov	r3, r0
 8003446:	4619      	mov	r1, r3
 8003448:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800344c:	f7fd fd2e 	bl	8000eac <__aeabi_fdiv>
 8003450:	4603      	mov	r3, r0
 8003452:	617b      	str	r3, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fb6c 	bl	8000b34 <__addsf3>
 800345c:	4603      	mov	r3, r0
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fd fd23 	bl	8000eac <__aeabi_fdiv>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fb5f 	bl	8000b34 <__addsf3>
 8003476:	4603      	mov	r3, r0
 8003478:	4619      	mov	r1, r3
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7fd fd16 	bl	8000eac <__aeabi_fdiv>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	60da      	str	r2, [r3, #12]

}
 8003498:	bf00      	nop
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40c90fdb 	.word	0x40c90fdb

080034a4 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fc41 	bl	8000d44 <__aeabi_fmul>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461c      	mov	r4, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7fd fc37 	bl	8000d44 <__aeabi_fmul>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4619      	mov	r1, r3
 80034da:	4620      	mov	r0, r4
 80034dc:	f7fd fb2a 	bl	8000b34 <__addsf3>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}

080034f4 <buffersize>:
 * @brief	counts the number of non-null data in given array
 *
 * @param	buff	pointer to the array of data to be counted
 * @retval	int		number of non-null values in the array
 */
int buffersize(char *buff) {
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	int i = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8003500:	e002      	b.n	8003508 <buffersize+0x14>
		i++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3301      	adds	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f6      	bne.n	8003502 <buffersize+0xe>
	return i;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 8003520:	b40f      	push	{r0, r1, r2, r3}
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
	static char temp[100];
		va_list args;
		va_start(args, fmt);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	603b      	str	r3, [r7, #0]
		vsnprintf(temp, sizeof(temp), fmt, args);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	2164      	movs	r1, #100	; 0x64
 8003534:	480a      	ldr	r0, [pc, #40]	; (8003560 <myprintf+0x40>)
 8003536:	f003 fb55 	bl	8006be4 <vsniprintf>
		va_end(args);
		int len = buffersize(temp);
 800353a:	4809      	ldr	r0, [pc, #36]	; (8003560 <myprintf+0x40>)
 800353c:	f7ff ffda 	bl	80034f4 <buffersize>
 8003540:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&DEBUG_STREAM, (uint8_t*) temp, len, 1000);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	b29a      	uxth	r2, r3
 8003546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800354a:	4905      	ldr	r1, [pc, #20]	; (8003560 <myprintf+0x40>)
 800354c:	4805      	ldr	r0, [pc, #20]	; (8003564 <myprintf+0x44>)
 800354e:	f002 fceb 	bl	8005f28 <HAL_UART_Transmit>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800355c:	b004      	add	sp, #16
 800355e:	4770      	bx	lr
 8003560:	2000020c 	.word	0x2000020c
 8003564:	200002f0 	.word	0x200002f0

08003568 <IMU_RCFilter>:
#define COMP_FILT_ALPHA 		0.0500000000f

#define KALMAN_PREDICT_PERIOD_MS 	10
#define KALMAN_UPDATE_PERIOD_MS 	100

imu_filter IMU_RCFilter(MPU6500_t *imu) {
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b0a2      	sub	sp, #136	; 0x88
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	RCFilter lpfAcc[3];
	RCFilter lpfGyr[3];
	imu_filter filt_imu;

	for (int n = 0; n < 3; n++) {
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003578:	e01a      	b.n	80035b0 <IMU_RCFilter+0x48>
		RCFilter_Init(&lpfAcc[n], 5.0f, 0.01f);
 800357a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800357e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	4a33      	ldr	r2, [pc, #204]	; (8003654 <IMU_RCFilter+0xec>)
 8003588:	4933      	ldr	r1, [pc, #204]	; (8003658 <IMU_RCFilter+0xf0>)
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff50 	bl	8003430 <RCFilter_Init>
		RCFilter_Init(&lpfGyr[n], 25.0f, 0.01f);
 8003590:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <IMU_RCFilter+0xec>)
 800359e:	492f      	ldr	r1, [pc, #188]	; (800365c <IMU_RCFilter+0xf4>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff45 	bl	8003430 <RCFilter_Init>
	for (int n = 0; n < 3; n++) {
 80035a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035aa:	3301      	adds	r3, #1
 80035ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	dde0      	ble.n	800357a <IMU_RCFilter+0x12>
//	RCFilter_Update(&lpfAcc[0], imu->acc_mps2[0]);
//	RCFilter_Update(&lpfAcc[1], imu->acc_mps2[1]);
//	RCFilter_Update(&lpfAcc[2], imu->acc_mps2[2]);

	/* Filter accelerometer data */
	RCFilter_Update(&lpfAcc[0], imu->sensorData.ax);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ff6e 	bl	80034a4 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[1], imu->sensorData.ay);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035d0:	3310      	adds	r3, #16
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff65 	bl	80034a4 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[2], imu->sensorData.az);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035e2:	3320      	adds	r3, #32
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff5c 	bl	80034a4 <RCFilter_Update>
//	RCFilter_Update(&lpfGyr[0], imu->gyr_rps[0]);
//	RCFilter_Update(&lpfGyr[1], imu->gyr_rps[1]);
//	RCFilter_Update(&lpfGyr[2], imu->gyr_rps[2]);

	/* Filter gyroscope data */
	RCFilter_Update(&lpfGyr[0], imu->sensorData.gx);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff54 	bl	80034a4 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[1], imu->sensorData.gy);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	3310      	adds	r3, #16
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff4b 	bl	80034a4 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[2], imu->sensorData.gz);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003616:	3320      	adds	r3, #32
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff42 	bl	80034a4 <RCFilter_Update>

	//Filtered accelerometer measurement
	filt_imu.ax_mps2 = lpfAcc[0].out[0];
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	60fb      	str	r3, [r7, #12]
	filt_imu.ay_mps2 = lpfAcc[1].out[0];
 8003624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003626:	613b      	str	r3, [r7, #16]
	filt_imu.az_mps2 = lpfAcc[2].out[0];
 8003628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800362a:	617b      	str	r3, [r7, #20]
	//Filtered Gyroscope measurement
	filt_imu.p_rps = lpfGyr[0].out[0];
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	61bb      	str	r3, [r7, #24]
	filt_imu.q_rps = lpfGyr[1].out[0];
 8003630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003632:	61fb      	str	r3, [r7, #28]
	filt_imu.r_rps = lpfGyr[2].out[0];
 8003634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003636:	623b      	str	r3, [r7, #32]
	return filt_imu;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	461d      	mov	r5, r3
 800363c:	f107 040c 	add.w	r4, r7, #12
 8003640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003648:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	3788      	adds	r7, #136	; 0x88
 8003650:	46bd      	mov	sp, r7
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	3c23d70a 	.word	0x3c23d70a
 8003658:	40a00000 	.word	0x40a00000
 800365c:	41c80000 	.word	0x41c80000

08003660 <Attitude_genEstimate>:

void Attitude_genEstimate(imu_filter *filt, sat_attitude *att) {
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	float phiHat_deg_ = 0.0f;
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
	float thetaHat_deg_ = 0.0f;
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	613b      	str	r3, [r7, #16]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	phiHat_deg_ = atanf(filt->ay_mps2 / filt->az_mps2) * RAD2DEG;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fd fc13 	bl	8000eac <__aeabi_fdiv>
 8003686:	4603      	mov	r3, r0
 8003688:	4618      	mov	r0, r3
 800368a:	f005 fd5b 	bl	8009144 <atanf>
 800368e:	4603      	mov	r3, r0
 8003690:	4618      	mov	r0, r3
 8003692:	f7fc fec9 	bl	8000428 <__aeabi_f2d>
 8003696:	a36a      	add	r3, pc, #424	; (adr r3, 8003840 <Attitude_genEstimate+0x1e0>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fc ff1c 	bl	80004d8 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fd f9ee 	bl	8000a88 <__aeabi_d2f>
 80036ac:	4603      	mov	r3, r0
 80036ae:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2) * RAD2DEG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4964      	ldr	r1, [pc, #400]	; (8003848 <Attitude_genEstimate+0x1e8>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fbf8 	bl	8000eac <__aeabi_fdiv>
 80036bc:	4603      	mov	r3, r0
 80036be:	4618      	mov	r0, r3
 80036c0:	f005 ff0a 	bl	80094d8 <asinf>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc feae 	bl	8000428 <__aeabi_f2d>
 80036cc:	a35c      	add	r3, pc, #368	; (adr r3, 8003840 <Attitude_genEstimate+0x1e0>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f7fc ff01 	bl	80004d8 <__aeabi_dmul>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd f9d3 	bl	8000a88 <__aeabi_d2f>
 80036e2:	4603      	mov	r3, r0
 80036e4:	613b      	str	r3, [r7, #16]

//	phiHat_deg_ = atanf(filt->ay_mps2 / filt->az_mps2);
//	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2);

	myprintf("Accel phiHat_deg : %.2f\n", (double) phiHat_deg_);
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7fc fe9e 	bl	8000428 <__aeabi_f2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4856      	ldr	r0, [pc, #344]	; (800384c <Attitude_genEstimate+0x1ec>)
 80036f2:	f7ff ff15 	bl	8003520 <myprintf>
	myprintf("Accel thetahat_deg : %.2f\n", (double) thetaHat_deg_);
 80036f6:	6938      	ldr	r0, [r7, #16]
 80036f8:	f7fc fe96 	bl	8000428 <__aeabi_f2d>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4853      	ldr	r0, [pc, #332]	; (8003850 <Attitude_genEstimate+0x1f0>)
 8003702:	f7ff ff0d 	bl	8003520 <myprintf>

	att->accel_phiHat = phiHat_deg_;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	601a      	str	r2, [r3, #0]
	att->accel_thetaHat = thetaHat_deg_;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	605a      	str	r2, [r3, #4]

	phiHat_deg_ = 0.0f;
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = 0.0f;
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	613b      	str	r3, [r7, #16]

	//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope reading
	float phiDot_rps = filt->p_rps
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_deg_)
 8003722:	6938      	ldr	r0, [r7, #16]
 8003724:	f005 fe88 	bl	8009438 <tanf>
 8003728:	4605      	mov	r5, r0
					* (sinf(phiHat_deg_) * filt->q_rps
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f005 fe4e 	bl	80093cc <sinf>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fd fb03 	bl	8000d44 <__aeabi_fmul>
 800373e:	4603      	mov	r3, r0
 8003740:	461e      	mov	r6, r3
							+ cosf(phiHat_deg_) * filt->r_rps);
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f005 fe0a 	bl	800935c <cosf>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fd faf7 	bl	8000d44 <__aeabi_fmul>
 8003756:	4603      	mov	r3, r0
 8003758:	4619      	mov	r1, r3
 800375a:	4630      	mov	r0, r6
 800375c:	f7fd f9ea 	bl	8000b34 <__addsf3>
 8003760:	4603      	mov	r3, r0
					* (sinf(phiHat_deg_) * filt->q_rps
 8003762:	4619      	mov	r1, r3
 8003764:	4628      	mov	r0, r5
 8003766:	f7fd faed 	bl	8000d44 <__aeabi_fmul>
 800376a:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 800376c:	4619      	mov	r1, r3
 800376e:	4620      	mov	r0, r4
 8003770:	f7fd f9e0 	bl	8000b34 <__addsf3>
 8003774:	4603      	mov	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_deg_) * filt->q_rps
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f005 fdef 	bl	800935c <cosf>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7fd fadc 	bl	8000d44 <__aeabi_fmul>
 800378c:	4603      	mov	r3, r0
 800378e:	461c      	mov	r4, r3
			- sinf(phiHat_deg_) * filt->r_rps;
 8003790:	6978      	ldr	r0, [r7, #20]
 8003792:	f005 fe1b 	bl	80093cc <sinf>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7fd fad0 	bl	8000d44 <__aeabi_fmul>
 80037a4:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_deg_) * filt->q_rps
 80037a6:	4619      	mov	r1, r3
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7fd f9c1 	bl	8000b30 <__aeabi_fsub>
 80037ae:	4603      	mov	r3, r0
 80037b0:	60bb      	str	r3, [r7, #8]

	//Integrate Euler rates to get estimate of roll and pitch angles
	phiHat_deg_ = (phiHat_deg_ + (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps)
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	6978      	ldr	r0, [r7, #20]
 80037b6:	f7fd f9bd 	bl	8000b34 <__addsf3>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fc fe33 	bl	8000428 <__aeabi_f2d>
			* RAD2DEG;
 80037c2:	a31f      	add	r3, pc, #124	; (adr r3, 8003840 <Attitude_genEstimate+0x1e0>)
 80037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c8:	f7fc fe86 	bl	80004d8 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
	phiHat_deg_ = (phiHat_deg_ + (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps)
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f7fd f958 	bl	8000a88 <__aeabi_d2f>
 80037d8:	4603      	mov	r3, r0
 80037da:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = (thetaHat_deg_
	+ (SAMPLE_TIME_MS_USB_ / 1000.0F) * thetaDot_rps) * RAD2DEG;
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6938      	ldr	r0, [r7, #16]
 80037e0:	f7fd f9a8 	bl	8000b34 <__addsf3>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe1e 	bl	8000428 <__aeabi_f2d>
 80037ec:	a314      	add	r3, pc, #80	; (adr r3, 8003840 <Attitude_genEstimate+0x1e0>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc fe71 	bl	80004d8 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
	thetaHat_deg_ = (thetaHat_deg_
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f7fd f943 	bl	8000a88 <__aeabi_d2f>
 8003802:	4603      	mov	r3, r0
 8003804:	613b      	str	r3, [r7, #16]


	myprintf("Gyro phiHat_deg: %.2f\n", (double) phiHat_deg_);
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7fc fe0e 	bl	8000428 <__aeabi_f2d>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4810      	ldr	r0, [pc, #64]	; (8003854 <Attitude_genEstimate+0x1f4>)
 8003812:	f7ff fe85 	bl	8003520 <myprintf>
	myprintf("Gyro thetaHat_deg: %.2f\n", (double) thetaHat_deg_);
 8003816:	6938      	ldr	r0, [r7, #16]
 8003818:	f7fc fe06 	bl	8000428 <__aeabi_f2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <Attitude_genEstimate+0x1f8>)
 8003822:	f7ff fe7d 	bl	8003520 <myprintf>
	att->gyro_phiHat = phiHat_deg_;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	609a      	str	r2, [r3, #8]
	att->gyro_thetaHat = thetaHat_deg_;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	60da      	str	r2, [r3, #12]
	return;
 8003832:	bf00      	nop
}
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800383a:	bf00      	nop
 800383c:	f3af 8000 	nop.w
 8003840:	1a63cbb0 	.word	0x1a63cbb0
 8003844:	404ca5dc 	.word	0x404ca5dc
 8003848:	411cf5c3 	.word	0x411cf5c3
 800384c:	0800bdd0 	.word	0x0800bdd0
 8003850:	0800bdec 	.word	0x0800bdec
 8003854:	0800be08 	.word	0x0800be08
 8003858:	0800be20 	.word	0x0800be20
 800385c:	00000000 	.word	0x00000000

08003860 <Attitude_compleEstimate>:

void Attitude_compleEstimate(imu_filter *filt, sat_att_combined *att) {
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

	float thetaHat_rad_comb = 0.0f;
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
	float phiHat_rad_comb = 0.0f;
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	float phiHat_acc_rad = atanf(filt->ay_mps2 / filt->az_mps2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7fd fb13 	bl	8000eac <__aeabi_fdiv>
 8003886:	4603      	mov	r3, r0
 8003888:	4618      	mov	r0, r3
 800388a:	f005 fc5b 	bl	8009144 <atanf>
 800388e:	6178      	str	r0, [r7, #20]
	float thetaHat_acc_rad = asinf(filt->ax_mps2 / G_MPS2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	496e      	ldr	r1, [pc, #440]	; (8003a50 <Attitude_compleEstimate+0x1f0>)
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fb08 	bl	8000eac <__aeabi_fdiv>
 800389c:	4603      	mov	r3, r0
 800389e:	4618      	mov	r0, r3
 80038a0:	f005 fe1a 	bl	80094d8 <asinf>
 80038a4:	6138      	str	r0, [r7, #16]

	myprintf("accel phiHat_rad : %.2f\n", (double) phiHat_acc_rad);
 80038a6:	6978      	ldr	r0, [r7, #20]
 80038a8:	f7fc fdbe 	bl	8000428 <__aeabi_f2d>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4868      	ldr	r0, [pc, #416]	; (8003a54 <Attitude_compleEstimate+0x1f4>)
 80038b2:	f7ff fe35 	bl	8003520 <myprintf>
	myprintf("accel thetaHat_rad : %.2f\n", (double) thetaHat_acc_rad);
 80038b6:	6938      	ldr	r0, [r7, #16]
 80038b8:	f7fc fdb6 	bl	8000428 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4865      	ldr	r0, [pc, #404]	; (8003a58 <Attitude_compleEstimate+0x1f8>)
 80038c2:	f7ff fe2d 	bl	8003520 <myprintf>

	//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope readings
	float phiDot_rps = filt->p_rps
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_rad_comb)
 80038ca:	69f8      	ldr	r0, [r7, #28]
 80038cc:	f005 fdb4 	bl	8009438 <tanf>
 80038d0:	4605      	mov	r5, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 80038d2:	69b8      	ldr	r0, [r7, #24]
 80038d4:	f005 fd7a 	bl	80093cc <sinf>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f7fd fa2f 	bl	8000d44 <__aeabi_fmul>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461e      	mov	r6, r3
							+ cosf(phiHat_rad_comb) * filt->r_rps);
 80038ea:	69b8      	ldr	r0, [r7, #24]
 80038ec:	f005 fd36 	bl	800935c <cosf>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f7fd fa23 	bl	8000d44 <__aeabi_fmul>
 80038fe:	4603      	mov	r3, r0
 8003900:	4619      	mov	r1, r3
 8003902:	4630      	mov	r0, r6
 8003904:	f7fd f916 	bl	8000b34 <__addsf3>
 8003908:	4603      	mov	r3, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 800390a:	4619      	mov	r1, r3
 800390c:	4628      	mov	r0, r5
 800390e:	f7fd fa19 	bl	8000d44 <__aeabi_fmul>
 8003912:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 8003914:	4619      	mov	r1, r3
 8003916:	4620      	mov	r0, r4
 8003918:	f7fd f90c 	bl	8000b34 <__addsf3>
 800391c:	4603      	mov	r3, r0
 800391e:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 8003920:	69b8      	ldr	r0, [r7, #24]
 8003922:	f005 fd1b 	bl	800935c <cosf>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7fd fa08 	bl	8000d44 <__aeabi_fmul>
 8003934:	4603      	mov	r3, r0
 8003936:	461c      	mov	r4, r3
			- sinf(phiHat_rad_comb) * filt->r_rps;
 8003938:	69b8      	ldr	r0, [r7, #24]
 800393a:	f005 fd47 	bl	80093cc <sinf>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7fd f9fc 	bl	8000d44 <__aeabi_fmul>
 800394c:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 800394e:	4619      	mov	r1, r3
 8003950:	4620      	mov	r0, r4
 8003952:	f7fd f8ed 	bl	8000b30 <__aeabi_fsub>
 8003956:	4603      	mov	r3, r0
 8003958:	60bb      	str	r3, [r7, #8]

	myprintf("Gryo phidot_rps : %.2f\n", (double) phiDot_rps);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7fc fd64 	bl	8000428 <__aeabi_f2d>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	483d      	ldr	r0, [pc, #244]	; (8003a5c <Attitude_compleEstimate+0x1fc>)
 8003966:	f7ff fddb 	bl	8003520 <myprintf>
	myprintf("Gyro thetadot_rps : %.2f\n", (double) thetaDot_rps);
 800396a:	68b8      	ldr	r0, [r7, #8]
 800396c:	f7fc fd5c 	bl	8000428 <__aeabi_f2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	483a      	ldr	r0, [pc, #232]	; (8003a60 <Attitude_compleEstimate+0x200>)
 8003976:	f7ff fdd3 	bl	8003520 <myprintf>

	//Combining Accel and Gyro data for complementary filter
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 800397a:	493a      	ldr	r1, [pc, #232]	; (8003a64 <Attitude_compleEstimate+0x204>)
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f7fd f9e1 	bl	8000d44 <__aeabi_fmul>
 8003982:	4603      	mov	r3, r0
 8003984:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (phiHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps));
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	69b8      	ldr	r0, [r7, #24]
 800398a:	f7fd f8d3 	bl	8000b34 <__addsf3>
 800398e:	4603      	mov	r3, r0
					* (phiHat_rad_comb
 8003990:	4935      	ldr	r1, [pc, #212]	; (8003a68 <Attitude_compleEstimate+0x208>)
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd f9d6 	bl	8000d44 <__aeabi_fmul>
 8003998:	4603      	mov	r3, r0
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 800399a:	4619      	mov	r1, r3
 800399c:	4620      	mov	r0, r4
 800399e:	f7fd f8c9 	bl	8000b34 <__addsf3>
 80039a2:	4603      	mov	r3, r0
 80039a4:	61bb      	str	r3, [r7, #24]
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 80039a6:	492f      	ldr	r1, [pc, #188]	; (8003a64 <Attitude_compleEstimate+0x204>)
 80039a8:	6938      	ldr	r0, [r7, #16]
 80039aa:	f7fd f9cb 	bl	8000d44 <__aeabi_fmul>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (thetaHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * thetaDot_rps));
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	69f8      	ldr	r0, [r7, #28]
 80039b6:	f7fd f8bd 	bl	8000b34 <__addsf3>
 80039ba:	4603      	mov	r3, r0
					* (thetaHat_rad_comb
 80039bc:	492a      	ldr	r1, [pc, #168]	; (8003a68 <Attitude_compleEstimate+0x208>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd f9c0 	bl	8000d44 <__aeabi_fmul>
 80039c4:	4603      	mov	r3, r0
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 80039c6:	4619      	mov	r1, r3
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7fd f8b3 	bl	8000b34 <__addsf3>
 80039ce:	4603      	mov	r3, r0
 80039d0:	61fb      	str	r3, [r7, #28]
	att->pitch = RAD2DEG * thetaHat_rad_comb;
 80039d2:	69f8      	ldr	r0, [r7, #28]
 80039d4:	f7fc fd28 	bl	8000428 <__aeabi_f2d>
 80039d8:	a31b      	add	r3, pc, #108	; (adr r3, 8003a48 <Attitude_compleEstimate+0x1e8>)
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f7fc fd7b 	bl	80004d8 <__aeabi_dmul>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	f7fd f84d 	bl	8000a88 <__aeabi_d2f>
 80039ee:	4602      	mov	r2, r0
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	605a      	str	r2, [r3, #4]
	att->roll = RAD2DEG * phiHat_rad_comb;
 80039f4:	69b8      	ldr	r0, [r7, #24]
 80039f6:	f7fc fd17 	bl	8000428 <__aeabi_f2d>
 80039fa:	a313      	add	r3, pc, #76	; (adr r3, 8003a48 <Attitude_compleEstimate+0x1e8>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fd6a 	bl	80004d8 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f7fd f83c 	bl	8000a88 <__aeabi_d2f>
 8003a10:	4602      	mov	r2, r0
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	601a      	str	r2, [r3, #0]
	myprintf("Complementary filter roll: %.2f deg\n", (double) att->roll);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fd04 	bl	8000428 <__aeabi_f2d>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4811      	ldr	r0, [pc, #68]	; (8003a6c <Attitude_compleEstimate+0x20c>)
 8003a26:	f7ff fd7b 	bl	8003520 <myprintf>
	myprintf("Complementary filter pitch: %.2f deg\n", (double) att->pitch);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fc fcfa 	bl	8000428 <__aeabi_f2d>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <Attitude_compleEstimate+0x210>)
 8003a3a:	f7ff fd71 	bl	8003520 <myprintf>

}
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	1a63cbb0 	.word	0x1a63cbb0
 8003a4c:	404ca5dc 	.word	0x404ca5dc
 8003a50:	411cf5c3 	.word	0x411cf5c3
 8003a54:	0800be3c 	.word	0x0800be3c
 8003a58:	0800be58 	.word	0x0800be58
 8003a5c:	0800be74 	.word	0x0800be74
 8003a60:	0800be8c 	.word	0x0800be8c
 8003a64:	3d4ccccd 	.word	0x3d4ccccd
 8003a68:	3f733333 	.word	0x3f733333
 8003a6c:	0800bea8 	.word	0x0800bea8
 8003a70:	0800bed0 	.word	0x0800bed0
 8003a74:	00000000 	.word	0x00000000

08003a78 <Attitude_ekfEstimate>:

void Attitude_ekfEstimate(imu_filter *filt, sat_att_combined *att) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b0a0      	sub	sp, #128	; 0x80
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]

	float KALMAN_P_INIT = 0.1f;
 8003a82:	4b4d      	ldr	r3, [pc, #308]	; (8003bb8 <Attitude_ekfEstimate+0x140>)
 8003a84:	677b      	str	r3, [r7, #116]	; 0x74
	float KALMAN_Q = 0.001f;
 8003a86:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <Attitude_ekfEstimate+0x144>)
 8003a88:	673b      	str	r3, [r7, #112]	; 0x70
	float KALMAN_R = 0.011f;
 8003a8a:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <Attitude_ekfEstimate+0x148>)
 8003a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
	float KalmanQ[2] = { KALMAN_Q, KALMAN_Q };
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
	float KalmanR[3] = { KALMAN_R, KALMAN_R, KALMAN_R };
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
	float Kalman_P_Init[2] = { KALMAN_P_INIT, KALMAN_P_INIT };
 8003aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
	Eekf ekf_1;

	//Filtered accelerometer measurement
	float ax_mps2 = 0.0f;
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	66bb      	str	r3, [r7, #104]	; 0x68
	float ay_mps2 = 0.0f;
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	667b      	str	r3, [r7, #100]	; 0x64
	float az_mps2 = 0.0f;
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	663b      	str	r3, [r7, #96]	; 0x60
	//Filtered accelerometer measurement
	float p_rps = 0.0f;
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
	float q_rps = 0.0f;
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	65bb      	str	r3, [r7, #88]	; 0x58
	float r_rps = 0.0f;
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	657b      	str	r3, [r7, #84]	; 0x54

	//Remapping axis data of Accel and Gyro
	ax_mps2 = -(filt->ay_mps2);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ad6:	66bb      	str	r3, [r7, #104]	; 0x68
	ay_mps2 = filt->ax_mps2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	667b      	str	r3, [r7, #100]	; 0x64
	az_mps2 = -(filt->az_mps2);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ae6:	663b      	str	r3, [r7, #96]	; 0x60
	p_rps = -(filt->q_rps);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	65fb      	str	r3, [r7, #92]	; 0x5c
	q_rps = filt->p_rps;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	65bb      	str	r3, [r7, #88]	; 0x58
	r_rps = -(filt->r_rps);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b00:	657b      	str	r3, [r7, #84]	; 0x54

	//Initialize kalman filter
	EKF_Init(&ekf_1, Kalman_P_Init, KalmanQ, KalmanR);
 8003b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b06:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003b0a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003b0e:	f107 000c 	add.w	r0, r7, #12
 8003b12:	f7fd fb19 	bl	8001148 <EKF_Init>
	//Prediction step using filtered gyro data
	EKF_Predict(&ekf_1, p_rps, q_rps, r_rps, 0.001f * KALMAN_PREDICT_PERIOD_MS);
 8003b16:	f107 000c 	add.w	r0, r7, #12
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <Attitude_ekfEstimate+0x14c>)
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b22:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003b24:	f7fd fb48 	bl	80011b8 <EKF_Predict>

	//Update step using Accel data
	EKF_Update(&ekf_1, ax_mps2, ay_mps2, az_mps2);
 8003b28:	f107 000c 	add.w	r0, r7, #12
 8003b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b32:	f7fd fcf2 	bl	800151a <EKF_Update>
	att->pitch = RAD2DEG * ekf_1.theta_r;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fc75 	bl	8000428 <__aeabi_f2d>
 8003b3e:	a31c      	add	r3, pc, #112	; (adr r3, 8003bb0 <Attitude_ekfEstimate+0x138>)
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f7fc fcc8 	bl	80004d8 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fc ff9a 	bl	8000a88 <__aeabi_d2f>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	605a      	str	r2, [r3, #4]
	att->roll = RAD2DEG * ekf_1.phi_r;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fc63 	bl	8000428 <__aeabi_f2d>
 8003b62:	a313      	add	r3, pc, #76	; (adr r3, 8003bb0 <Attitude_ekfEstimate+0x138>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f7fc fcb6 	bl	80004d8 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fc ff88 	bl	8000a88 <__aeabi_d2f>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	601a      	str	r2, [r3, #0]


	myprintf("EKF Update : pitch : %.2f deg\n", (double) att->pitch);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fc50 	bl	8000428 <__aeabi_f2d>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <Attitude_ekfEstimate+0x150>)
 8003b8e:	f7ff fcc7 	bl	8003520 <myprintf>
	myprintf("EKF Update : roll : %.2f deg\n", (double) att->roll);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc fc46 	bl	8000428 <__aeabi_f2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	480a      	ldr	r0, [pc, #40]	; (8003bcc <Attitude_ekfEstimate+0x154>)
 8003ba2:	f7ff fcbd 	bl	8003520 <myprintf>
}
 8003ba6:	bf00      	nop
 8003ba8:	3778      	adds	r7, #120	; 0x78
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	1a63cbb0 	.word	0x1a63cbb0
 8003bb4:	404ca5dc 	.word	0x404ca5dc
 8003bb8:	3dcccccd 	.word	0x3dcccccd
 8003bbc:	3a83126f 	.word	0x3a83126f
 8003bc0:	3c343958 	.word	0x3c343958
 8003bc4:	3c23d70b 	.word	0x3c23d70b
 8003bc8:	0800bef8 	.word	0x0800bef8
 8003bcc:	0800bf18 	.word	0x0800bf18

08003bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bd4:	f000 fb16 	bl	8004204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bd8:	f000 f81a 	bl	8003c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bdc:	f000 f8be 	bl	8003d5c <MX_GPIO_Init>
  MX_SPI1_Init();
 8003be0:	f000 f85c 	bl	8003c9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003be4:	f000 f890 	bl	8003d08 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		whoAmI();
 8003be8:	f7fe fcb2 	bl	8002550 <whoAmI>
		IMU_Setup();
 8003bec:	f7ff fbd8 	bl	80033a0 <IMU_Setup>
		HAL_Delay(1000);
 8003bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf4:	f000 fb68 	bl	80042c8 <HAL_Delay>
		MPU_calcAttitude(&MPU6500);
 8003bf8:	4803      	ldr	r0, [pc, #12]	; (8003c08 <main+0x38>)
 8003bfa:	f7fe ff0d 	bl	8002a18 <MPU_calcAttitude>
		MagRead(&lsm9ds1);
 8003bfe:	4803      	ldr	r0, [pc, #12]	; (8003c0c <main+0x3c>)
 8003c00:	f7ff f9c2 	bl	8002f88 <MagRead>
		whoAmI();
 8003c04:	e7f0      	b.n	8003be8 <main+0x18>
 8003c06:	bf00      	nop
 8003c08:	20000294 	.word	0x20000294
 8003c0c:	20000338 	.word	0x20000338

08003c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b090      	sub	sp, #64	; 0x40
 8003c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c16:	f107 0318 	add.w	r3, r7, #24
 8003c1a:	2228      	movs	r2, #40	; 0x28
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 fb2c 	bl	800627c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c40:	2301      	movs	r3, #1
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c44:	2302      	movs	r3, #2
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c54:	f107 0318 	add.w	r3, r7, #24
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fe7b 	bl	8004954 <HAL_RCC_OscConfig>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003c64:	f000 f8da 	bl	8003e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c68:	230f      	movs	r3, #15
 8003c6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f8e6 	bl	8004e54 <HAL_RCC_ClockConfig>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003c8e:	f000 f8c5 	bl	8003e1c <Error_Handler>
  }
}
 8003c92:	bf00      	nop
 8003c94:	3740      	adds	r7, #64	; 0x40
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003ce8:	220a      	movs	r2, #10
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cec:	4804      	ldr	r0, [pc, #16]	; (8003d00 <MX_SPI1_Init+0x64>)
 8003cee:	f001 fa3f 	bl	8005170 <HAL_SPI_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cf8:	f000 f890 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000340 	.word	0x20000340
 8003d04:	40013000 	.word	0x40013000

08003d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <MX_USART1_UART_Init+0x50>)
 8003d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d2e:	220c      	movs	r2, #12
 8003d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d3e:	4805      	ldr	r0, [pc, #20]	; (8003d54 <MX_USART1_UART_Init+0x4c>)
 8003d40:	f002 f8a2 	bl	8005e88 <HAL_UART_Init>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d4a:	f000 f867 	bl	8003e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200002f0 	.word	0x200002f0
 8003d58:	40013800 	.word	0x40013800

08003d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d62:	f107 0310 	add.w	r3, r7, #16
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003d76:	f043 0320 	orr.w	r3, r3, #32
 8003d7a:	6193      	str	r3, [r2, #24]
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	6193      	str	r3, [r2, #24]
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003da6:	f043 0308 	orr.w	r3, r3, #8
 8003daa:	6193      	str	r3, [r2, #24]
 8003dac:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <MX_GPIO_Init+0xb4>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2110      	movs	r1, #16
 8003dbc:	4815      	ldr	r0, [pc, #84]	; (8003e14 <MX_GPIO_Init+0xb8>)
 8003dbe:	f000 fdb1 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dc8:	4813      	ldr	r0, [pc, #76]	; (8003e18 <MX_GPIO_Init+0xbc>)
 8003dca:	f000 fdab 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_MAG_Pin */
  GPIO_InitStruct.Pin = CS_MAG_Pin;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4619      	mov	r1, r3
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <MX_GPIO_Init+0xb8>)
 8003de6:	f000 fc19 	bl	800461c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MPU_Pin */
  GPIO_InitStruct.Pin = CS_MPU_Pin;
 8003dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	4619      	mov	r1, r3
 8003e02:	4805      	ldr	r0, [pc, #20]	; (8003e18 <MX_GPIO_Init+0xbc>)
 8003e04:	f000 fc0a 	bl	800461c <HAL_GPIO_Init>

}
 8003e08:	bf00      	nop
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40010800 	.word	0x40010800
 8003e18:	40010c00 	.word	0x40010c00

08003e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e20:	b672      	cpsid	i
}
 8003e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e24:	e7fe      	b.n	8003e24 <Error_Handler+0x8>
	...

08003e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_MspInit+0x5c>)
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_MspInit+0x5c>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6193      	str	r3, [r2, #24]
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_MspInit+0x5c>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <HAL_MspInit+0x5c>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <HAL_MspInit+0x5c>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e50:	61d3      	str	r3, [r2, #28]
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_MspInit+0x5c>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_MspInit+0x60>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <HAL_MspInit+0x60>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40010000 	.word	0x40010000

08003e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_SPI_MspInit+0x98>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d137      	bne.n	8003f1c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <HAL_SPI_MspInit+0x9c>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <HAL_SPI_MspInit+0x9c>)
 8003eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eb6:	6193      	str	r3, [r2, #24]
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_SPI_MspInit+0x9c>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_SPI_MspInit+0x9c>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_SPI_MspInit+0x9c>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <HAL_SPI_MspInit+0x9c>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SEN_SCK_Pin|SEN_MOSI_Pin;
 8003edc:	23a0      	movs	r3, #160	; 0xa0
 8003ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee8:	f107 0310 	add.w	r3, r7, #16
 8003eec:	4619      	mov	r1, r3
 8003eee:	480f      	ldr	r0, [pc, #60]	; (8003f2c <HAL_SPI_MspInit+0xa0>)
 8003ef0:	f000 fb94 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEN_MISO_Pin;
 8003ef4:	2340      	movs	r3, #64	; 0x40
 8003ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SEN_MISO_GPIO_Port, &GPIO_InitStruct);
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	4619      	mov	r1, r3
 8003f06:	4809      	ldr	r0, [pc, #36]	; (8003f2c <HAL_SPI_MspInit+0xa0>)
 8003f08:	f000 fb88 	bl	800461c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2023      	movs	r0, #35	; 0x23
 8003f12:	f000 fad4 	bl	80044be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003f16:	2023      	movs	r0, #35	; 0x23
 8003f18:	f000 faed 	bl	80044f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f1c:	bf00      	nop
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40013000 	.word	0x40013000
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40010800 	.word	0x40010800

08003f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_UART_MspInit+0x8c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d131      	bne.n	8003fb4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5a:	6193      	str	r3, [r2, #24]
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_UART_MspInit+0x90>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	f107 0310 	add.w	r3, r7, #16
 8003f92:	4619      	mov	r1, r3
 8003f94:	480b      	ldr	r0, [pc, #44]	; (8003fc4 <HAL_UART_MspInit+0x94>)
 8003f96:	f000 fb41 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	4619      	mov	r1, r3
 8003fae:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <HAL_UART_MspInit+0x94>)
 8003fb0:	f000 fb34 	bl	800461c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fb4:	bf00      	nop
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40010800 	.word	0x40010800

08003fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fcc:	e7fe      	b.n	8003fcc <NMI_Handler+0x4>

08003fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fd2:	e7fe      	b.n	8003fd2 <HardFault_Handler+0x4>

08003fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fd8:	e7fe      	b.n	8003fd8 <MemManage_Handler+0x4>

08003fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fde:	e7fe      	b.n	8003fde <BusFault_Handler+0x4>

08003fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fe4:	e7fe      	b.n	8003fe4 <UsageFault_Handler+0x4>

08003fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800400e:	f000 f93f 	bl	8004290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <SPI1_IRQHandler+0x10>)
 800401e:	f001 fd37 	bl	8005a90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000340 	.word	0x20000340

0800402c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
	return 1;
 8004030:	2301      	movs	r3, #1
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <_kill>:

int _kill(int pid, int sig)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004044:	f002 f8f0 	bl	8006228 <__errno>
 8004048:	4603      	mov	r3, r0
 800404a:	2216      	movs	r2, #22
 800404c:	601a      	str	r2, [r3, #0]
	return -1;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <_exit>:

void _exit (int status)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004062:	f04f 31ff 	mov.w	r1, #4294967295
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ffe7 	bl	800403a <_kill>
	while (1) {}		/* Make sure we hang here */
 800406c:	e7fe      	b.n	800406c <_exit+0x12>

0800406e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e00a      	b.n	8004096 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004080:	f3af 8000 	nop.w
 8004084:	4601      	mov	r1, r0
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	60ba      	str	r2, [r7, #8]
 800408c:	b2ca      	uxtb	r2, r1
 800408e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	dbf0      	blt.n	8004080 <_read+0x12>
	}

return len;
 800409e:	687b      	ldr	r3, [r7, #4]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e009      	b.n	80040ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	60ba      	str	r2, [r7, #8]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	dbf1      	blt.n	80040ba <_write+0x12>
	}
	return len;
 80040d6:	687b      	ldr	r3, [r7, #4]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_close>:

int _close(int file)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	return -1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004106:	605a      	str	r2, [r3, #4]
	return 0;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <_isatty>:

int _isatty(int file)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	return 1;
 800411c:	2301      	movs	r3, #1
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	return 0;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <_sbrk+0x5c>)
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <_sbrk+0x60>)
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <_sbrk+0x64>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <_sbrk+0x64>)
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <_sbrk+0x68>)
 8004160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <_sbrk+0x64>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d207      	bcs.n	8004180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004170:	f002 f85a 	bl	8006228 <__errno>
 8004174:	4603      	mov	r3, r0
 8004176:	220c      	movs	r2, #12
 8004178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	e009      	b.n	8004194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <_sbrk+0x64>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <_sbrk+0x64>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	4a05      	ldr	r2, [pc, #20]	; (80041a4 <_sbrk+0x64>)
 8004190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20005000 	.word	0x20005000
 80041a0:	00000400 	.word	0x00000400
 80041a4:	20000270 	.word	0x20000270
 80041a8:	200004b0 	.word	0x200004b0

080041ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041b8:	f7ff fff8 	bl	80041ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80041be:	490c      	ldr	r1, [pc, #48]	; (80041f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80041c0:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80041c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c4:	e002      	b.n	80041cc <LoopCopyDataInit>

080041c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ca:	3304      	adds	r3, #4

080041cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d0:	d3f9      	bcc.n	80041c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80041d4:	4c09      	ldr	r4, [pc, #36]	; (80041fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d8:	e001      	b.n	80041de <LoopFillZerobss>

080041da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041dc:	3204      	adds	r2, #4

080041de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e0:	d3fb      	bcc.n	80041da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041e2:	f002 f827 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041e6:	f7ff fcf3 	bl	8003bd0 <main>
  bx lr
 80041ea:	4770      	bx	lr
  ldr r0, =_sdata
 80041ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80041f4:	0800c988 	.word	0x0800c988
  ldr r2, =_sbss
 80041f8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80041fc:	200004ac 	.word	0x200004ac

08004200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004200:	e7fe      	b.n	8004200 <ADC1_2_IRQHandler>
	...

08004204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_Init+0x28>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a07      	ldr	r2, [pc, #28]	; (800422c <HAL_Init+0x28>)
 800420e:	f043 0310 	orr.w	r3, r3, #16
 8004212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004214:	2003      	movs	r0, #3
 8004216:	f000 f947 	bl	80044a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800421a:	200f      	movs	r0, #15
 800421c:	f000 f808 	bl	8004230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004220:	f7ff fe02 	bl	8003e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40022000 	.word	0x40022000

08004230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_InitTick+0x54>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_InitTick+0x58>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004246:	fbb3 f3f1 	udiv	r3, r3, r1
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f95f 	bl	8004512 <HAL_SYSTICK_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e00e      	b.n	800427c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d80a      	bhi.n	800427a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004264:	2200      	movs	r2, #0
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	f000 f927 	bl	80044be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004270:	4a06      	ldr	r2, [pc, #24]	; (800428c <HAL_InitTick+0x5c>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000000 	.word	0x20000000
 8004288:	20000008 	.word	0x20000008
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_IncTick+0x1c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <HAL_IncTick+0x20>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	4a03      	ldr	r2, [pc, #12]	; (80042b0 <HAL_IncTick+0x20>)
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20000008 	.word	0x20000008
 80042b0:	20000498 	.word	0x20000498

080042b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return uwTick;
 80042b8:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <HAL_GetTick+0x10>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	20000498 	.word	0x20000498

080042c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d005      	beq.n	80042ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_Delay+0x44>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ee:	bf00      	nop
 80042f0:	f7ff ffe0 	bl	80042b4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d8f7      	bhi.n	80042f0 <HAL_Delay+0x28>
  {
  }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000008 	.word	0x20000008

08004310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <__NVIC_SetPriorityGrouping+0x44>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800432c:	4013      	ands	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800433c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004342:	4a04      	ldr	r2, [pc, #16]	; (8004354 <__NVIC_SetPriorityGrouping+0x44>)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	60d3      	str	r3, [r2, #12]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <__NVIC_GetPriorityGrouping+0x18>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f003 0307 	and.w	r3, r3, #7
}
 8004366:	4618      	mov	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	2b00      	cmp	r3, #0
 8004384:	db0b      	blt.n	800439e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	f003 021f 	and.w	r2, r3, #31
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <__NVIC_EnableIRQ+0x34>)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2001      	movs	r0, #1
 8004396:	fa00 f202 	lsl.w	r2, r0, r2
 800439a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	e000e100 	.word	0xe000e100

080043ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db0a      	blt.n	80043d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	490c      	ldr	r1, [pc, #48]	; (80043f8 <__NVIC_SetPriority+0x4c>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	440b      	add	r3, r1
 80043d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043d4:	e00a      	b.n	80043ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4908      	ldr	r1, [pc, #32]	; (80043fc <__NVIC_SetPriority+0x50>)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3b04      	subs	r3, #4
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	761a      	strb	r2, [r3, #24]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e100 	.word	0xe000e100
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f1c3 0307 	rsb	r3, r3, #7
 800441a:	2b04      	cmp	r3, #4
 800441c:	bf28      	it	cs
 800441e:	2304      	movcs	r3, #4
 8004420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3304      	adds	r3, #4
 8004426:	2b06      	cmp	r3, #6
 8004428:	d902      	bls.n	8004430 <NVIC_EncodePriority+0x30>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3b03      	subs	r3, #3
 800442e:	e000      	b.n	8004432 <NVIC_EncodePriority+0x32>
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	401a      	ands	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	43d9      	mvns	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	4313      	orrs	r3, r2
         );
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004474:	d301      	bcc.n	800447a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004476:	2301      	movs	r3, #1
 8004478:	e00f      	b.n	800449a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800447a:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <SysTick_Config+0x40>)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004482:	210f      	movs	r1, #15
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	f7ff ff90 	bl	80043ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <SysTick_Config+0x40>)
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <SysTick_Config+0x40>)
 8004494:	2207      	movs	r2, #7
 8004496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	e000e010 	.word	0xe000e010

080044a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff ff2d 	bl	8004310 <__NVIC_SetPriorityGrouping>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044d0:	f7ff ff42 	bl	8004358 <__NVIC_GetPriorityGrouping>
 80044d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	f7ff ff90 	bl	8004400 <NVIC_EncodePriority>
 80044e0:	4602      	mov	r2, r0
 80044e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff5f 	bl	80043ac <__NVIC_SetPriority>
}
 80044ee:	bf00      	nop
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	4603      	mov	r3, r0
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff35 	bl	8004374 <__NVIC_EnableIRQ>
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7ff ffa2 	bl	8004464 <SysTick_Config>
 8004520:	4603      	mov	r3, r0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d005      	beq.n	8004550 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e051      	b.n	80045f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 020e 	bic.w	r2, r2, #14
 800455e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a22      	ldr	r2, [pc, #136]	; (8004600 <HAL_DMA_Abort_IT+0xd4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d029      	beq.n	80045ce <HAL_DMA_Abort_IT+0xa2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a21      	ldr	r2, [pc, #132]	; (8004604 <HAL_DMA_Abort_IT+0xd8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_DMA_Abort_IT+0x9e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_DMA_Abort_IT+0xdc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01a      	beq.n	80045c4 <HAL_DMA_Abort_IT+0x98>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_DMA_Abort_IT+0xe0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d012      	beq.n	80045be <HAL_DMA_Abort_IT+0x92>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_DMA_Abort_IT+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00a      	beq.n	80045b8 <HAL_DMA_Abort_IT+0x8c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_DMA_Abort_IT+0xe8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d102      	bne.n	80045b2 <HAL_DMA_Abort_IT+0x86>
 80045ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045b0:	e00e      	b.n	80045d0 <HAL_DMA_Abort_IT+0xa4>
 80045b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b6:	e00b      	b.n	80045d0 <HAL_DMA_Abort_IT+0xa4>
 80045b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045bc:	e008      	b.n	80045d0 <HAL_DMA_Abort_IT+0xa4>
 80045be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c2:	e005      	b.n	80045d0 <HAL_DMA_Abort_IT+0xa4>
 80045c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c8:	e002      	b.n	80045d0 <HAL_DMA_Abort_IT+0xa4>
 80045ca:	2310      	movs	r3, #16
 80045cc:	e000      	b.n	80045d0 <HAL_DMA_Abort_IT+0xa4>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <HAL_DMA_Abort_IT+0xec>)
 80045d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
    } 
  }
  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40020008 	.word	0x40020008
 8004604:	4002001c 	.word	0x4002001c
 8004608:	40020030 	.word	0x40020030
 800460c:	40020044 	.word	0x40020044
 8004610:	40020058 	.word	0x40020058
 8004614:	4002006c 	.word	0x4002006c
 8004618:	40020000 	.word	0x40020000

0800461c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800461c:	b480      	push	{r7}
 800461e:	b08b      	sub	sp, #44	; 0x2c
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800462e:	e169      	b.n	8004904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004630:	2201      	movs	r2, #1
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	f040 8158 	bne.w	80048fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a9a      	ldr	r2, [pc, #616]	; (80048bc <HAL_GPIO_Init+0x2a0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d05e      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004658:	4a98      	ldr	r2, [pc, #608]	; (80048bc <HAL_GPIO_Init+0x2a0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d875      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 800465e:	4a98      	ldr	r2, [pc, #608]	; (80048c0 <HAL_GPIO_Init+0x2a4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d058      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004664:	4a96      	ldr	r2, [pc, #600]	; (80048c0 <HAL_GPIO_Init+0x2a4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d86f      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 800466a:	4a96      	ldr	r2, [pc, #600]	; (80048c4 <HAL_GPIO_Init+0x2a8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d052      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004670:	4a94      	ldr	r2, [pc, #592]	; (80048c4 <HAL_GPIO_Init+0x2a8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d869      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 8004676:	4a94      	ldr	r2, [pc, #592]	; (80048c8 <HAL_GPIO_Init+0x2ac>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d04c      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 800467c:	4a92      	ldr	r2, [pc, #584]	; (80048c8 <HAL_GPIO_Init+0x2ac>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d863      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 8004682:	4a92      	ldr	r2, [pc, #584]	; (80048cc <HAL_GPIO_Init+0x2b0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d046      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004688:	4a90      	ldr	r2, [pc, #576]	; (80048cc <HAL_GPIO_Init+0x2b0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d85d      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 800468e:	2b12      	cmp	r3, #18
 8004690:	d82a      	bhi.n	80046e8 <HAL_GPIO_Init+0xcc>
 8004692:	2b12      	cmp	r3, #18
 8004694:	d859      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <HAL_GPIO_Init+0x80>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	08004717 	.word	0x08004717
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	08004703 	.word	0x08004703
 80046a8:	08004745 	.word	0x08004745
 80046ac:	0800474b 	.word	0x0800474b
 80046b0:	0800474b 	.word	0x0800474b
 80046b4:	0800474b 	.word	0x0800474b
 80046b8:	0800474b 	.word	0x0800474b
 80046bc:	0800474b 	.word	0x0800474b
 80046c0:	0800474b 	.word	0x0800474b
 80046c4:	0800474b 	.word	0x0800474b
 80046c8:	0800474b 	.word	0x0800474b
 80046cc:	0800474b 	.word	0x0800474b
 80046d0:	0800474b 	.word	0x0800474b
 80046d4:	0800474b 	.word	0x0800474b
 80046d8:	0800474b 	.word	0x0800474b
 80046dc:	0800474b 	.word	0x0800474b
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	0800470d 	.word	0x0800470d
 80046e8:	4a79      	ldr	r2, [pc, #484]	; (80048d0 <HAL_GPIO_Init+0x2b4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046ee:	e02c      	b.n	800474a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	623b      	str	r3, [r7, #32]
          break;
 80046f6:	e029      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	623b      	str	r3, [r7, #32]
          break;
 8004700:	e024      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	3308      	adds	r3, #8
 8004708:	623b      	str	r3, [r7, #32]
          break;
 800470a:	e01f      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	330c      	adds	r3, #12
 8004712:	623b      	str	r3, [r7, #32]
          break;
 8004714:	e01a      	b.n	800474c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800471e:	2304      	movs	r3, #4
 8004720:	623b      	str	r3, [r7, #32]
          break;
 8004722:	e013      	b.n	800474c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800472c:	2308      	movs	r3, #8
 800472e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	611a      	str	r2, [r3, #16]
          break;
 8004736:	e009      	b.n	800474c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004738:	2308      	movs	r3, #8
 800473a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	615a      	str	r2, [r3, #20]
          break;
 8004742:	e003      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
          break;
 8004748:	e000      	b.n	800474c <HAL_GPIO_Init+0x130>
          break;
 800474a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2bff      	cmp	r3, #255	; 0xff
 8004750:	d801      	bhi.n	8004756 <HAL_GPIO_Init+0x13a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	e001      	b.n	800475a <HAL_GPIO_Init+0x13e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2bff      	cmp	r3, #255	; 0xff
 8004760:	d802      	bhi.n	8004768 <HAL_GPIO_Init+0x14c>
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	e002      	b.n	800476e <HAL_GPIO_Init+0x152>
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	3b08      	subs	r3, #8
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	210f      	movs	r1, #15
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	401a      	ands	r2, r3
 8004780:	6a39      	ldr	r1, [r7, #32]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	431a      	orrs	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80b1 	beq.w	80048fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800479c:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <HAL_GPIO_Init+0x2b8>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4a4c      	ldr	r2, [pc, #304]	; (80048d4 <HAL_GPIO_Init+0x2b8>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6193      	str	r3, [r2, #24]
 80047a8:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_GPIO_Init+0x2b8>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047b4:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <HAL_GPIO_Init+0x2bc>)
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	3302      	adds	r3, #2
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a40      	ldr	r2, [pc, #256]	; (80048dc <HAL_GPIO_Init+0x2c0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_GPIO_Init+0x1ec>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3f      	ldr	r2, [pc, #252]	; (80048e0 <HAL_GPIO_Init+0x2c4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00d      	beq.n	8004804 <HAL_GPIO_Init+0x1e8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <HAL_GPIO_Init+0x1e4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <HAL_GPIO_Init+0x2cc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_GPIO_Init+0x1e0>
 80047f8:	2303      	movs	r3, #3
 80047fa:	e006      	b.n	800480a <HAL_GPIO_Init+0x1ee>
 80047fc:	2304      	movs	r3, #4
 80047fe:	e004      	b.n	800480a <HAL_GPIO_Init+0x1ee>
 8004800:	2302      	movs	r3, #2
 8004802:	e002      	b.n	800480a <HAL_GPIO_Init+0x1ee>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_GPIO_Init+0x1ee>
 8004808:	2300      	movs	r3, #0
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	f002 0203 	and.w	r2, r2, #3
 8004810:	0092      	lsls	r2, r2, #2
 8004812:	4093      	lsls	r3, r2
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800481a:	492f      	ldr	r1, [pc, #188]	; (80048d8 <HAL_GPIO_Init+0x2bc>)
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	3302      	adds	r3, #2
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d006      	beq.n	8004842 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	492c      	ldr	r1, [pc, #176]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]
 8004840:	e006      	b.n	8004850 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	43db      	mvns	r3, r3
 800484a:	4928      	ldr	r1, [pc, #160]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 800484c:	4013      	ands	r3, r2
 800484e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800485c:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	4922      	ldr	r1, [pc, #136]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	60cb      	str	r3, [r1, #12]
 8004868:	e006      	b.n	8004878 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	43db      	mvns	r3, r3
 8004872:	491e      	ldr	r1, [pc, #120]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 8004874:	4013      	ands	r3, r2
 8004876:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4918      	ldr	r1, [pc, #96]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
 8004890:	e006      	b.n	80048a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	43db      	mvns	r3, r3
 800489a:	4914      	ldr	r1, [pc, #80]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 800489c:	4013      	ands	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d021      	beq.n	80048f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	490e      	ldr	r1, [pc, #56]	; (80048ec <HAL_GPIO_Init+0x2d0>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	e021      	b.n	80048fe <HAL_GPIO_Init+0x2e2>
 80048ba:	bf00      	nop
 80048bc:	10320000 	.word	0x10320000
 80048c0:	10310000 	.word	0x10310000
 80048c4:	10220000 	.word	0x10220000
 80048c8:	10210000 	.word	0x10210000
 80048cc:	10120000 	.word	0x10120000
 80048d0:	10110000 	.word	0x10110000
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40010800 	.word	0x40010800
 80048e0:	40010c00 	.word	0x40010c00
 80048e4:	40011000 	.word	0x40011000
 80048e8:	40011400 	.word	0x40011400
 80048ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_GPIO_Init+0x304>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	4909      	ldr	r1, [pc, #36]	; (8004920 <HAL_GPIO_Init+0x304>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	3301      	adds	r3, #1
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	f47f ae8e 	bne.w	8004630 <HAL_GPIO_Init+0x14>
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	372c      	adds	r7, #44	; 0x2c
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40010400 	.word	0x40010400

08004924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
 8004930:	4613      	mov	r3, r2
 8004932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004934:	787b      	ldrb	r3, [r7, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004940:	e003      	b.n	800494a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004942:	887b      	ldrh	r3, [r7, #2]
 8004944:	041a      	lsls	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e26c      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8087 	beq.w	8004a82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004974:	4b92      	ldr	r3, [pc, #584]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b04      	cmp	r3, #4
 800497e:	d00c      	beq.n	800499a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004980:	4b8f      	ldr	r3, [pc, #572]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d112      	bne.n	80049b2 <HAL_RCC_OscConfig+0x5e>
 800498c:	4b8c      	ldr	r3, [pc, #560]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d10b      	bne.n	80049b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499a:	4b89      	ldr	r3, [pc, #548]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d06c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x12c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d168      	bne.n	8004a80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e246      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x76>
 80049bc:	4b80      	ldr	r3, [pc, #512]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a7f      	ldr	r2, [pc, #508]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e02e      	b.n	8004a28 <HAL_RCC_OscConfig+0xd4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x98>
 80049d2:	4b7b      	ldr	r3, [pc, #492]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7a      	ldr	r2, [pc, #488]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b78      	ldr	r3, [pc, #480]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a77      	ldr	r2, [pc, #476]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e01d      	b.n	8004a28 <HAL_RCC_OscConfig+0xd4>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0xbc>
 80049f6:	4b72      	ldr	r3, [pc, #456]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a71      	ldr	r2, [pc, #452]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b6f      	ldr	r3, [pc, #444]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6e      	ldr	r2, [pc, #440]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0xd4>
 8004a10:	4b6b      	ldr	r3, [pc, #428]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a6a      	ldr	r2, [pc, #424]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b68      	ldr	r3, [pc, #416]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a67      	ldr	r2, [pc, #412]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7ff fc40 	bl	80042b4 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a38:	f7ff fc3c 	bl	80042b4 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1fa      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4a:	4b5d      	ldr	r3, [pc, #372]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0xe4>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7ff fc2c 	bl	80042b4 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a60:	f7ff fc28 	bl	80042b4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e1e6      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a72:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x10c>
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d063      	beq.n	8004b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8e:	4b4c      	ldr	r3, [pc, #304]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a9a:	4b49      	ldr	r3, [pc, #292]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d11c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x18c>
 8004aa6:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d116      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab2:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x176>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e1ba      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aca:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4939      	ldr	r1, [pc, #228]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ade:	e03a      	b.n	8004b56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae8:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aee:	f7ff fbe1 	bl	80042b4 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af6:	f7ff fbdd 	bl	80042b4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e19b      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b08:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b14:	4b2a      	ldr	r3, [pc, #168]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4927      	ldr	r1, [pc, #156]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
 8004b28:	e015      	b.n	8004b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7ff fbc0 	bl	80042b4 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b38:	f7ff fbbc 	bl	80042b4 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e17a      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d03a      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d019      	beq.n	8004b9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b70:	f7ff fba0 	bl	80042b4 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b78:	f7ff fb9c 	bl	80042b4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e15a      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b96:	2001      	movs	r0, #1
 8004b98:	f000 facc 	bl	8005134 <RCC_Delay>
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_RCC_OscConfig+0x274>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba4:	f7ff fb86 	bl	80042b4 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004baa:	e00f      	b.n	8004bcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bac:	f7ff fb82 	bl	80042b4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d908      	bls.n	8004bcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e140      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	42420000 	.word	0x42420000
 8004bc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bcc:	4b9e      	ldr	r3, [pc, #632]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e9      	bne.n	8004bac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80a6 	beq.w	8004d32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bea:	4b97      	ldr	r3, [pc, #604]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10d      	bne.n	8004c12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	4b94      	ldr	r3, [pc, #592]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	4a93      	ldr	r2, [pc, #588]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c00:	61d3      	str	r3, [r2, #28]
 8004c02:	4b91      	ldr	r3, [pc, #580]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	4b8e      	ldr	r3, [pc, #568]	; (8004e4c <HAL_RCC_OscConfig+0x4f8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d118      	bne.n	8004c50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c1e:	4b8b      	ldr	r3, [pc, #556]	; (8004e4c <HAL_RCC_OscConfig+0x4f8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a8a      	ldr	r2, [pc, #552]	; (8004e4c <HAL_RCC_OscConfig+0x4f8>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c2a:	f7ff fb43 	bl	80042b4 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c32:	f7ff fb3f 	bl	80042b4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b64      	cmp	r3, #100	; 0x64
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e0fd      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCC_OscConfig+0x4f8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d106      	bne.n	8004c66 <HAL_RCC_OscConfig+0x312>
 8004c58:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	4a7a      	ldr	r2, [pc, #488]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6213      	str	r3, [r2, #32]
 8004c64:	e02d      	b.n	8004cc2 <HAL_RCC_OscConfig+0x36e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x334>
 8004c6e:	4b76      	ldr	r3, [pc, #472]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4a75      	ldr	r2, [pc, #468]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6213      	str	r3, [r2, #32]
 8004c7a:	4b73      	ldr	r3, [pc, #460]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4a72      	ldr	r2, [pc, #456]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	6213      	str	r3, [r2, #32]
 8004c86:	e01c      	b.n	8004cc2 <HAL_RCC_OscConfig+0x36e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	d10c      	bne.n	8004caa <HAL_RCC_OscConfig+0x356>
 8004c90:	4b6d      	ldr	r3, [pc, #436]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4a6c      	ldr	r2, [pc, #432]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	f043 0304 	orr.w	r3, r3, #4
 8004c9a:	6213      	str	r3, [r2, #32]
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6213      	str	r3, [r2, #32]
 8004ca8:	e00b      	b.n	8004cc2 <HAL_RCC_OscConfig+0x36e>
 8004caa:	4b67      	ldr	r3, [pc, #412]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	4a66      	ldr	r2, [pc, #408]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	6213      	str	r3, [r2, #32]
 8004cb6:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	4a63      	ldr	r2, [pc, #396]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	f023 0304 	bic.w	r3, r3, #4
 8004cc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d015      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7ff faf3 	bl	80042b4 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7ff faef 	bl	80042b4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0ab      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce8:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0ee      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x37e>
 8004cf4:	e014      	b.n	8004d20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7ff fadd 	bl	80042b4 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7ff fad9 	bl	80042b4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e095      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d14:	4b4c      	ldr	r3, [pc, #304]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1ee      	bne.n	8004cfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d105      	bne.n	8004d32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d26:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	4a47      	ldr	r2, [pc, #284]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8081 	beq.w	8004e3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d3c:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d061      	beq.n	8004e0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d146      	bne.n	8004dde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d50:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <HAL_RCC_OscConfig+0x4fc>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d56:	f7ff faad 	bl	80042b4 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5e:	f7ff faa9 	bl	80042b4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e067      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d108      	bne.n	8004d98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	492d      	ldr	r1, [pc, #180]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d98:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a19      	ldr	r1, [r3, #32]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	430b      	orrs	r3, r1
 8004daa:	4927      	ldr	r1, [pc, #156]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db0:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <HAL_RCC_OscConfig+0x4fc>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7ff fa7d 	bl	80042b4 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7ff fa79 	bl	80042b4 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e037      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dd0:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x46a>
 8004ddc:	e02f      	b.n	8004e3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <HAL_RCC_OscConfig+0x4fc>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7ff fa66 	bl	80042b4 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7ff fa62 	bl	80042b4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e020      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x498>
 8004e0a:	e018      	b.n	8004e3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e013      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_OscConfig+0x4f4>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	42420060 	.word	0x42420060

08004e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0d0      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d910      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e76:	4b67      	ldr	r3, [pc, #412]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 0207 	bic.w	r2, r3, #7
 8004e7e:	4965      	ldr	r1, [pc, #404]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e86:	4b63      	ldr	r3, [pc, #396]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0b8      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d020      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb0:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4a58      	ldr	r2, [pc, #352]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ec8:	4b53      	ldr	r3, [pc, #332]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a52      	ldr	r2, [pc, #328]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004ece:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed4:	4b50      	ldr	r3, [pc, #320]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	494d      	ldr	r1, [pc, #308]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d040      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d115      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e07f      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f12:	4b41      	ldr	r3, [pc, #260]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e073      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f22:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06b      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f32:	4b39      	ldr	r3, [pc, #228]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f023 0203 	bic.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4936      	ldr	r1, [pc, #216]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f44:	f7ff f9b6 	bl	80042b4 <HAL_GetTick>
 8004f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4c:	f7ff f9b2 	bl	80042b4 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e053      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 020c 	and.w	r2, r3, #12
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d1eb      	bne.n	8004f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f74:	4b27      	ldr	r3, [pc, #156]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d210      	bcs.n	8004fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 0207 	bic.w	r2, r3, #7
 8004f8a:	4922      	ldr	r1, [pc, #136]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e032      	b.n	800500a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4916      	ldr	r1, [pc, #88]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	490e      	ldr	r1, [pc, #56]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe2:	f000 f821 	bl	8005028 <HAL_RCC_GetSysClockFreq>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	490a      	ldr	r1, [pc, #40]	; (800501c <HAL_RCC_ClockConfig+0x1c8>)
 8004ff4:	5ccb      	ldrb	r3, [r1, r3]
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1cc>)
 8004ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ffe:	4b09      	ldr	r3, [pc, #36]	; (8005024 <HAL_RCC_ClockConfig+0x1d0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff f914 	bl	8004230 <HAL_InitTick>

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40022000 	.word	0x40022000
 8005018:	40021000 	.word	0x40021000
 800501c:	0800bf38 	.word	0x0800bf38
 8005020:	20000000 	.word	0x20000000
 8005024:	20000004 	.word	0x20000004

08005028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	2300      	movs	r3, #0
 800503c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005042:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b04      	cmp	r3, #4
 8005050:	d002      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0x30>
 8005052:	2b08      	cmp	r3, #8
 8005054:	d003      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0x36>
 8005056:	e027      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800505a:	613b      	str	r3, [r7, #16]
      break;
 800505c:	e027      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	0c9b      	lsrs	r3, r3, #18
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005068:	5cd3      	ldrb	r3, [r2, r3]
 800506a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d010      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005076:	4b11      	ldr	r3, [pc, #68]	; (80050bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	0c5b      	lsrs	r3, r3, #17
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800508a:	fb02 f203 	mul.w	r2, r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e004      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800509c:	fb02 f303 	mul.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	613b      	str	r3, [r7, #16]
      break;
 80050a6:	e002      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80050aa:	613b      	str	r3, [r7, #16]
      break;
 80050ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ae:	693b      	ldr	r3, [r7, #16]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	007a1200 	.word	0x007a1200
 80050c4:	0800bf50 	.word	0x0800bf50
 80050c8:	0800bf60 	.word	0x0800bf60
 80050cc:	003d0900 	.word	0x003d0900

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000000 	.word	0x20000000

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e8:	f7ff fff2 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4903      	ldr	r1, [pc, #12]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	0800bf48 	.word	0x0800bf48

0800510c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005110:	f7ff ffde 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	0adb      	lsrs	r3, r3, #11
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000
 8005130:	0800bf48 	.word	0x0800bf48

08005134 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <RCC_Delay+0x34>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <RCC_Delay+0x38>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0a5b      	lsrs	r3, r3, #9
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005150:	bf00      	nop
  }
  while (Delay --);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	60fa      	str	r2, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f9      	bne.n	8005150 <RCC_Delay+0x1c>
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	20000000 	.word	0x20000000
 800516c:	10624dd3 	.word	0x10624dd3

08005170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e076      	b.n	8005270 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005192:	d009      	beq.n	80051a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	61da      	str	r2, [r3, #28]
 800519a:	e005      	b.n	80051a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fe fe62 	bl	8003e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	ea42 0103 	orr.w	r1, r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	0c1a      	lsrs	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f002 0204 	and.w	r2, r2, #4
 800524e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800525e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_SPI_Transmit+0x22>
 8005296:	2302      	movs	r3, #2
 8005298:	e12d      	b.n	80054f6 <HAL_SPI_Transmit+0x27e>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052a2:	f7ff f807 	bl	80042b4 <HAL_GetTick>
 80052a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d002      	beq.n	80052be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
 80052ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052bc:	e116      	b.n	80054ec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_SPI_Transmit+0x52>
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052ce:	e10d      	b.n	80054ec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005316:	d10f      	bne.n	8005338 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005336:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d007      	beq.n	8005356 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535e:	d14f      	bne.n	8005400 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_SPI_Transmit+0xf6>
 8005368:	8afb      	ldrh	r3, [r7, #22]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d142      	bne.n	80053f4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005392:	e02f      	b.n	80053f4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d112      	bne.n	80053c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80053c6:	e015      	b.n	80053f4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053c8:	f7fe ff74 	bl	80042b4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d803      	bhi.n	80053e0 <HAL_SPI_Transmit+0x168>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d102      	bne.n	80053e6 <HAL_SPI_Transmit+0x16e>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80053f2:	e07b      	b.n	80054ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1ca      	bne.n	8005394 <HAL_SPI_Transmit+0x11c>
 80053fe:	e050      	b.n	80054a2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_SPI_Transmit+0x196>
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d144      	bne.n	8005498 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005434:	e030      	b.n	8005498 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d113      	bne.n	800546c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	7812      	ldrb	r2, [r2, #0]
 8005450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	86da      	strh	r2, [r3, #54]	; 0x36
 800546a:	e015      	b.n	8005498 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546c:	f7fe ff22 	bl	80042b4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d803      	bhi.n	8005484 <HAL_SPI_Transmit+0x20c>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d102      	bne.n	800548a <HAL_SPI_Transmit+0x212>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005496:	e029      	b.n	80054ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1c9      	bne.n	8005436 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fcd0 	bl	8005e4c <SPI_EndRxTxTransaction>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e003      	b.n	80054ec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d002      	beq.n	8005524 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800551e:	2302      	movs	r3, #2
 8005520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005522:	e0fb      	b.n	800571c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552c:	d112      	bne.n	8005554 <HAL_SPI_Receive+0x56>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10e      	bne.n	8005554 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2204      	movs	r2, #4
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f8ef 	bl	800572e <HAL_SPI_TransmitReceive>
 8005550:	4603      	mov	r3, r0
 8005552:	e0e8      	b.n	8005726 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_SPI_Receive+0x64>
 800555e:	2302      	movs	r3, #2
 8005560:	e0e1      	b.n	8005726 <HAL_SPI_Receive+0x228>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800556a:	f7fe fea3 	bl	80042b4 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_Receive+0x7e>
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005580:	e0cc      	b.n	800571c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2204      	movs	r2, #4
 8005586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c8:	d10f      	bne.n	80055ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d007      	beq.n	8005608 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d16a      	bne.n	80056e6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005610:	e032      	b.n	8005678 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d115      	bne.n	800564c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f103 020c 	add.w	r2, r3, #12
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800564a:	e015      	b.n	8005678 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564c:	f7fe fe32 	bl	80042b4 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d803      	bhi.n	8005664 <HAL_SPI_Receive+0x166>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d102      	bne.n	800566a <HAL_SPI_Receive+0x16c>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005676:	e051      	b.n	800571c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1c7      	bne.n	8005612 <HAL_SPI_Receive+0x114>
 8005682:	e035      	b.n	80056f0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d113      	bne.n	80056ba <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	b292      	uxth	r2, r2
 800569e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b8:	e015      	b.n	80056e6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ba:	f7fe fdfb 	bl	80042b4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d803      	bhi.n	80056d2 <HAL_SPI_Receive+0x1d4>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d102      	bne.n	80056d8 <HAL_SPI_Receive+0x1da>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80056e4:	e01a      	b.n	800571c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1c9      	bne.n	8005684 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fb57 	bl	8005da8 <SPI_EndRxTransaction>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
 8005712:	e003      	b.n	800571c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08c      	sub	sp, #48	; 0x30
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800573c:	2301      	movs	r3, #1
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x26>
 8005750:	2302      	movs	r3, #2
 8005752:	e198      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x358>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800575c:	f7fe fdaa 	bl	80042b4 <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800577a:	2b01      	cmp	r3, #1
 800577c:	d00f      	beq.n	800579e <HAL_SPI_TransmitReceive+0x70>
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005784:	d107      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x68>
 800578e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005792:	2b04      	cmp	r3, #4
 8005794:	d003      	beq.n	800579e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800579c:	e16d      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x82>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x82>
 80057aa:	887b      	ldrh	r3, [r7, #2]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057b6:	e160      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d003      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2205      	movs	r2, #5
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	887a      	ldrh	r2, [r7, #2]
 80057dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	887a      	ldrh	r2, [r7, #2]
 80057f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d007      	beq.n	8005820 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005828:	d17c      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x10a>
 8005832:	8b7b      	ldrh	r3, [r7, #26]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d16a      	bne.n	800590e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585c:	e057      	b.n	800590e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11b      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x176>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x176>
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d113      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	881a      	ldrh	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d119      	bne.n	80058e6 <HAL_SPI_TransmitReceive+0x1b8>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d014      	beq.n	80058e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	b292      	uxth	r2, r2
 80058c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	1c9a      	adds	r2, r3, #2
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058e2:	2301      	movs	r3, #1
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058e6:	f7fe fce5 	bl	80042b4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d80b      	bhi.n	800590e <HAL_SPI_TransmitReceive+0x1e0>
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d007      	beq.n	800590e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800590c:	e0b5      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1a2      	bne.n	800585e <HAL_SPI_TransmitReceive+0x130>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d19d      	bne.n	800585e <HAL_SPI_TransmitReceive+0x130>
 8005922:	e080      	b.n	8005a26 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_SPI_TransmitReceive+0x204>
 800592c:	8b7b      	ldrh	r3, [r7, #26]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d16f      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005958:	e05b      	b.n	8005a12 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d11c      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x274>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d017      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x274>
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d114      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d119      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x2b6>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d014      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e0:	2301      	movs	r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059e4:	f7fe fc66 	bl	80042b4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d803      	bhi.n	80059fc <HAL_SPI_TransmitReceive+0x2ce>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d102      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x2d4>
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005a10:	e033      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d19e      	bne.n	800595a <HAL_SPI_TransmitReceive+0x22c>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d199      	bne.n	800595a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa0e 	bl	8005e4c <SPI_EndRxTxTransaction>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d006      	beq.n	8005a44 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a42:	e01a      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a70:	e003      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3730      	adds	r7, #48	; 0x30
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	099b      	lsrs	r3, r3, #6
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	099b      	lsrs	r3, r3, #6
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
    return;
 8005ad2:	e0be      	b.n	8005c52 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_SPI_IRQHandler+0x66>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	09db      	lsrs	r3, r3, #7
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
    return;
 8005af4:	e0ad      	b.n	8005c52 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_SPI_IRQHandler+0x80>
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	099b      	lsrs	r3, r3, #6
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a1 	beq.w	8005c52 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 809a 	beq.w	8005c52 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	099b      	lsrs	r3, r3, #6
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d023      	beq.n	8005b72 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d011      	beq.n	8005b5a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	f043 0204 	orr.w	r2, r3, #4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	e00b      	b.n	8005b72 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]
        return;
 8005b70:	e06f      	b.n	8005c52 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d014      	beq.n	8005ba8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	f043 0201 	orr.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d04f      	beq.n	8005c50 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bbe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <HAL_SPI_IRQHandler+0x14c>
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d034      	beq.n	8005c46 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0203 	bic.w	r2, r2, #3
 8005bea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d011      	beq.n	8005c18 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf8:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <HAL_SPI_IRQHandler+0x1c8>)
 8005bfa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fc93 	bl	800452c <HAL_DMA_Abort_IT>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d016      	beq.n	8005c4e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c24:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <HAL_SPI_IRQHandler+0x1c8>)
 8005c26:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe fc7d 	bl	800452c <HAL_DMA_Abort_IT>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005c44:	e003      	b.n	8005c4e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f808 	bl	8005c5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c4c:	e000      	b.n	8005c50 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005c4e:	bf00      	nop
    return;
 8005c50:	bf00      	nop
  }
}
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08005c6f 	.word	0x08005c6f

08005c5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ffe7 	bl	8005c5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ca8:	f7fe fb04 	bl	80042b4 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cb8:	f7fe fafc 	bl	80042b4 <HAL_GetTick>
 8005cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cbe:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	015b      	lsls	r3, r3, #5
 8005cc4:	0d1b      	lsrs	r3, r3, #20
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cce:	e054      	b.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d050      	beq.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cd8:	f7fe faec 	bl	80042b4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d902      	bls.n	8005cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d13d      	bne.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d06:	d111      	bne.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d10:	d004      	beq.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d107      	bne.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d34:	d10f      	bne.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e017      	b.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d19b      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000000 	.word	0x20000000

08005da8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dbc:	d111      	bne.n	8005de2 <SPI_EndRxTransaction+0x3a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc6:	d004      	beq.n	8005dd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d107      	bne.n	8005de2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dea:	d117      	bne.n	8005e1c <SPI_EndRxTransaction+0x74>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d112      	bne.n	8005e1c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2101      	movs	r1, #1
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff ff49 	bl	8005c98 <SPI_WaitFlagStateUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e013      	b.n	8005e44 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2200      	movs	r2, #0
 8005e24:	2180      	movs	r1, #128	; 0x80
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff ff36 	bl	8005c98 <SPI_WaitFlagStateUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e000      	b.n	8005e44 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff ff18 	bl	8005c98 <SPI_WaitFlagStateUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e000      	b.n	8005e80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e042      	b.n	8005f20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fe f83e 	bl	8003f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2224      	movs	r2, #36	; 0x24
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f91d 	bl	800610c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695a      	ldr	r2, [r3, #20]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d16d      	bne.n	8006024 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_UART_Transmit+0x2c>
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e066      	b.n	8006026 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2221      	movs	r2, #33	; 0x21
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f66:	f7fe f9a5 	bl	80042b4 <HAL_GetTick>
 8005f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f80:	d108      	bne.n	8005f94 <HAL_UART_Transmit+0x6c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	e003      	b.n	8005f9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f9c:	e02a      	b.n	8005ff4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f840 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e036      	b.n	8006026 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	e007      	b.n	8005fe6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1cf      	bne.n	8005f9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2200      	movs	r2, #0
 8006006:	2140      	movs	r1, #64	; 0x40
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f810 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e006      	b.n	8006026 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e000      	b.n	8006026 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
  }
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b090      	sub	sp, #64	; 0x40
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603e:	e050      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d04c      	beq.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0x30>
 800604e:	f7fe f931 	bl	80042b4 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800605a:	429a      	cmp	r2, r3
 800605c:	d241      	bcs.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800607e:	637a      	str	r2, [r7, #52]	; 0x34
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3314      	adds	r3, #20
 8006098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	613b      	str	r3, [r7, #16]
   return(result);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b2:	623a      	str	r2, [r7, #32]
 80060b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	69f9      	ldr	r1, [r7, #28]
 80060b8:	6a3a      	ldr	r2, [r7, #32]
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e5      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e00f      	b.n	8006102 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4013      	ands	r3, r2
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d09f      	beq.n	8006040 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3740      	adds	r7, #64	; 0x40
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006146:	f023 030c 	bic.w	r3, r3, #12
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	430b      	orrs	r3, r1
 8006152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2c      	ldr	r2, [pc, #176]	; (8006220 <UART_SetConfig+0x114>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006174:	f7fe ffca 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	e002      	b.n	8006182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800617c:	f7fe ffb2 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8006180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009a      	lsls	r2, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	4a22      	ldr	r2, [pc, #136]	; (8006224 <UART_SetConfig+0x118>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	0119      	lsls	r1, r3, #4
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009a      	lsls	r2, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b8:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <UART_SetConfig+0x118>)
 80061ba:	fba3 0302 	umull	r0, r3, r3, r2
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	2064      	movs	r0, #100	; 0x64
 80061c2:	fb00 f303 	mul.w	r3, r0, r3
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	3332      	adds	r3, #50	; 0x32
 80061cc:	4a15      	ldr	r2, [pc, #84]	; (8006224 <UART_SetConfig+0x118>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061d8:	4419      	add	r1, r3
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009a      	lsls	r2, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80061f0:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <UART_SetConfig+0x118>)
 80061f2:	fba3 0302 	umull	r0, r3, r3, r2
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2064      	movs	r0, #100	; 0x64
 80061fa:	fb00 f303 	mul.w	r3, r0, r3
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	3332      	adds	r3, #50	; 0x32
 8006204:	4a07      	ldr	r2, [pc, #28]	; (8006224 <UART_SetConfig+0x118>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	440a      	add	r2, r1
 8006216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40013800 	.word	0x40013800
 8006224:	51eb851f 	.word	0x51eb851f

08006228 <__errno>:
 8006228:	4b01      	ldr	r3, [pc, #4]	; (8006230 <__errno+0x8>)
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	2000000c 	.word	0x2000000c

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	2600      	movs	r6, #0
 8006238:	4d0c      	ldr	r5, [pc, #48]	; (800626c <__libc_init_array+0x38>)
 800623a:	4c0d      	ldr	r4, [pc, #52]	; (8006270 <__libc_init_array+0x3c>)
 800623c:	1b64      	subs	r4, r4, r5
 800623e:	10a4      	asrs	r4, r4, #2
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	f005 fcb4 	bl	800bbb0 <_init>
 8006248:	2600      	movs	r6, #0
 800624a:	4d0a      	ldr	r5, [pc, #40]	; (8006274 <__libc_init_array+0x40>)
 800624c:	4c0a      	ldr	r4, [pc, #40]	; (8006278 <__libc_init_array+0x44>)
 800624e:	1b64      	subs	r4, r4, r5
 8006250:	10a4      	asrs	r4, r4, #2
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f855 3b04 	ldr.w	r3, [r5], #4
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f855 3b04 	ldr.w	r3, [r5], #4
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	0800c980 	.word	0x0800c980
 8006270:	0800c980 	.word	0x0800c980
 8006274:	0800c980 	.word	0x0800c980
 8006278:	0800c984 	.word	0x0800c984

0800627c <memset>:
 800627c:	4603      	mov	r3, r0
 800627e:	4402      	add	r2, r0
 8006280:	4293      	cmp	r3, r2
 8006282:	d100      	bne.n	8006286 <memset+0xa>
 8006284:	4770      	bx	lr
 8006286:	f803 1b01 	strb.w	r1, [r3], #1
 800628a:	e7f9      	b.n	8006280 <memset+0x4>

0800628c <__cvt>:
 800628c:	2b00      	cmp	r3, #0
 800628e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006292:	461f      	mov	r7, r3
 8006294:	bfbb      	ittet	lt
 8006296:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800629a:	461f      	movlt	r7, r3
 800629c:	2300      	movge	r3, #0
 800629e:	232d      	movlt	r3, #45	; 0x2d
 80062a0:	b088      	sub	sp, #32
 80062a2:	4614      	mov	r4, r2
 80062a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80062a8:	7013      	strb	r3, [r2, #0]
 80062aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80062b0:	f023 0820 	bic.w	r8, r3, #32
 80062b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062b8:	d005      	beq.n	80062c6 <__cvt+0x3a>
 80062ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062be:	d100      	bne.n	80062c2 <__cvt+0x36>
 80062c0:	3501      	adds	r5, #1
 80062c2:	2302      	movs	r3, #2
 80062c4:	e000      	b.n	80062c8 <__cvt+0x3c>
 80062c6:	2303      	movs	r3, #3
 80062c8:	aa07      	add	r2, sp, #28
 80062ca:	9204      	str	r2, [sp, #16]
 80062cc:	aa06      	add	r2, sp, #24
 80062ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062d2:	e9cd 3500 	strd	r3, r5, [sp]
 80062d6:	4622      	mov	r2, r4
 80062d8:	463b      	mov	r3, r7
 80062da:	f000 fd21 	bl	8006d20 <_dtoa_r>
 80062de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062e2:	4606      	mov	r6, r0
 80062e4:	d102      	bne.n	80062ec <__cvt+0x60>
 80062e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062e8:	07db      	lsls	r3, r3, #31
 80062ea:	d522      	bpl.n	8006332 <__cvt+0xa6>
 80062ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062f0:	eb06 0905 	add.w	r9, r6, r5
 80062f4:	d110      	bne.n	8006318 <__cvt+0x8c>
 80062f6:	7833      	ldrb	r3, [r6, #0]
 80062f8:	2b30      	cmp	r3, #48	; 0x30
 80062fa:	d10a      	bne.n	8006312 <__cvt+0x86>
 80062fc:	2200      	movs	r2, #0
 80062fe:	2300      	movs	r3, #0
 8006300:	4620      	mov	r0, r4
 8006302:	4639      	mov	r1, r7
 8006304:	f7fa fb50 	bl	80009a8 <__aeabi_dcmpeq>
 8006308:	b918      	cbnz	r0, 8006312 <__cvt+0x86>
 800630a:	f1c5 0501 	rsb	r5, r5, #1
 800630e:	f8ca 5000 	str.w	r5, [sl]
 8006312:	f8da 3000 	ldr.w	r3, [sl]
 8006316:	4499      	add	r9, r3
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	4620      	mov	r0, r4
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8006324:	b108      	cbz	r0, 800632a <__cvt+0x9e>
 8006326:	f8cd 901c 	str.w	r9, [sp, #28]
 800632a:	2230      	movs	r2, #48	; 0x30
 800632c:	9b07      	ldr	r3, [sp, #28]
 800632e:	454b      	cmp	r3, r9
 8006330:	d307      	bcc.n	8006342 <__cvt+0xb6>
 8006332:	4630      	mov	r0, r6
 8006334:	9b07      	ldr	r3, [sp, #28]
 8006336:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006338:	1b9b      	subs	r3, r3, r6
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	b008      	add	sp, #32
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	9107      	str	r1, [sp, #28]
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e7f0      	b.n	800632c <__cvt+0xa0>

0800634a <__exponent>:
 800634a:	4603      	mov	r3, r0
 800634c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634e:	2900      	cmp	r1, #0
 8006350:	f803 2b02 	strb.w	r2, [r3], #2
 8006354:	bfb6      	itet	lt
 8006356:	222d      	movlt	r2, #45	; 0x2d
 8006358:	222b      	movge	r2, #43	; 0x2b
 800635a:	4249      	neglt	r1, r1
 800635c:	2909      	cmp	r1, #9
 800635e:	7042      	strb	r2, [r0, #1]
 8006360:	dd2b      	ble.n	80063ba <__exponent+0x70>
 8006362:	f10d 0407 	add.w	r4, sp, #7
 8006366:	46a4      	mov	ip, r4
 8006368:	270a      	movs	r7, #10
 800636a:	fb91 f6f7 	sdiv	r6, r1, r7
 800636e:	460a      	mov	r2, r1
 8006370:	46a6      	mov	lr, r4
 8006372:	fb07 1516 	mls	r5, r7, r6, r1
 8006376:	2a63      	cmp	r2, #99	; 0x63
 8006378:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800637c:	4631      	mov	r1, r6
 800637e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006382:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006386:	dcf0      	bgt.n	800636a <__exponent+0x20>
 8006388:	3130      	adds	r1, #48	; 0x30
 800638a:	f1ae 0502 	sub.w	r5, lr, #2
 800638e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006392:	4629      	mov	r1, r5
 8006394:	1c44      	adds	r4, r0, #1
 8006396:	4561      	cmp	r1, ip
 8006398:	d30a      	bcc.n	80063b0 <__exponent+0x66>
 800639a:	f10d 0209 	add.w	r2, sp, #9
 800639e:	eba2 020e 	sub.w	r2, r2, lr
 80063a2:	4565      	cmp	r5, ip
 80063a4:	bf88      	it	hi
 80063a6:	2200      	movhi	r2, #0
 80063a8:	4413      	add	r3, r2
 80063aa:	1a18      	subs	r0, r3, r0
 80063ac:	b003      	add	sp, #12
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063b8:	e7ed      	b.n	8006396 <__exponent+0x4c>
 80063ba:	2330      	movs	r3, #48	; 0x30
 80063bc:	3130      	adds	r1, #48	; 0x30
 80063be:	7083      	strb	r3, [r0, #2]
 80063c0:	70c1      	strb	r1, [r0, #3]
 80063c2:	1d03      	adds	r3, r0, #4
 80063c4:	e7f1      	b.n	80063aa <__exponent+0x60>
	...

080063c8 <_printf_float>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	b091      	sub	sp, #68	; 0x44
 80063ce:	460c      	mov	r4, r1
 80063d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063d4:	4616      	mov	r6, r2
 80063d6:	461f      	mov	r7, r3
 80063d8:	4605      	mov	r5, r0
 80063da:	f001 fa8f 	bl	80078fc <_localeconv_r>
 80063de:	6803      	ldr	r3, [r0, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	9309      	str	r3, [sp, #36]	; 0x24
 80063e4:	f7f9 feb4 	bl	8000150 <strlen>
 80063e8:	2300      	movs	r3, #0
 80063ea:	930e      	str	r3, [sp, #56]	; 0x38
 80063ec:	f8d8 3000 	ldr.w	r3, [r8]
 80063f0:	900a      	str	r0, [sp, #40]	; 0x28
 80063f2:	3307      	adds	r3, #7
 80063f4:	f023 0307 	bic.w	r3, r3, #7
 80063f8:	f103 0208 	add.w	r2, r3, #8
 80063fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006400:	f8d4 b000 	ldr.w	fp, [r4]
 8006404:	f8c8 2000 	str.w	r2, [r8]
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006410:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006414:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006418:	930b      	str	r3, [sp, #44]	; 0x2c
 800641a:	f04f 32ff 	mov.w	r2, #4294967295
 800641e:	4640      	mov	r0, r8
 8006420:	4b9c      	ldr	r3, [pc, #624]	; (8006694 <_printf_float+0x2cc>)
 8006422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006424:	f7fa faf2 	bl	8000a0c <__aeabi_dcmpun>
 8006428:	bb70      	cbnz	r0, 8006488 <_printf_float+0xc0>
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	4640      	mov	r0, r8
 8006430:	4b98      	ldr	r3, [pc, #608]	; (8006694 <_printf_float+0x2cc>)
 8006432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006434:	f7fa facc 	bl	80009d0 <__aeabi_dcmple>
 8006438:	bb30      	cbnz	r0, 8006488 <_printf_float+0xc0>
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	4640      	mov	r0, r8
 8006440:	4651      	mov	r1, sl
 8006442:	f7fa fabb 	bl	80009bc <__aeabi_dcmplt>
 8006446:	b110      	cbz	r0, 800644e <_printf_float+0x86>
 8006448:	232d      	movs	r3, #45	; 0x2d
 800644a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644e:	4b92      	ldr	r3, [pc, #584]	; (8006698 <_printf_float+0x2d0>)
 8006450:	4892      	ldr	r0, [pc, #584]	; (800669c <_printf_float+0x2d4>)
 8006452:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006456:	bf94      	ite	ls
 8006458:	4698      	movls	r8, r3
 800645a:	4680      	movhi	r8, r0
 800645c:	2303      	movs	r3, #3
 800645e:	f04f 0a00 	mov.w	sl, #0
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	f02b 0304 	bic.w	r3, fp, #4
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	4633      	mov	r3, r6
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	9700      	str	r7, [sp, #0]
 8006472:	aa0f      	add	r2, sp, #60	; 0x3c
 8006474:	f000 f9d4 	bl	8006820 <_printf_common>
 8006478:	3001      	adds	r0, #1
 800647a:	f040 8090 	bne.w	800659e <_printf_float+0x1d6>
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	b011      	add	sp, #68	; 0x44
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006488:	4642      	mov	r2, r8
 800648a:	4653      	mov	r3, sl
 800648c:	4640      	mov	r0, r8
 800648e:	4651      	mov	r1, sl
 8006490:	f7fa fabc 	bl	8000a0c <__aeabi_dcmpun>
 8006494:	b148      	cbz	r0, 80064aa <_printf_float+0xe2>
 8006496:	f1ba 0f00 	cmp.w	sl, #0
 800649a:	bfb8      	it	lt
 800649c:	232d      	movlt	r3, #45	; 0x2d
 800649e:	4880      	ldr	r0, [pc, #512]	; (80066a0 <_printf_float+0x2d8>)
 80064a0:	bfb8      	it	lt
 80064a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064a6:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <_printf_float+0x2dc>)
 80064a8:	e7d3      	b.n	8006452 <_printf_float+0x8a>
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	d142      	bne.n	800653a <_printf_float+0x172>
 80064b4:	2306      	movs	r3, #6
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	9206      	str	r2, [sp, #24]
 80064bc:	aa0e      	add	r2, sp, #56	; 0x38
 80064be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80064c2:	aa0d      	add	r2, sp, #52	; 0x34
 80064c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80064c8:	9203      	str	r2, [sp, #12]
 80064ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80064ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064d2:	6023      	str	r3, [r4, #0]
 80064d4:	6863      	ldr	r3, [r4, #4]
 80064d6:	4642      	mov	r2, r8
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	4628      	mov	r0, r5
 80064dc:	4653      	mov	r3, sl
 80064de:	910b      	str	r1, [sp, #44]	; 0x2c
 80064e0:	f7ff fed4 	bl	800628c <__cvt>
 80064e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064e6:	4680      	mov	r8, r0
 80064e8:	2947      	cmp	r1, #71	; 0x47
 80064ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064ec:	d108      	bne.n	8006500 <_printf_float+0x138>
 80064ee:	1cc8      	adds	r0, r1, #3
 80064f0:	db02      	blt.n	80064f8 <_printf_float+0x130>
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	4299      	cmp	r1, r3
 80064f6:	dd40      	ble.n	800657a <_printf_float+0x1b2>
 80064f8:	f1a9 0902 	sub.w	r9, r9, #2
 80064fc:	fa5f f989 	uxtb.w	r9, r9
 8006500:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006504:	d81f      	bhi.n	8006546 <_printf_float+0x17e>
 8006506:	464a      	mov	r2, r9
 8006508:	3901      	subs	r1, #1
 800650a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800650e:	910d      	str	r1, [sp, #52]	; 0x34
 8006510:	f7ff ff1b 	bl	800634a <__exponent>
 8006514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006516:	4682      	mov	sl, r0
 8006518:	1813      	adds	r3, r2, r0
 800651a:	2a01      	cmp	r2, #1
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	dc02      	bgt.n	8006526 <_printf_float+0x15e>
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	07d2      	lsls	r2, r2, #31
 8006524:	d501      	bpl.n	800652a <_printf_float+0x162>
 8006526:	3301      	adds	r3, #1
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800652e:	2b00      	cmp	r3, #0
 8006530:	d09b      	beq.n	800646a <_printf_float+0xa2>
 8006532:	232d      	movs	r3, #45	; 0x2d
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006538:	e797      	b.n	800646a <_printf_float+0xa2>
 800653a:	2947      	cmp	r1, #71	; 0x47
 800653c:	d1bc      	bne.n	80064b8 <_printf_float+0xf0>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1ba      	bne.n	80064b8 <_printf_float+0xf0>
 8006542:	2301      	movs	r3, #1
 8006544:	e7b7      	b.n	80064b6 <_printf_float+0xee>
 8006546:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800654a:	d118      	bne.n	800657e <_printf_float+0x1b6>
 800654c:	2900      	cmp	r1, #0
 800654e:	6863      	ldr	r3, [r4, #4]
 8006550:	dd0b      	ble.n	800656a <_printf_float+0x1a2>
 8006552:	6121      	str	r1, [r4, #16]
 8006554:	b913      	cbnz	r3, 800655c <_printf_float+0x194>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	07d0      	lsls	r0, r2, #31
 800655a:	d502      	bpl.n	8006562 <_printf_float+0x19a>
 800655c:	3301      	adds	r3, #1
 800655e:	440b      	add	r3, r1
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	f04f 0a00 	mov.w	sl, #0
 8006566:	65a1      	str	r1, [r4, #88]	; 0x58
 8006568:	e7df      	b.n	800652a <_printf_float+0x162>
 800656a:	b913      	cbnz	r3, 8006572 <_printf_float+0x1aa>
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	07d2      	lsls	r2, r2, #31
 8006570:	d501      	bpl.n	8006576 <_printf_float+0x1ae>
 8006572:	3302      	adds	r3, #2
 8006574:	e7f4      	b.n	8006560 <_printf_float+0x198>
 8006576:	2301      	movs	r3, #1
 8006578:	e7f2      	b.n	8006560 <_printf_float+0x198>
 800657a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800657e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006580:	4299      	cmp	r1, r3
 8006582:	db05      	blt.n	8006590 <_printf_float+0x1c8>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	6121      	str	r1, [r4, #16]
 8006588:	07d8      	lsls	r0, r3, #31
 800658a:	d5ea      	bpl.n	8006562 <_printf_float+0x19a>
 800658c:	1c4b      	adds	r3, r1, #1
 800658e:	e7e7      	b.n	8006560 <_printf_float+0x198>
 8006590:	2900      	cmp	r1, #0
 8006592:	bfcc      	ite	gt
 8006594:	2201      	movgt	r2, #1
 8006596:	f1c1 0202 	rsble	r2, r1, #2
 800659a:	4413      	add	r3, r2
 800659c:	e7e0      	b.n	8006560 <_printf_float+0x198>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	055a      	lsls	r2, r3, #21
 80065a2:	d407      	bmi.n	80065b4 <_printf_float+0x1ec>
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	4642      	mov	r2, r8
 80065a8:	4631      	mov	r1, r6
 80065aa:	4628      	mov	r0, r5
 80065ac:	47b8      	blx	r7
 80065ae:	3001      	adds	r0, #1
 80065b0:	d12b      	bne.n	800660a <_printf_float+0x242>
 80065b2:	e764      	b.n	800647e <_printf_float+0xb6>
 80065b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065b8:	f240 80dd 	bls.w	8006776 <_printf_float+0x3ae>
 80065bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f7fa f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d033      	beq.n	8006634 <_printf_float+0x26c>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	4a35      	ldr	r2, [pc, #212]	; (80066a8 <_printf_float+0x2e0>)
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	f43f af51 	beq.w	800647e <_printf_float+0xb6>
 80065dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065e0:	429a      	cmp	r2, r3
 80065e2:	db02      	blt.n	80065ea <_printf_float+0x222>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	07d8      	lsls	r0, r3, #31
 80065e8:	d50f      	bpl.n	800660a <_printf_float+0x242>
 80065ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	f43f af42 	beq.w	800647e <_printf_float+0xb6>
 80065fa:	f04f 0800 	mov.w	r8, #0
 80065fe:	f104 091a 	add.w	r9, r4, #26
 8006602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006604:	3b01      	subs	r3, #1
 8006606:	4543      	cmp	r3, r8
 8006608:	dc09      	bgt.n	800661e <_printf_float+0x256>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	079b      	lsls	r3, r3, #30
 800660e:	f100 8102 	bmi.w	8006816 <_printf_float+0x44e>
 8006612:	68e0      	ldr	r0, [r4, #12]
 8006614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006616:	4298      	cmp	r0, r3
 8006618:	bfb8      	it	lt
 800661a:	4618      	movlt	r0, r3
 800661c:	e731      	b.n	8006482 <_printf_float+0xba>
 800661e:	2301      	movs	r3, #1
 8006620:	464a      	mov	r2, r9
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	f43f af28 	beq.w	800647e <_printf_float+0xb6>
 800662e:	f108 0801 	add.w	r8, r8, #1
 8006632:	e7e6      	b.n	8006602 <_printf_float+0x23a>
 8006634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006636:	2b00      	cmp	r3, #0
 8006638:	dc38      	bgt.n	80066ac <_printf_float+0x2e4>
 800663a:	2301      	movs	r3, #1
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <_printf_float+0x2e0>)
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f af1a 	beq.w	800647e <_printf_float+0xb6>
 800664a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800664e:	4313      	orrs	r3, r2
 8006650:	d102      	bne.n	8006658 <_printf_float+0x290>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d5d8      	bpl.n	800660a <_printf_float+0x242>
 8006658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af0b 	beq.w	800647e <_printf_float+0xb6>
 8006668:	f04f 0900 	mov.w	r9, #0
 800666c:	f104 0a1a 	add.w	sl, r4, #26
 8006670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006672:	425b      	negs	r3, r3
 8006674:	454b      	cmp	r3, r9
 8006676:	dc01      	bgt.n	800667c <_printf_float+0x2b4>
 8006678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800667a:	e794      	b.n	80065a6 <_printf_float+0x1de>
 800667c:	2301      	movs	r3, #1
 800667e:	4652      	mov	r2, sl
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f aef9 	beq.w	800647e <_printf_float+0xb6>
 800668c:	f109 0901 	add.w	r9, r9, #1
 8006690:	e7ee      	b.n	8006670 <_printf_float+0x2a8>
 8006692:	bf00      	nop
 8006694:	7fefffff 	.word	0x7fefffff
 8006698:	0800bf68 	.word	0x0800bf68
 800669c:	0800bf6c 	.word	0x0800bf6c
 80066a0:	0800bf74 	.word	0x0800bf74
 80066a4:	0800bf70 	.word	0x0800bf70
 80066a8:	0800bf78 	.word	0x0800bf78
 80066ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066b0:	429a      	cmp	r2, r3
 80066b2:	bfa8      	it	ge
 80066b4:	461a      	movge	r2, r3
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	4691      	mov	r9, r2
 80066ba:	dc37      	bgt.n	800672c <_printf_float+0x364>
 80066bc:	f04f 0b00 	mov.w	fp, #0
 80066c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066c4:	f104 021a 	add.w	r2, r4, #26
 80066c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066cc:	ebaa 0309 	sub.w	r3, sl, r9
 80066d0:	455b      	cmp	r3, fp
 80066d2:	dc33      	bgt.n	800673c <_printf_float+0x374>
 80066d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066d8:	429a      	cmp	r2, r3
 80066da:	db3b      	blt.n	8006754 <_printf_float+0x38c>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	07da      	lsls	r2, r3, #31
 80066e0:	d438      	bmi.n	8006754 <_printf_float+0x38c>
 80066e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066e6:	eba2 030a 	sub.w	r3, r2, sl
 80066ea:	eba2 0901 	sub.w	r9, r2, r1
 80066ee:	4599      	cmp	r9, r3
 80066f0:	bfa8      	it	ge
 80066f2:	4699      	movge	r9, r3
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	dc34      	bgt.n	8006764 <_printf_float+0x39c>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006702:	f104 0a1a 	add.w	sl, r4, #26
 8006706:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	eba3 0309 	sub.w	r3, r3, r9
 8006710:	4543      	cmp	r3, r8
 8006712:	f77f af7a 	ble.w	800660a <_printf_float+0x242>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f aeac 	beq.w	800647e <_printf_float+0xb6>
 8006726:	f108 0801 	add.w	r8, r8, #1
 800672a:	e7ec      	b.n	8006706 <_printf_float+0x33e>
 800672c:	4613      	mov	r3, r2
 800672e:	4631      	mov	r1, r6
 8006730:	4642      	mov	r2, r8
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	d1c0      	bne.n	80066bc <_printf_float+0x2f4>
 800673a:	e6a0      	b.n	800647e <_printf_float+0xb6>
 800673c:	2301      	movs	r3, #1
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	920b      	str	r2, [sp, #44]	; 0x2c
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae99 	beq.w	800647e <_printf_float+0xb6>
 800674c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800674e:	f10b 0b01 	add.w	fp, fp, #1
 8006752:	e7b9      	b.n	80066c8 <_printf_float+0x300>
 8006754:	4631      	mov	r1, r6
 8006756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	d1bf      	bne.n	80066e2 <_printf_float+0x31a>
 8006762:	e68c      	b.n	800647e <_printf_float+0xb6>
 8006764:	464b      	mov	r3, r9
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	eb08 020a 	add.w	r2, r8, sl
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	d1c2      	bne.n	80066fa <_printf_float+0x332>
 8006774:	e683      	b.n	800647e <_printf_float+0xb6>
 8006776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006778:	2a01      	cmp	r2, #1
 800677a:	dc01      	bgt.n	8006780 <_printf_float+0x3b8>
 800677c:	07db      	lsls	r3, r3, #31
 800677e:	d537      	bpl.n	80067f0 <_printf_float+0x428>
 8006780:	2301      	movs	r3, #1
 8006782:	4642      	mov	r2, r8
 8006784:	4631      	mov	r1, r6
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	f43f ae77 	beq.w	800647e <_printf_float+0xb6>
 8006790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f ae6f 	beq.w	800647e <_printf_float+0xb6>
 80067a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067a4:	2200      	movs	r2, #0
 80067a6:	2300      	movs	r3, #0
 80067a8:	f7fa f8fe 	bl	80009a8 <__aeabi_dcmpeq>
 80067ac:	b9d8      	cbnz	r0, 80067e6 <_printf_float+0x41e>
 80067ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b0:	f108 0201 	add.w	r2, r8, #1
 80067b4:	3b01      	subs	r3, #1
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	d10e      	bne.n	80067de <_printf_float+0x416>
 80067c0:	e65d      	b.n	800647e <_printf_float+0xb6>
 80067c2:	2301      	movs	r3, #1
 80067c4:	464a      	mov	r2, r9
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	f43f ae56 	beq.w	800647e <_printf_float+0xb6>
 80067d2:	f108 0801 	add.w	r8, r8, #1
 80067d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067d8:	3b01      	subs	r3, #1
 80067da:	4543      	cmp	r3, r8
 80067dc:	dcf1      	bgt.n	80067c2 <_printf_float+0x3fa>
 80067de:	4653      	mov	r3, sl
 80067e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067e4:	e6e0      	b.n	80065a8 <_printf_float+0x1e0>
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	f104 091a 	add.w	r9, r4, #26
 80067ee:	e7f2      	b.n	80067d6 <_printf_float+0x40e>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4642      	mov	r2, r8
 80067f4:	e7df      	b.n	80067b6 <_printf_float+0x3ee>
 80067f6:	2301      	movs	r3, #1
 80067f8:	464a      	mov	r2, r9
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	f43f ae3c 	beq.w	800647e <_printf_float+0xb6>
 8006806:	f108 0801 	add.w	r8, r8, #1
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800680e:	1a5b      	subs	r3, r3, r1
 8006810:	4543      	cmp	r3, r8
 8006812:	dcf0      	bgt.n	80067f6 <_printf_float+0x42e>
 8006814:	e6fd      	b.n	8006612 <_printf_float+0x24a>
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	f104 0919 	add.w	r9, r4, #25
 800681e:	e7f4      	b.n	800680a <_printf_float+0x442>

08006820 <_printf_common>:
 8006820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	4616      	mov	r6, r2
 8006826:	4699      	mov	r9, r3
 8006828:	688a      	ldr	r2, [r1, #8]
 800682a:	690b      	ldr	r3, [r1, #16]
 800682c:	4607      	mov	r7, r0
 800682e:	4293      	cmp	r3, r2
 8006830:	bfb8      	it	lt
 8006832:	4613      	movlt	r3, r2
 8006834:	6033      	str	r3, [r6, #0]
 8006836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800683a:	460c      	mov	r4, r1
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	b10a      	cbz	r2, 8006846 <_printf_common+0x26>
 8006842:	3301      	adds	r3, #1
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	0699      	lsls	r1, r3, #26
 800684a:	bf42      	ittt	mi
 800684c:	6833      	ldrmi	r3, [r6, #0]
 800684e:	3302      	addmi	r3, #2
 8006850:	6033      	strmi	r3, [r6, #0]
 8006852:	6825      	ldr	r5, [r4, #0]
 8006854:	f015 0506 	ands.w	r5, r5, #6
 8006858:	d106      	bne.n	8006868 <_printf_common+0x48>
 800685a:	f104 0a19 	add.w	sl, r4, #25
 800685e:	68e3      	ldr	r3, [r4, #12]
 8006860:	6832      	ldr	r2, [r6, #0]
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	42ab      	cmp	r3, r5
 8006866:	dc28      	bgt.n	80068ba <_printf_common+0x9a>
 8006868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800686c:	1e13      	subs	r3, r2, #0
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	bf18      	it	ne
 8006872:	2301      	movne	r3, #1
 8006874:	0692      	lsls	r2, r2, #26
 8006876:	d42d      	bmi.n	80068d4 <_printf_common+0xb4>
 8006878:	4649      	mov	r1, r9
 800687a:	4638      	mov	r0, r7
 800687c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006880:	47c0      	blx	r8
 8006882:	3001      	adds	r0, #1
 8006884:	d020      	beq.n	80068c8 <_printf_common+0xa8>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	68e5      	ldr	r5, [r4, #12]
 800688a:	f003 0306 	and.w	r3, r3, #6
 800688e:	2b04      	cmp	r3, #4
 8006890:	bf18      	it	ne
 8006892:	2500      	movne	r5, #0
 8006894:	6832      	ldr	r2, [r6, #0]
 8006896:	f04f 0600 	mov.w	r6, #0
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	bf08      	it	eq
 800689e:	1aad      	subeq	r5, r5, r2
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	bf08      	it	eq
 80068a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bfc4      	itt	gt
 80068ac:	1a9b      	subgt	r3, r3, r2
 80068ae:	18ed      	addgt	r5, r5, r3
 80068b0:	341a      	adds	r4, #26
 80068b2:	42b5      	cmp	r5, r6
 80068b4:	d11a      	bne.n	80068ec <_printf_common+0xcc>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e008      	b.n	80068cc <_printf_common+0xac>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4649      	mov	r1, r9
 80068c0:	4638      	mov	r0, r7
 80068c2:	47c0      	blx	r8
 80068c4:	3001      	adds	r0, #1
 80068c6:	d103      	bne.n	80068d0 <_printf_common+0xb0>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7c4      	b.n	800685e <_printf_common+0x3e>
 80068d4:	2030      	movs	r0, #48	; 0x30
 80068d6:	18e1      	adds	r1, r4, r3
 80068d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e2:	4422      	add	r2, r4
 80068e4:	3302      	adds	r3, #2
 80068e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ea:	e7c5      	b.n	8006878 <_printf_common+0x58>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4622      	mov	r2, r4
 80068f0:	4649      	mov	r1, r9
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c0      	blx	r8
 80068f6:	3001      	adds	r0, #1
 80068f8:	d0e6      	beq.n	80068c8 <_printf_common+0xa8>
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7d9      	b.n	80068b2 <_printf_common+0x92>
	...

08006900 <_printf_i>:
 8006900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	460c      	mov	r4, r1
 8006906:	7e27      	ldrb	r7, [r4, #24]
 8006908:	4691      	mov	r9, r2
 800690a:	2f78      	cmp	r7, #120	; 0x78
 800690c:	4680      	mov	r8, r0
 800690e:	469a      	mov	sl, r3
 8006910:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006916:	d807      	bhi.n	8006928 <_printf_i+0x28>
 8006918:	2f62      	cmp	r7, #98	; 0x62
 800691a:	d80a      	bhi.n	8006932 <_printf_i+0x32>
 800691c:	2f00      	cmp	r7, #0
 800691e:	f000 80d9 	beq.w	8006ad4 <_printf_i+0x1d4>
 8006922:	2f58      	cmp	r7, #88	; 0x58
 8006924:	f000 80a4 	beq.w	8006a70 <_printf_i+0x170>
 8006928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800692c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006930:	e03a      	b.n	80069a8 <_printf_i+0xa8>
 8006932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006936:	2b15      	cmp	r3, #21
 8006938:	d8f6      	bhi.n	8006928 <_printf_i+0x28>
 800693a:	a001      	add	r0, pc, #4	; (adr r0, 8006940 <_printf_i+0x40>)
 800693c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006940:	08006999 	.word	0x08006999
 8006944:	080069ad 	.word	0x080069ad
 8006948:	08006929 	.word	0x08006929
 800694c:	08006929 	.word	0x08006929
 8006950:	08006929 	.word	0x08006929
 8006954:	08006929 	.word	0x08006929
 8006958:	080069ad 	.word	0x080069ad
 800695c:	08006929 	.word	0x08006929
 8006960:	08006929 	.word	0x08006929
 8006964:	08006929 	.word	0x08006929
 8006968:	08006929 	.word	0x08006929
 800696c:	08006abb 	.word	0x08006abb
 8006970:	080069dd 	.word	0x080069dd
 8006974:	08006a9d 	.word	0x08006a9d
 8006978:	08006929 	.word	0x08006929
 800697c:	08006929 	.word	0x08006929
 8006980:	08006add 	.word	0x08006add
 8006984:	08006929 	.word	0x08006929
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006929 	.word	0x08006929
 8006990:	08006929 	.word	0x08006929
 8006994:	08006aa5 	.word	0x08006aa5
 8006998:	680b      	ldr	r3, [r1, #0]
 800699a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800699e:	1d1a      	adds	r2, r3, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	600a      	str	r2, [r1, #0]
 80069a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0a4      	b.n	8006af6 <_printf_i+0x1f6>
 80069ac:	6825      	ldr	r5, [r4, #0]
 80069ae:	6808      	ldr	r0, [r1, #0]
 80069b0:	062e      	lsls	r6, r5, #24
 80069b2:	f100 0304 	add.w	r3, r0, #4
 80069b6:	d50a      	bpl.n	80069ce <_printf_i+0xce>
 80069b8:	6805      	ldr	r5, [r0, #0]
 80069ba:	600b      	str	r3, [r1, #0]
 80069bc:	2d00      	cmp	r5, #0
 80069be:	da03      	bge.n	80069c8 <_printf_i+0xc8>
 80069c0:	232d      	movs	r3, #45	; 0x2d
 80069c2:	426d      	negs	r5, r5
 80069c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c8:	230a      	movs	r3, #10
 80069ca:	485e      	ldr	r0, [pc, #376]	; (8006b44 <_printf_i+0x244>)
 80069cc:	e019      	b.n	8006a02 <_printf_i+0x102>
 80069ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069d2:	6805      	ldr	r5, [r0, #0]
 80069d4:	600b      	str	r3, [r1, #0]
 80069d6:	bf18      	it	ne
 80069d8:	b22d      	sxthne	r5, r5
 80069da:	e7ef      	b.n	80069bc <_printf_i+0xbc>
 80069dc:	680b      	ldr	r3, [r1, #0]
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	1d18      	adds	r0, r3, #4
 80069e2:	6008      	str	r0, [r1, #0]
 80069e4:	0628      	lsls	r0, r5, #24
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0xec>
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	e002      	b.n	80069f2 <_printf_i+0xf2>
 80069ec:	0669      	lsls	r1, r5, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0xe8>
 80069f0:	881d      	ldrh	r5, [r3, #0]
 80069f2:	2f6f      	cmp	r7, #111	; 0x6f
 80069f4:	bf0c      	ite	eq
 80069f6:	2308      	moveq	r3, #8
 80069f8:	230a      	movne	r3, #10
 80069fa:	4852      	ldr	r0, [pc, #328]	; (8006b44 <_printf_i+0x244>)
 80069fc:	2100      	movs	r1, #0
 80069fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a02:	6866      	ldr	r6, [r4, #4]
 8006a04:	2e00      	cmp	r6, #0
 8006a06:	bfa8      	it	ge
 8006a08:	6821      	ldrge	r1, [r4, #0]
 8006a0a:	60a6      	str	r6, [r4, #8]
 8006a0c:	bfa4      	itt	ge
 8006a0e:	f021 0104 	bicge.w	r1, r1, #4
 8006a12:	6021      	strge	r1, [r4, #0]
 8006a14:	b90d      	cbnz	r5, 8006a1a <_printf_i+0x11a>
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	d04d      	beq.n	8006ab6 <_printf_i+0x1b6>
 8006a1a:	4616      	mov	r6, r2
 8006a1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a20:	fb03 5711 	mls	r7, r3, r1, r5
 8006a24:	5dc7      	ldrb	r7, [r0, r7]
 8006a26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a2a:	462f      	mov	r7, r5
 8006a2c:	42bb      	cmp	r3, r7
 8006a2e:	460d      	mov	r5, r1
 8006a30:	d9f4      	bls.n	8006a1c <_printf_i+0x11c>
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d10b      	bne.n	8006a4e <_printf_i+0x14e>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	07df      	lsls	r7, r3, #31
 8006a3a:	d508      	bpl.n	8006a4e <_printf_i+0x14e>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	6861      	ldr	r1, [r4, #4]
 8006a40:	4299      	cmp	r1, r3
 8006a42:	bfde      	ittt	le
 8006a44:	2330      	movle	r3, #48	; 0x30
 8006a46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a4e:	1b92      	subs	r2, r2, r6
 8006a50:	6122      	str	r2, [r4, #16]
 8006a52:	464b      	mov	r3, r9
 8006a54:	4621      	mov	r1, r4
 8006a56:	4640      	mov	r0, r8
 8006a58:	f8cd a000 	str.w	sl, [sp]
 8006a5c:	aa03      	add	r2, sp, #12
 8006a5e:	f7ff fedf 	bl	8006820 <_printf_common>
 8006a62:	3001      	adds	r0, #1
 8006a64:	d14c      	bne.n	8006b00 <_printf_i+0x200>
 8006a66:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6a:	b004      	add	sp, #16
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	4834      	ldr	r0, [pc, #208]	; (8006b44 <_printf_i+0x244>)
 8006a72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a76:	680e      	ldr	r6, [r1, #0]
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a7e:	061f      	lsls	r7, r3, #24
 8006a80:	600e      	str	r6, [r1, #0]
 8006a82:	d514      	bpl.n	8006aae <_printf_i+0x1ae>
 8006a84:	07d9      	lsls	r1, r3, #31
 8006a86:	bf44      	itt	mi
 8006a88:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8c:	6023      	strmi	r3, [r4, #0]
 8006a8e:	b91d      	cbnz	r5, 8006a98 <_printf_i+0x198>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	f023 0320 	bic.w	r3, r3, #32
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	2310      	movs	r3, #16
 8006a9a:	e7af      	b.n	80069fc <_printf_i+0xfc>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	f043 0320 	orr.w	r3, r3, #32
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	2378      	movs	r3, #120	; 0x78
 8006aa6:	4828      	ldr	r0, [pc, #160]	; (8006b48 <_printf_i+0x248>)
 8006aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aac:	e7e3      	b.n	8006a76 <_printf_i+0x176>
 8006aae:	065e      	lsls	r6, r3, #25
 8006ab0:	bf48      	it	mi
 8006ab2:	b2ad      	uxthmi	r5, r5
 8006ab4:	e7e6      	b.n	8006a84 <_printf_i+0x184>
 8006ab6:	4616      	mov	r6, r2
 8006ab8:	e7bb      	b.n	8006a32 <_printf_i+0x132>
 8006aba:	680b      	ldr	r3, [r1, #0]
 8006abc:	6826      	ldr	r6, [r4, #0]
 8006abe:	1d1d      	adds	r5, r3, #4
 8006ac0:	6960      	ldr	r0, [r4, #20]
 8006ac2:	600d      	str	r5, [r1, #0]
 8006ac4:	0635      	lsls	r5, r6, #24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	d501      	bpl.n	8006ace <_printf_i+0x1ce>
 8006aca:	6018      	str	r0, [r3, #0]
 8006acc:	e002      	b.n	8006ad4 <_printf_i+0x1d4>
 8006ace:	0671      	lsls	r1, r6, #25
 8006ad0:	d5fb      	bpl.n	8006aca <_printf_i+0x1ca>
 8006ad2:	8018      	strh	r0, [r3, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	e7ba      	b.n	8006a52 <_printf_i+0x152>
 8006adc:	680b      	ldr	r3, [r1, #0]
 8006ade:	1d1a      	adds	r2, r3, #4
 8006ae0:	600a      	str	r2, [r1, #0]
 8006ae2:	681e      	ldr	r6, [r3, #0]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	6862      	ldr	r2, [r4, #4]
 8006aea:	f000 ff13 	bl	8007914 <memchr>
 8006aee:	b108      	cbz	r0, 8006af4 <_printf_i+0x1f4>
 8006af0:	1b80      	subs	r0, r0, r6
 8006af2:	6060      	str	r0, [r4, #4]
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	2300      	movs	r3, #0
 8006afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006afe:	e7a8      	b.n	8006a52 <_printf_i+0x152>
 8006b00:	4632      	mov	r2, r6
 8006b02:	4649      	mov	r1, r9
 8006b04:	4640      	mov	r0, r8
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	47d0      	blx	sl
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d0ab      	beq.n	8006a66 <_printf_i+0x166>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	079b      	lsls	r3, r3, #30
 8006b12:	d413      	bmi.n	8006b3c <_printf_i+0x23c>
 8006b14:	68e0      	ldr	r0, [r4, #12]
 8006b16:	9b03      	ldr	r3, [sp, #12]
 8006b18:	4298      	cmp	r0, r3
 8006b1a:	bfb8      	it	lt
 8006b1c:	4618      	movlt	r0, r3
 8006b1e:	e7a4      	b.n	8006a6a <_printf_i+0x16a>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4632      	mov	r2, r6
 8006b24:	4649      	mov	r1, r9
 8006b26:	4640      	mov	r0, r8
 8006b28:	47d0      	blx	sl
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d09b      	beq.n	8006a66 <_printf_i+0x166>
 8006b2e:	3501      	adds	r5, #1
 8006b30:	68e3      	ldr	r3, [r4, #12]
 8006b32:	9903      	ldr	r1, [sp, #12]
 8006b34:	1a5b      	subs	r3, r3, r1
 8006b36:	42ab      	cmp	r3, r5
 8006b38:	dcf2      	bgt.n	8006b20 <_printf_i+0x220>
 8006b3a:	e7eb      	b.n	8006b14 <_printf_i+0x214>
 8006b3c:	2500      	movs	r5, #0
 8006b3e:	f104 0619 	add.w	r6, r4, #25
 8006b42:	e7f5      	b.n	8006b30 <_printf_i+0x230>
 8006b44:	0800bf7a 	.word	0x0800bf7a
 8006b48:	0800bf8b 	.word	0x0800bf8b

08006b4c <siprintf>:
 8006b4c:	b40e      	push	{r1, r2, r3}
 8006b4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b52:	b500      	push	{lr}
 8006b54:	b09c      	sub	sp, #112	; 0x70
 8006b56:	ab1d      	add	r3, sp, #116	; 0x74
 8006b58:	9002      	str	r0, [sp, #8]
 8006b5a:	9006      	str	r0, [sp, #24]
 8006b5c:	9107      	str	r1, [sp, #28]
 8006b5e:	9104      	str	r1, [sp, #16]
 8006b60:	4808      	ldr	r0, [pc, #32]	; (8006b84 <siprintf+0x38>)
 8006b62:	4909      	ldr	r1, [pc, #36]	; (8006b88 <siprintf+0x3c>)
 8006b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b68:	9105      	str	r1, [sp, #20]
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	a902      	add	r1, sp, #8
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	f001 fb7e 	bl	8008270 <_svfiprintf_r>
 8006b74:	2200      	movs	r2, #0
 8006b76:	9b02      	ldr	r3, [sp, #8]
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	b01c      	add	sp, #112	; 0x70
 8006b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b80:	b003      	add	sp, #12
 8006b82:	4770      	bx	lr
 8006b84:	2000000c 	.word	0x2000000c
 8006b88:	ffff0208 	.word	0xffff0208

08006b8c <_vsniprintf_r>:
 8006b8c:	b530      	push	{r4, r5, lr}
 8006b8e:	1e14      	subs	r4, r2, #0
 8006b90:	4605      	mov	r5, r0
 8006b92:	b09b      	sub	sp, #108	; 0x6c
 8006b94:	4618      	mov	r0, r3
 8006b96:	da05      	bge.n	8006ba4 <_vsniprintf_r+0x18>
 8006b98:	238b      	movs	r3, #139	; 0x8b
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	b01b      	add	sp, #108	; 0x6c
 8006ba2:	bd30      	pop	{r4, r5, pc}
 8006ba4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ba8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006bac:	bf0c      	ite	eq
 8006bae:	4623      	moveq	r3, r4
 8006bb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bb4:	9302      	str	r3, [sp, #8]
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	9100      	str	r1, [sp, #0]
 8006bc0:	9104      	str	r1, [sp, #16]
 8006bc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006bc6:	4669      	mov	r1, sp
 8006bc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f001 fb50 	bl	8008270 <_svfiprintf_r>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	bfbc      	itt	lt
 8006bd4:	238b      	movlt	r3, #139	; 0x8b
 8006bd6:	602b      	strlt	r3, [r5, #0]
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	d0e1      	beq.n	8006ba0 <_vsniprintf_r+0x14>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e7dd      	b.n	8006ba0 <_vsniprintf_r+0x14>

08006be4 <vsniprintf>:
 8006be4:	b507      	push	{r0, r1, r2, lr}
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	460a      	mov	r2, r1
 8006bec:	4601      	mov	r1, r0
 8006bee:	4803      	ldr	r0, [pc, #12]	; (8006bfc <vsniprintf+0x18>)
 8006bf0:	6800      	ldr	r0, [r0, #0]
 8006bf2:	f7ff ffcb 	bl	8006b8c <_vsniprintf_r>
 8006bf6:	b003      	add	sp, #12
 8006bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bfc:	2000000c 	.word	0x2000000c

08006c00 <quorem>:
 8006c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	6903      	ldr	r3, [r0, #16]
 8006c06:	690c      	ldr	r4, [r1, #16]
 8006c08:	4607      	mov	r7, r0
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	f2c0 8083 	blt.w	8006d16 <quorem+0x116>
 8006c10:	3c01      	subs	r4, #1
 8006c12:	f100 0514 	add.w	r5, r0, #20
 8006c16:	f101 0814 	add.w	r8, r1, #20
 8006c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c38:	d332      	bcc.n	8006ca0 <quorem+0xa0>
 8006c3a:	f04f 0e00 	mov.w	lr, #0
 8006c3e:	4640      	mov	r0, r8
 8006c40:	46ac      	mov	ip, r5
 8006c42:	46f2      	mov	sl, lr
 8006c44:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c48:	b293      	uxth	r3, r2
 8006c4a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c4e:	0c12      	lsrs	r2, r2, #16
 8006c50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c54:	fb06 e202 	mla	r2, r6, r2, lr
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	ebaa 0303 	sub.w	r3, sl, r3
 8006c5e:	f8dc a000 	ldr.w	sl, [ip]
 8006c62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c66:	fa1f fa8a 	uxth.w	sl, sl
 8006c6a:	4453      	add	r3, sl
 8006c6c:	fa1f fa82 	uxth.w	sl, r2
 8006c70:	f8dc 2000 	ldr.w	r2, [ip]
 8006c74:	4581      	cmp	r9, r0
 8006c76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c88:	f84c 3b04 	str.w	r3, [ip], #4
 8006c8c:	d2da      	bcs.n	8006c44 <quorem+0x44>
 8006c8e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c92:	b92b      	cbnz	r3, 8006ca0 <quorem+0xa0>
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	3b04      	subs	r3, #4
 8006c98:	429d      	cmp	r5, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	d32f      	bcc.n	8006cfe <quorem+0xfe>
 8006c9e:	613c      	str	r4, [r7, #16]
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f001 f8cd 	bl	8007e40 <__mcmp>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	db25      	blt.n	8006cf6 <quorem+0xf6>
 8006caa:	4628      	mov	r0, r5
 8006cac:	f04f 0c00 	mov.w	ip, #0
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	f858 1b04 	ldr.w	r1, [r8], #4
 8006cb6:	f8d0 e000 	ldr.w	lr, [r0]
 8006cba:	b28b      	uxth	r3, r1
 8006cbc:	ebac 0303 	sub.w	r3, ip, r3
 8006cc0:	fa1f f28e 	uxth.w	r2, lr
 8006cc4:	4413      	add	r3, r2
 8006cc6:	0c0a      	lsrs	r2, r1, #16
 8006cc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cd6:	45c1      	cmp	r9, r8
 8006cd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cdc:	f840 3b04 	str.w	r3, [r0], #4
 8006ce0:	d2e7      	bcs.n	8006cb2 <quorem+0xb2>
 8006ce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cea:	b922      	cbnz	r2, 8006cf6 <quorem+0xf6>
 8006cec:	3b04      	subs	r3, #4
 8006cee:	429d      	cmp	r5, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	d30a      	bcc.n	8006d0a <quorem+0x10a>
 8006cf4:	613c      	str	r4, [r7, #16]
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	b003      	add	sp, #12
 8006cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	2a00      	cmp	r2, #0
 8006d04:	d1cb      	bne.n	8006c9e <quorem+0x9e>
 8006d06:	3c01      	subs	r4, #1
 8006d08:	e7c6      	b.n	8006c98 <quorem+0x98>
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	3b04      	subs	r3, #4
 8006d0e:	2a00      	cmp	r2, #0
 8006d10:	d1f0      	bne.n	8006cf4 <quorem+0xf4>
 8006d12:	3c01      	subs	r4, #1
 8006d14:	e7eb      	b.n	8006cee <quorem+0xee>
 8006d16:	2000      	movs	r0, #0
 8006d18:	e7ee      	b.n	8006cf8 <quorem+0xf8>
 8006d1a:	0000      	movs	r0, r0
 8006d1c:	0000      	movs	r0, r0
	...

08006d20 <_dtoa_r>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	4616      	mov	r6, r2
 8006d26:	461f      	mov	r7, r3
 8006d28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d2a:	b099      	sub	sp, #100	; 0x64
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d36:	b974      	cbnz	r4, 8006d56 <_dtoa_r+0x36>
 8006d38:	2010      	movs	r0, #16
 8006d3a:	f000 fde3 	bl	8007904 <malloc>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6268      	str	r0, [r5, #36]	; 0x24
 8006d42:	b920      	cbnz	r0, 8006d4e <_dtoa_r+0x2e>
 8006d44:	21ea      	movs	r1, #234	; 0xea
 8006d46:	4bae      	ldr	r3, [pc, #696]	; (8007000 <_dtoa_r+0x2e0>)
 8006d48:	48ae      	ldr	r0, [pc, #696]	; (8007004 <_dtoa_r+0x2e4>)
 8006d4a:	f001 fba1 	bl	8008490 <__assert_func>
 8006d4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d52:	6004      	str	r4, [r0, #0]
 8006d54:	60c4      	str	r4, [r0, #12]
 8006d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	b151      	cbz	r1, 8006d72 <_dtoa_r+0x52>
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4093      	lsls	r3, r2
 8006d62:	604a      	str	r2, [r1, #4]
 8006d64:	608b      	str	r3, [r1, #8]
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 fe30 	bl	80079cc <_Bfree>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	1e3b      	subs	r3, r7, #0
 8006d74:	bfaf      	iteee	ge
 8006d76:	2300      	movge	r3, #0
 8006d78:	2201      	movlt	r2, #1
 8006d7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d7e:	9305      	strlt	r3, [sp, #20]
 8006d80:	bfa8      	it	ge
 8006d82:	f8c8 3000 	strge.w	r3, [r8]
 8006d86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006d8a:	4b9f      	ldr	r3, [pc, #636]	; (8007008 <_dtoa_r+0x2e8>)
 8006d8c:	bfb8      	it	lt
 8006d8e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d92:	ea33 0309 	bics.w	r3, r3, r9
 8006d96:	d119      	bne.n	8006dcc <_dtoa_r+0xac>
 8006d98:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006da4:	4333      	orrs	r3, r6
 8006da6:	f000 8580 	beq.w	80078aa <_dtoa_r+0xb8a>
 8006daa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dac:	b953      	cbnz	r3, 8006dc4 <_dtoa_r+0xa4>
 8006dae:	4b97      	ldr	r3, [pc, #604]	; (800700c <_dtoa_r+0x2ec>)
 8006db0:	e022      	b.n	8006df8 <_dtoa_r+0xd8>
 8006db2:	4b97      	ldr	r3, [pc, #604]	; (8007010 <_dtoa_r+0x2f0>)
 8006db4:	9308      	str	r3, [sp, #32]
 8006db6:	3308      	adds	r3, #8
 8006db8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	9808      	ldr	r0, [sp, #32]
 8006dbe:	b019      	add	sp, #100	; 0x64
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	4b91      	ldr	r3, [pc, #580]	; (800700c <_dtoa_r+0x2ec>)
 8006dc6:	9308      	str	r3, [sp, #32]
 8006dc8:	3303      	adds	r3, #3
 8006dca:	e7f5      	b.n	8006db8 <_dtoa_r+0x98>
 8006dcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006dd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f7f9 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8006de0:	4680      	mov	r8, r0
 8006de2:	b158      	cbz	r0, 8006dfc <_dtoa_r+0xdc>
 8006de4:	2301      	movs	r3, #1
 8006de6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8559 	beq.w	80078a4 <_dtoa_r+0xb84>
 8006df2:	4888      	ldr	r0, [pc, #544]	; (8007014 <_dtoa_r+0x2f4>)
 8006df4:	6018      	str	r0, [r3, #0]
 8006df6:	1e43      	subs	r3, r0, #1
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	e7df      	b.n	8006dbc <_dtoa_r+0x9c>
 8006dfc:	ab16      	add	r3, sp, #88	; 0x58
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	ab17      	add	r3, sp, #92	; 0x5c
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4628      	mov	r0, r5
 8006e06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e0a:	f001 f8c5 	bl	8007f98 <__d2b>
 8006e0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e12:	4682      	mov	sl, r0
 8006e14:	2c00      	cmp	r4, #0
 8006e16:	d07e      	beq.n	8006f16 <_dtoa_r+0x1f6>
 8006e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006e2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006e2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e32:	2200      	movs	r2, #0
 8006e34:	4b78      	ldr	r3, [pc, #480]	; (8007018 <_dtoa_r+0x2f8>)
 8006e36:	f7f9 f997 	bl	8000168 <__aeabi_dsub>
 8006e3a:	a36b      	add	r3, pc, #428	; (adr r3, 8006fe8 <_dtoa_r+0x2c8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fb4a 	bl	80004d8 <__aeabi_dmul>
 8006e44:	a36a      	add	r3, pc, #424	; (adr r3, 8006ff0 <_dtoa_r+0x2d0>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 f98f 	bl	800016c <__adddf3>
 8006e4e:	4606      	mov	r6, r0
 8006e50:	4620      	mov	r0, r4
 8006e52:	460f      	mov	r7, r1
 8006e54:	f7f9 fad6 	bl	8000404 <__aeabi_i2d>
 8006e58:	a367      	add	r3, pc, #412	; (adr r3, 8006ff8 <_dtoa_r+0x2d8>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f7f9 fb3b 	bl	80004d8 <__aeabi_dmul>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4630      	mov	r0, r6
 8006e68:	4639      	mov	r1, r7
 8006e6a:	f7f9 f97f 	bl	800016c <__adddf3>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	f7f9 fde1 	bl	8000a38 <__aeabi_d2iz>
 8006e76:	2200      	movs	r2, #0
 8006e78:	4681      	mov	r9, r0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7f9 fd9c 	bl	80009bc <__aeabi_dcmplt>
 8006e84:	b148      	cbz	r0, 8006e9a <_dtoa_r+0x17a>
 8006e86:	4648      	mov	r0, r9
 8006e88:	f7f9 fabc 	bl	8000404 <__aeabi_i2d>
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	f7f9 fd8a 	bl	80009a8 <__aeabi_dcmpeq>
 8006e94:	b908      	cbnz	r0, 8006e9a <_dtoa_r+0x17a>
 8006e96:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e9a:	f1b9 0f16 	cmp.w	r9, #22
 8006e9e:	d857      	bhi.n	8006f50 <_dtoa_r+0x230>
 8006ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ea4:	4b5d      	ldr	r3, [pc, #372]	; (800701c <_dtoa_r+0x2fc>)
 8006ea6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fd85 	bl	80009bc <__aeabi_dcmplt>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d04e      	beq.n	8006f54 <_dtoa_r+0x234>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ebe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ec0:	1b1c      	subs	r4, r3, r4
 8006ec2:	1e63      	subs	r3, r4, #1
 8006ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec6:	bf49      	itett	mi
 8006ec8:	f1c4 0301 	rsbmi	r3, r4, #1
 8006ecc:	2300      	movpl	r3, #0
 8006ece:	9306      	strmi	r3, [sp, #24]
 8006ed0:	2300      	movmi	r3, #0
 8006ed2:	bf54      	ite	pl
 8006ed4:	9306      	strpl	r3, [sp, #24]
 8006ed6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	db3c      	blt.n	8006f58 <_dtoa_r+0x238>
 8006ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ee4:	444b      	add	r3, r9
 8006ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee8:	2300      	movs	r3, #0
 8006eea:	930a      	str	r3, [sp, #40]	; 0x28
 8006eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d86c      	bhi.n	8006fcc <_dtoa_r+0x2ac>
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	bfc4      	itt	gt
 8006ef6:	3b04      	subgt	r3, #4
 8006ef8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006efc:	bfc8      	it	gt
 8006efe:	2400      	movgt	r4, #0
 8006f00:	f1a3 0302 	sub.w	r3, r3, #2
 8006f04:	bfd8      	it	le
 8006f06:	2401      	movle	r4, #1
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	f200 808b 	bhi.w	8007024 <_dtoa_r+0x304>
 8006f0e:	e8df f003 	tbb	[pc, r3]
 8006f12:	4f2d      	.short	0x4f2d
 8006f14:	5b4d      	.short	0x5b4d
 8006f16:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006f1a:	441c      	add	r4, r3
 8006f1c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	bfc3      	ittte	gt
 8006f24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f28:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006f2c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f30:	f1c3 0320 	rsble	r3, r3, #32
 8006f34:	bfc6      	itte	gt
 8006f36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f3a:	4318      	orrgt	r0, r3
 8006f3c:	fa06 f003 	lslle.w	r0, r6, r3
 8006f40:	f7f9 fa50 	bl	80003e4 <__aeabi_ui2d>
 8006f44:	2301      	movs	r3, #1
 8006f46:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006f4a:	3c01      	subs	r4, #1
 8006f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f4e:	e770      	b.n	8006e32 <_dtoa_r+0x112>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e7b3      	b.n	8006ebc <_dtoa_r+0x19c>
 8006f54:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f56:	e7b2      	b.n	8006ebe <_dtoa_r+0x19e>
 8006f58:	9b06      	ldr	r3, [sp, #24]
 8006f5a:	eba3 0309 	sub.w	r3, r3, r9
 8006f5e:	9306      	str	r3, [sp, #24]
 8006f60:	f1c9 0300 	rsb	r3, r9, #0
 8006f64:	930a      	str	r3, [sp, #40]	; 0x28
 8006f66:	2300      	movs	r3, #0
 8006f68:	930e      	str	r3, [sp, #56]	; 0x38
 8006f6a:	e7bf      	b.n	8006eec <_dtoa_r+0x1cc>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dc59      	bgt.n	800702a <_dtoa_r+0x30a>
 8006f76:	f04f 0b01 	mov.w	fp, #1
 8006f7a:	465b      	mov	r3, fp
 8006f7c:	f8cd b008 	str.w	fp, [sp, #8]
 8006f80:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006f84:	2200      	movs	r2, #0
 8006f86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006f88:	6042      	str	r2, [r0, #4]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	f102 0614 	add.w	r6, r2, #20
 8006f90:	429e      	cmp	r6, r3
 8006f92:	6841      	ldr	r1, [r0, #4]
 8006f94:	d94f      	bls.n	8007036 <_dtoa_r+0x316>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 fcd8 	bl	800794c <_Balloc>
 8006f9c:	9008      	str	r0, [sp, #32]
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d14d      	bne.n	800703e <_dtoa_r+0x31e>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <_dtoa_r+0x300>)
 8006faa:	e6cd      	b.n	8006d48 <_dtoa_r+0x28>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e7de      	b.n	8006f6e <_dtoa_r+0x24e>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fb6:	eb09 0b03 	add.w	fp, r9, r3
 8006fba:	f10b 0301 	add.w	r3, fp, #1
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	bfb8      	it	lt
 8006fc4:	2301      	movlt	r3, #1
 8006fc6:	e7dd      	b.n	8006f84 <_dtoa_r+0x264>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e7f2      	b.n	8006fb2 <_dtoa_r+0x292>
 8006fcc:	2401      	movs	r4, #1
 8006fce:	2300      	movs	r3, #0
 8006fd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006fd2:	9322      	str	r3, [sp, #136]	; 0x88
 8006fd4:	f04f 3bff 	mov.w	fp, #4294967295
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2312      	movs	r3, #18
 8006fdc:	f8cd b008 	str.w	fp, [sp, #8]
 8006fe0:	9223      	str	r2, [sp, #140]	; 0x8c
 8006fe2:	e7cf      	b.n	8006f84 <_dtoa_r+0x264>
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	636f4361 	.word	0x636f4361
 8006fec:	3fd287a7 	.word	0x3fd287a7
 8006ff0:	8b60c8b3 	.word	0x8b60c8b3
 8006ff4:	3fc68a28 	.word	0x3fc68a28
 8006ff8:	509f79fb 	.word	0x509f79fb
 8006ffc:	3fd34413 	.word	0x3fd34413
 8007000:	0800bfa9 	.word	0x0800bfa9
 8007004:	0800bfc0 	.word	0x0800bfc0
 8007008:	7ff00000 	.word	0x7ff00000
 800700c:	0800bfa5 	.word	0x0800bfa5
 8007010:	0800bf9c 	.word	0x0800bf9c
 8007014:	0800bf79 	.word	0x0800bf79
 8007018:	3ff80000 	.word	0x3ff80000
 800701c:	0800c0b8 	.word	0x0800c0b8
 8007020:	0800c01f 	.word	0x0800c01f
 8007024:	2301      	movs	r3, #1
 8007026:	930b      	str	r3, [sp, #44]	; 0x2c
 8007028:	e7d4      	b.n	8006fd4 <_dtoa_r+0x2b4>
 800702a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800702e:	465b      	mov	r3, fp
 8007030:	f8cd b008 	str.w	fp, [sp, #8]
 8007034:	e7a6      	b.n	8006f84 <_dtoa_r+0x264>
 8007036:	3101      	adds	r1, #1
 8007038:	6041      	str	r1, [r0, #4]
 800703a:	0052      	lsls	r2, r2, #1
 800703c:	e7a6      	b.n	8006f8c <_dtoa_r+0x26c>
 800703e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007040:	9a08      	ldr	r2, [sp, #32]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	2b0e      	cmp	r3, #14
 8007048:	f200 80a8 	bhi.w	800719c <_dtoa_r+0x47c>
 800704c:	2c00      	cmp	r4, #0
 800704e:	f000 80a5 	beq.w	800719c <_dtoa_r+0x47c>
 8007052:	f1b9 0f00 	cmp.w	r9, #0
 8007056:	dd34      	ble.n	80070c2 <_dtoa_r+0x3a2>
 8007058:	4a9a      	ldr	r2, [pc, #616]	; (80072c4 <_dtoa_r+0x5a4>)
 800705a:	f009 030f 	and.w	r3, r9, #15
 800705e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007062:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007066:	e9d3 3400 	ldrd	r3, r4, [r3]
 800706a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800706e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007072:	d016      	beq.n	80070a2 <_dtoa_r+0x382>
 8007074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007078:	4b93      	ldr	r3, [pc, #588]	; (80072c8 <_dtoa_r+0x5a8>)
 800707a:	2703      	movs	r7, #3
 800707c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007080:	f7f9 fb54 	bl	800072c <__aeabi_ddiv>
 8007084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007088:	f004 040f 	and.w	r4, r4, #15
 800708c:	4e8e      	ldr	r6, [pc, #568]	; (80072c8 <_dtoa_r+0x5a8>)
 800708e:	b954      	cbnz	r4, 80070a6 <_dtoa_r+0x386>
 8007090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007098:	f7f9 fb48 	bl	800072c <__aeabi_ddiv>
 800709c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070a0:	e029      	b.n	80070f6 <_dtoa_r+0x3d6>
 80070a2:	2702      	movs	r7, #2
 80070a4:	e7f2      	b.n	800708c <_dtoa_r+0x36c>
 80070a6:	07e1      	lsls	r1, r4, #31
 80070a8:	d508      	bpl.n	80070bc <_dtoa_r+0x39c>
 80070aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070b2:	f7f9 fa11 	bl	80004d8 <__aeabi_dmul>
 80070b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070ba:	3701      	adds	r7, #1
 80070bc:	1064      	asrs	r4, r4, #1
 80070be:	3608      	adds	r6, #8
 80070c0:	e7e5      	b.n	800708e <_dtoa_r+0x36e>
 80070c2:	f000 80a5 	beq.w	8007210 <_dtoa_r+0x4f0>
 80070c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070ca:	f1c9 0400 	rsb	r4, r9, #0
 80070ce:	4b7d      	ldr	r3, [pc, #500]	; (80072c4 <_dtoa_r+0x5a4>)
 80070d0:	f004 020f 	and.w	r2, r4, #15
 80070d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 f9fc 	bl	80004d8 <__aeabi_dmul>
 80070e0:	2702      	movs	r7, #2
 80070e2:	2300      	movs	r3, #0
 80070e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070e8:	4e77      	ldr	r6, [pc, #476]	; (80072c8 <_dtoa_r+0x5a8>)
 80070ea:	1124      	asrs	r4, r4, #4
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	f040 8084 	bne.w	80071fa <_dtoa_r+0x4da>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1d2      	bne.n	800709c <_dtoa_r+0x37c>
 80070f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 808b 	beq.w	8007214 <_dtoa_r+0x4f4>
 80070fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007102:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800710a:	2200      	movs	r2, #0
 800710c:	4b6f      	ldr	r3, [pc, #444]	; (80072cc <_dtoa_r+0x5ac>)
 800710e:	f7f9 fc55 	bl	80009bc <__aeabi_dcmplt>
 8007112:	2800      	cmp	r0, #0
 8007114:	d07e      	beq.n	8007214 <_dtoa_r+0x4f4>
 8007116:	9b02      	ldr	r3, [sp, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d07b      	beq.n	8007214 <_dtoa_r+0x4f4>
 800711c:	f1bb 0f00 	cmp.w	fp, #0
 8007120:	dd38      	ble.n	8007194 <_dtoa_r+0x474>
 8007122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007126:	2200      	movs	r2, #0
 8007128:	4b69      	ldr	r3, [pc, #420]	; (80072d0 <_dtoa_r+0x5b0>)
 800712a:	f7f9 f9d5 	bl	80004d8 <__aeabi_dmul>
 800712e:	465c      	mov	r4, fp
 8007130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007134:	f109 38ff 	add.w	r8, r9, #4294967295
 8007138:	3701      	adds	r7, #1
 800713a:	4638      	mov	r0, r7
 800713c:	f7f9 f962 	bl	8000404 <__aeabi_i2d>
 8007140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007144:	f7f9 f9c8 	bl	80004d8 <__aeabi_dmul>
 8007148:	2200      	movs	r2, #0
 800714a:	4b62      	ldr	r3, [pc, #392]	; (80072d4 <_dtoa_r+0x5b4>)
 800714c:	f7f9 f80e 	bl	800016c <__adddf3>
 8007150:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007154:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007158:	9611      	str	r6, [sp, #68]	; 0x44
 800715a:	2c00      	cmp	r4, #0
 800715c:	d15d      	bne.n	800721a <_dtoa_r+0x4fa>
 800715e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007162:	2200      	movs	r2, #0
 8007164:	4b5c      	ldr	r3, [pc, #368]	; (80072d8 <_dtoa_r+0x5b8>)
 8007166:	f7f8 ffff 	bl	8000168 <__aeabi_dsub>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007172:	4633      	mov	r3, r6
 8007174:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007176:	f7f9 fc3f 	bl	80009f8 <__aeabi_dcmpgt>
 800717a:	2800      	cmp	r0, #0
 800717c:	f040 829e 	bne.w	80076bc <_dtoa_r+0x99c>
 8007180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007186:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800718a:	f7f9 fc17 	bl	80009bc <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f040 8292 	bne.w	80076b8 <_dtoa_r+0x998>
 8007194:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007198:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800719c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f2c0 8153 	blt.w	800744a <_dtoa_r+0x72a>
 80071a4:	f1b9 0f0e 	cmp.w	r9, #14
 80071a8:	f300 814f 	bgt.w	800744a <_dtoa_r+0x72a>
 80071ac:	4b45      	ldr	r3, [pc, #276]	; (80072c4 <_dtoa_r+0x5a4>)
 80071ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80071b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80071ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f280 80db 	bge.w	8007378 <_dtoa_r+0x658>
 80071c2:	9b02      	ldr	r3, [sp, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f300 80d7 	bgt.w	8007378 <_dtoa_r+0x658>
 80071ca:	f040 8274 	bne.w	80076b6 <_dtoa_r+0x996>
 80071ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071d2:	2200      	movs	r2, #0
 80071d4:	4b40      	ldr	r3, [pc, #256]	; (80072d8 <_dtoa_r+0x5b8>)
 80071d6:	f7f9 f97f 	bl	80004d8 <__aeabi_dmul>
 80071da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071de:	f7f9 fc01 	bl	80009e4 <__aeabi_dcmpge>
 80071e2:	9c02      	ldr	r4, [sp, #8]
 80071e4:	4626      	mov	r6, r4
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f040 824a 	bne.w	8007680 <_dtoa_r+0x960>
 80071ec:	2331      	movs	r3, #49	; 0x31
 80071ee:	9f08      	ldr	r7, [sp, #32]
 80071f0:	f109 0901 	add.w	r9, r9, #1
 80071f4:	f807 3b01 	strb.w	r3, [r7], #1
 80071f8:	e246      	b.n	8007688 <_dtoa_r+0x968>
 80071fa:	07e2      	lsls	r2, r4, #31
 80071fc:	d505      	bpl.n	800720a <_dtoa_r+0x4ea>
 80071fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007202:	f7f9 f969 	bl	80004d8 <__aeabi_dmul>
 8007206:	2301      	movs	r3, #1
 8007208:	3701      	adds	r7, #1
 800720a:	1064      	asrs	r4, r4, #1
 800720c:	3608      	adds	r6, #8
 800720e:	e76d      	b.n	80070ec <_dtoa_r+0x3cc>
 8007210:	2702      	movs	r7, #2
 8007212:	e770      	b.n	80070f6 <_dtoa_r+0x3d6>
 8007214:	46c8      	mov	r8, r9
 8007216:	9c02      	ldr	r4, [sp, #8]
 8007218:	e78f      	b.n	800713a <_dtoa_r+0x41a>
 800721a:	9908      	ldr	r1, [sp, #32]
 800721c:	4b29      	ldr	r3, [pc, #164]	; (80072c4 <_dtoa_r+0x5a4>)
 800721e:	4421      	add	r1, r4
 8007220:	9112      	str	r1, [sp, #72]	; 0x48
 8007222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007224:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007228:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800722c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007230:	2900      	cmp	r1, #0
 8007232:	d055      	beq.n	80072e0 <_dtoa_r+0x5c0>
 8007234:	2000      	movs	r0, #0
 8007236:	4929      	ldr	r1, [pc, #164]	; (80072dc <_dtoa_r+0x5bc>)
 8007238:	f7f9 fa78 	bl	800072c <__aeabi_ddiv>
 800723c:	463b      	mov	r3, r7
 800723e:	4632      	mov	r2, r6
 8007240:	f7f8 ff92 	bl	8000168 <__aeabi_dsub>
 8007244:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007248:	9f08      	ldr	r7, [sp, #32]
 800724a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800724e:	f7f9 fbf3 	bl	8000a38 <__aeabi_d2iz>
 8007252:	4604      	mov	r4, r0
 8007254:	f7f9 f8d6 	bl	8000404 <__aeabi_i2d>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007260:	f7f8 ff82 	bl	8000168 <__aeabi_dsub>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	3430      	adds	r4, #48	; 0x30
 800726a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800726e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007272:	f807 4b01 	strb.w	r4, [r7], #1
 8007276:	f7f9 fba1 	bl	80009bc <__aeabi_dcmplt>
 800727a:	2800      	cmp	r0, #0
 800727c:	d174      	bne.n	8007368 <_dtoa_r+0x648>
 800727e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007282:	2000      	movs	r0, #0
 8007284:	4911      	ldr	r1, [pc, #68]	; (80072cc <_dtoa_r+0x5ac>)
 8007286:	f7f8 ff6f 	bl	8000168 <__aeabi_dsub>
 800728a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800728e:	f7f9 fb95 	bl	80009bc <__aeabi_dcmplt>
 8007292:	2800      	cmp	r0, #0
 8007294:	f040 80b6 	bne.w	8007404 <_dtoa_r+0x6e4>
 8007298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800729a:	429f      	cmp	r7, r3
 800729c:	f43f af7a 	beq.w	8007194 <_dtoa_r+0x474>
 80072a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072a4:	2200      	movs	r2, #0
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <_dtoa_r+0x5b0>)
 80072a8:	f7f9 f916 	bl	80004d8 <__aeabi_dmul>
 80072ac:	2200      	movs	r2, #0
 80072ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b6:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <_dtoa_r+0x5b0>)
 80072b8:	f7f9 f90e 	bl	80004d8 <__aeabi_dmul>
 80072bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072c0:	e7c3      	b.n	800724a <_dtoa_r+0x52a>
 80072c2:	bf00      	nop
 80072c4:	0800c0b8 	.word	0x0800c0b8
 80072c8:	0800c090 	.word	0x0800c090
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	40240000 	.word	0x40240000
 80072d4:	401c0000 	.word	0x401c0000
 80072d8:	40140000 	.word	0x40140000
 80072dc:	3fe00000 	.word	0x3fe00000
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 f8f8 	bl	80004d8 <__aeabi_dmul>
 80072e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072ee:	9c08      	ldr	r4, [sp, #32]
 80072f0:	9314      	str	r3, [sp, #80]	; 0x50
 80072f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f6:	f7f9 fb9f 	bl	8000a38 <__aeabi_d2iz>
 80072fa:	9015      	str	r0, [sp, #84]	; 0x54
 80072fc:	f7f9 f882 	bl	8000404 <__aeabi_i2d>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007308:	f7f8 ff2e 	bl	8000168 <__aeabi_dsub>
 800730c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800730e:	4606      	mov	r6, r0
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	f804 3b01 	strb.w	r3, [r4], #1
 8007316:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007318:	460f      	mov	r7, r1
 800731a:	429c      	cmp	r4, r3
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	d124      	bne.n	800736c <_dtoa_r+0x64c>
 8007322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007326:	4bb3      	ldr	r3, [pc, #716]	; (80075f4 <_dtoa_r+0x8d4>)
 8007328:	f7f8 ff20 	bl	800016c <__adddf3>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8007338:	2800      	cmp	r0, #0
 800733a:	d162      	bne.n	8007402 <_dtoa_r+0x6e2>
 800733c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007340:	2000      	movs	r0, #0
 8007342:	49ac      	ldr	r1, [pc, #688]	; (80075f4 <_dtoa_r+0x8d4>)
 8007344:	f7f8 ff10 	bl	8000168 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4630      	mov	r0, r6
 800734e:	4639      	mov	r1, r7
 8007350:	f7f9 fb34 	bl	80009bc <__aeabi_dcmplt>
 8007354:	2800      	cmp	r0, #0
 8007356:	f43f af1d 	beq.w	8007194 <_dtoa_r+0x474>
 800735a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800735c:	1e7b      	subs	r3, r7, #1
 800735e:	9314      	str	r3, [sp, #80]	; 0x50
 8007360:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007364:	2b30      	cmp	r3, #48	; 0x30
 8007366:	d0f8      	beq.n	800735a <_dtoa_r+0x63a>
 8007368:	46c1      	mov	r9, r8
 800736a:	e03a      	b.n	80073e2 <_dtoa_r+0x6c2>
 800736c:	4ba2      	ldr	r3, [pc, #648]	; (80075f8 <_dtoa_r+0x8d8>)
 800736e:	f7f9 f8b3 	bl	80004d8 <__aeabi_dmul>
 8007372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007376:	e7bc      	b.n	80072f2 <_dtoa_r+0x5d2>
 8007378:	9f08      	ldr	r7, [sp, #32]
 800737a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800737e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007382:	f7f9 f9d3 	bl	800072c <__aeabi_ddiv>
 8007386:	f7f9 fb57 	bl	8000a38 <__aeabi_d2iz>
 800738a:	4604      	mov	r4, r0
 800738c:	f7f9 f83a 	bl	8000404 <__aeabi_i2d>
 8007390:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007394:	f7f9 f8a0 	bl	80004d8 <__aeabi_dmul>
 8007398:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800739c:	460b      	mov	r3, r1
 800739e:	4602      	mov	r2, r0
 80073a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073a4:	f7f8 fee0 	bl	8000168 <__aeabi_dsub>
 80073a8:	f807 6b01 	strb.w	r6, [r7], #1
 80073ac:	9e08      	ldr	r6, [sp, #32]
 80073ae:	9b02      	ldr	r3, [sp, #8]
 80073b0:	1bbe      	subs	r6, r7, r6
 80073b2:	42b3      	cmp	r3, r6
 80073b4:	d13a      	bne.n	800742c <_dtoa_r+0x70c>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	f7f8 fed7 	bl	800016c <__adddf3>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ca:	f7f9 fb15 	bl	80009f8 <__aeabi_dcmpgt>
 80073ce:	bb58      	cbnz	r0, 8007428 <_dtoa_r+0x708>
 80073d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d8:	f7f9 fae6 	bl	80009a8 <__aeabi_dcmpeq>
 80073dc:	b108      	cbz	r0, 80073e2 <_dtoa_r+0x6c2>
 80073de:	07e1      	lsls	r1, r4, #31
 80073e0:	d422      	bmi.n	8007428 <_dtoa_r+0x708>
 80073e2:	4628      	mov	r0, r5
 80073e4:	4651      	mov	r1, sl
 80073e6:	f000 faf1 	bl	80079cc <_Bfree>
 80073ea:	2300      	movs	r3, #0
 80073ec:	703b      	strb	r3, [r7, #0]
 80073ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80073f0:	f109 0001 	add.w	r0, r9, #1
 80073f4:	6018      	str	r0, [r3, #0]
 80073f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f43f acdf 	beq.w	8006dbc <_dtoa_r+0x9c>
 80073fe:	601f      	str	r7, [r3, #0]
 8007400:	e4dc      	b.n	8006dbc <_dtoa_r+0x9c>
 8007402:	4627      	mov	r7, r4
 8007404:	463b      	mov	r3, r7
 8007406:	461f      	mov	r7, r3
 8007408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800740c:	2a39      	cmp	r2, #57	; 0x39
 800740e:	d107      	bne.n	8007420 <_dtoa_r+0x700>
 8007410:	9a08      	ldr	r2, [sp, #32]
 8007412:	429a      	cmp	r2, r3
 8007414:	d1f7      	bne.n	8007406 <_dtoa_r+0x6e6>
 8007416:	2230      	movs	r2, #48	; 0x30
 8007418:	9908      	ldr	r1, [sp, #32]
 800741a:	f108 0801 	add.w	r8, r8, #1
 800741e:	700a      	strb	r2, [r1, #0]
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	3201      	adds	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e79f      	b.n	8007368 <_dtoa_r+0x648>
 8007428:	46c8      	mov	r8, r9
 800742a:	e7eb      	b.n	8007404 <_dtoa_r+0x6e4>
 800742c:	2200      	movs	r2, #0
 800742e:	4b72      	ldr	r3, [pc, #456]	; (80075f8 <_dtoa_r+0x8d8>)
 8007430:	f7f9 f852 	bl	80004d8 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	f7f9 fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8007444:	2800      	cmp	r0, #0
 8007446:	d098      	beq.n	800737a <_dtoa_r+0x65a>
 8007448:	e7cb      	b.n	80073e2 <_dtoa_r+0x6c2>
 800744a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800744c:	2a00      	cmp	r2, #0
 800744e:	f000 80cd 	beq.w	80075ec <_dtoa_r+0x8cc>
 8007452:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007454:	2a01      	cmp	r2, #1
 8007456:	f300 80af 	bgt.w	80075b8 <_dtoa_r+0x898>
 800745a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800745c:	2a00      	cmp	r2, #0
 800745e:	f000 80a7 	beq.w	80075b0 <_dtoa_r+0x890>
 8007462:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007466:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007468:	9f06      	ldr	r7, [sp, #24]
 800746a:	9a06      	ldr	r2, [sp, #24]
 800746c:	2101      	movs	r1, #1
 800746e:	441a      	add	r2, r3
 8007470:	9206      	str	r2, [sp, #24]
 8007472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007474:	4628      	mov	r0, r5
 8007476:	441a      	add	r2, r3
 8007478:	9209      	str	r2, [sp, #36]	; 0x24
 800747a:	f000 fb61 	bl	8007b40 <__i2b>
 800747e:	4606      	mov	r6, r0
 8007480:	2f00      	cmp	r7, #0
 8007482:	dd0c      	ble.n	800749e <_dtoa_r+0x77e>
 8007484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	dd09      	ble.n	800749e <_dtoa_r+0x77e>
 800748a:	42bb      	cmp	r3, r7
 800748c:	bfa8      	it	ge
 800748e:	463b      	movge	r3, r7
 8007490:	9a06      	ldr	r2, [sp, #24]
 8007492:	1aff      	subs	r7, r7, r3
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	9206      	str	r2, [sp, #24]
 8007498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	b1f3      	cbz	r3, 80074e0 <_dtoa_r+0x7c0>
 80074a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 80a9 	beq.w	80075fc <_dtoa_r+0x8dc>
 80074aa:	2c00      	cmp	r4, #0
 80074ac:	dd10      	ble.n	80074d0 <_dtoa_r+0x7b0>
 80074ae:	4631      	mov	r1, r6
 80074b0:	4622      	mov	r2, r4
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 fbfe 	bl	8007cb4 <__pow5mult>
 80074b8:	4652      	mov	r2, sl
 80074ba:	4601      	mov	r1, r0
 80074bc:	4606      	mov	r6, r0
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 fb54 	bl	8007b6c <__multiply>
 80074c4:	4680      	mov	r8, r0
 80074c6:	4651      	mov	r1, sl
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 fa7f 	bl	80079cc <_Bfree>
 80074ce:	46c2      	mov	sl, r8
 80074d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d2:	1b1a      	subs	r2, r3, r4
 80074d4:	d004      	beq.n	80074e0 <_dtoa_r+0x7c0>
 80074d6:	4651      	mov	r1, sl
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 fbeb 	bl	8007cb4 <__pow5mult>
 80074de:	4682      	mov	sl, r0
 80074e0:	2101      	movs	r1, #1
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 fb2c 	bl	8007b40 <__i2b>
 80074e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ea:	4604      	mov	r4, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f340 8087 	ble.w	8007600 <_dtoa_r+0x8e0>
 80074f2:	461a      	mov	r2, r3
 80074f4:	4601      	mov	r1, r0
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 fbdc 	bl	8007cb4 <__pow5mult>
 80074fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074fe:	4604      	mov	r4, r0
 8007500:	2b01      	cmp	r3, #1
 8007502:	f340 8080 	ble.w	8007606 <_dtoa_r+0x8e6>
 8007506:	f04f 0800 	mov.w	r8, #0
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007510:	6918      	ldr	r0, [r3, #16]
 8007512:	f000 fac7 	bl	8007aa4 <__hi0bits>
 8007516:	f1c0 0020 	rsb	r0, r0, #32
 800751a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751c:	4418      	add	r0, r3
 800751e:	f010 001f 	ands.w	r0, r0, #31
 8007522:	f000 8092 	beq.w	800764a <_dtoa_r+0x92a>
 8007526:	f1c0 0320 	rsb	r3, r0, #32
 800752a:	2b04      	cmp	r3, #4
 800752c:	f340 808a 	ble.w	8007644 <_dtoa_r+0x924>
 8007530:	f1c0 001c 	rsb	r0, r0, #28
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	4407      	add	r7, r0
 8007538:	4403      	add	r3, r0
 800753a:	9306      	str	r3, [sp, #24]
 800753c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753e:	4403      	add	r3, r0
 8007540:	9309      	str	r3, [sp, #36]	; 0x24
 8007542:	9b06      	ldr	r3, [sp, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dd05      	ble.n	8007554 <_dtoa_r+0x834>
 8007548:	4651      	mov	r1, sl
 800754a:	461a      	mov	r2, r3
 800754c:	4628      	mov	r0, r5
 800754e:	f000 fc0b 	bl	8007d68 <__lshift>
 8007552:	4682      	mov	sl, r0
 8007554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd05      	ble.n	8007566 <_dtoa_r+0x846>
 800755a:	4621      	mov	r1, r4
 800755c:	461a      	mov	r2, r3
 800755e:	4628      	mov	r0, r5
 8007560:	f000 fc02 	bl	8007d68 <__lshift>
 8007564:	4604      	mov	r4, r0
 8007566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d070      	beq.n	800764e <_dtoa_r+0x92e>
 800756c:	4621      	mov	r1, r4
 800756e:	4650      	mov	r0, sl
 8007570:	f000 fc66 	bl	8007e40 <__mcmp>
 8007574:	2800      	cmp	r0, #0
 8007576:	da6a      	bge.n	800764e <_dtoa_r+0x92e>
 8007578:	2300      	movs	r3, #0
 800757a:	4651      	mov	r1, sl
 800757c:	220a      	movs	r2, #10
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fa46 	bl	8007a10 <__multadd>
 8007584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007586:	4682      	mov	sl, r0
 8007588:	f109 39ff 	add.w	r9, r9, #4294967295
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8193 	beq.w	80078b8 <_dtoa_r+0xb98>
 8007592:	4631      	mov	r1, r6
 8007594:	2300      	movs	r3, #0
 8007596:	220a      	movs	r2, #10
 8007598:	4628      	mov	r0, r5
 800759a:	f000 fa39 	bl	8007a10 <__multadd>
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	4606      	mov	r6, r0
 80075a4:	f300 8093 	bgt.w	80076ce <_dtoa_r+0x9ae>
 80075a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	dc57      	bgt.n	800765e <_dtoa_r+0x93e>
 80075ae:	e08e      	b.n	80076ce <_dtoa_r+0x9ae>
 80075b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075b6:	e756      	b.n	8007466 <_dtoa_r+0x746>
 80075b8:	9b02      	ldr	r3, [sp, #8]
 80075ba:	1e5c      	subs	r4, r3, #1
 80075bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075be:	42a3      	cmp	r3, r4
 80075c0:	bfb7      	itett	lt
 80075c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80075c4:	1b1c      	subge	r4, r3, r4
 80075c6:	1ae2      	sublt	r2, r4, r3
 80075c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80075ca:	bfbe      	ittt	lt
 80075cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80075ce:	189b      	addlt	r3, r3, r2
 80075d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	bfb8      	it	lt
 80075d6:	2400      	movlt	r4, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfbb      	ittet	lt
 80075dc:	9b06      	ldrlt	r3, [sp, #24]
 80075de:	9a02      	ldrlt	r2, [sp, #8]
 80075e0:	9f06      	ldrge	r7, [sp, #24]
 80075e2:	1a9f      	sublt	r7, r3, r2
 80075e4:	bfac      	ite	ge
 80075e6:	9b02      	ldrge	r3, [sp, #8]
 80075e8:	2300      	movlt	r3, #0
 80075ea:	e73e      	b.n	800746a <_dtoa_r+0x74a>
 80075ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075ee:	9f06      	ldr	r7, [sp, #24]
 80075f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80075f2:	e745      	b.n	8007480 <_dtoa_r+0x760>
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075fe:	e76a      	b.n	80074d6 <_dtoa_r+0x7b6>
 8007600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007602:	2b01      	cmp	r3, #1
 8007604:	dc19      	bgt.n	800763a <_dtoa_r+0x91a>
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	b9bb      	cbnz	r3, 800763a <_dtoa_r+0x91a>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007610:	b99b      	cbnz	r3, 800763a <_dtoa_r+0x91a>
 8007612:	9b05      	ldr	r3, [sp, #20]
 8007614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007618:	0d1b      	lsrs	r3, r3, #20
 800761a:	051b      	lsls	r3, r3, #20
 800761c:	b183      	cbz	r3, 8007640 <_dtoa_r+0x920>
 800761e:	f04f 0801 	mov.w	r8, #1
 8007622:	9b06      	ldr	r3, [sp, #24]
 8007624:	3301      	adds	r3, #1
 8007626:	9306      	str	r3, [sp, #24]
 8007628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762a:	3301      	adds	r3, #1
 800762c:	9309      	str	r3, [sp, #36]	; 0x24
 800762e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f af6a 	bne.w	800750a <_dtoa_r+0x7ea>
 8007636:	2001      	movs	r0, #1
 8007638:	e76f      	b.n	800751a <_dtoa_r+0x7fa>
 800763a:	f04f 0800 	mov.w	r8, #0
 800763e:	e7f6      	b.n	800762e <_dtoa_r+0x90e>
 8007640:	4698      	mov	r8, r3
 8007642:	e7f4      	b.n	800762e <_dtoa_r+0x90e>
 8007644:	f43f af7d 	beq.w	8007542 <_dtoa_r+0x822>
 8007648:	4618      	mov	r0, r3
 800764a:	301c      	adds	r0, #28
 800764c:	e772      	b.n	8007534 <_dtoa_r+0x814>
 800764e:	9b02      	ldr	r3, [sp, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dc36      	bgt.n	80076c2 <_dtoa_r+0x9a2>
 8007654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007656:	2b02      	cmp	r3, #2
 8007658:	dd33      	ble.n	80076c2 <_dtoa_r+0x9a2>
 800765a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800765e:	f1bb 0f00 	cmp.w	fp, #0
 8007662:	d10d      	bne.n	8007680 <_dtoa_r+0x960>
 8007664:	4621      	mov	r1, r4
 8007666:	465b      	mov	r3, fp
 8007668:	2205      	movs	r2, #5
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f9d0 	bl	8007a10 <__multadd>
 8007670:	4601      	mov	r1, r0
 8007672:	4604      	mov	r4, r0
 8007674:	4650      	mov	r0, sl
 8007676:	f000 fbe3 	bl	8007e40 <__mcmp>
 800767a:	2800      	cmp	r0, #0
 800767c:	f73f adb6 	bgt.w	80071ec <_dtoa_r+0x4cc>
 8007680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007682:	9f08      	ldr	r7, [sp, #32]
 8007684:	ea6f 0903 	mvn.w	r9, r3
 8007688:	f04f 0800 	mov.w	r8, #0
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f99c 	bl	80079cc <_Bfree>
 8007694:	2e00      	cmp	r6, #0
 8007696:	f43f aea4 	beq.w	80073e2 <_dtoa_r+0x6c2>
 800769a:	f1b8 0f00 	cmp.w	r8, #0
 800769e:	d005      	beq.n	80076ac <_dtoa_r+0x98c>
 80076a0:	45b0      	cmp	r8, r6
 80076a2:	d003      	beq.n	80076ac <_dtoa_r+0x98c>
 80076a4:	4641      	mov	r1, r8
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f990 	bl	80079cc <_Bfree>
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f98c 	bl	80079cc <_Bfree>
 80076b4:	e695      	b.n	80073e2 <_dtoa_r+0x6c2>
 80076b6:	2400      	movs	r4, #0
 80076b8:	4626      	mov	r6, r4
 80076ba:	e7e1      	b.n	8007680 <_dtoa_r+0x960>
 80076bc:	46c1      	mov	r9, r8
 80076be:	4626      	mov	r6, r4
 80076c0:	e594      	b.n	80071ec <_dtoa_r+0x4cc>
 80076c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80fc 	beq.w	80078c6 <_dtoa_r+0xba6>
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	dd05      	ble.n	80076de <_dtoa_r+0x9be>
 80076d2:	4631      	mov	r1, r6
 80076d4:	463a      	mov	r2, r7
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fb46 	bl	8007d68 <__lshift>
 80076dc:	4606      	mov	r6, r0
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	d05c      	beq.n	800779e <_dtoa_r+0xa7e>
 80076e4:	4628      	mov	r0, r5
 80076e6:	6871      	ldr	r1, [r6, #4]
 80076e8:	f000 f930 	bl	800794c <_Balloc>
 80076ec:	4607      	mov	r7, r0
 80076ee:	b928      	cbnz	r0, 80076fc <_dtoa_r+0x9dc>
 80076f0:	4602      	mov	r2, r0
 80076f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076f6:	4b7e      	ldr	r3, [pc, #504]	; (80078f0 <_dtoa_r+0xbd0>)
 80076f8:	f7ff bb26 	b.w	8006d48 <_dtoa_r+0x28>
 80076fc:	6932      	ldr	r2, [r6, #16]
 80076fe:	f106 010c 	add.w	r1, r6, #12
 8007702:	3202      	adds	r2, #2
 8007704:	0092      	lsls	r2, r2, #2
 8007706:	300c      	adds	r0, #12
 8007708:	f000 f912 	bl	8007930 <memcpy>
 800770c:	2201      	movs	r2, #1
 800770e:	4639      	mov	r1, r7
 8007710:	4628      	mov	r0, r5
 8007712:	f000 fb29 	bl	8007d68 <__lshift>
 8007716:	46b0      	mov	r8, r6
 8007718:	4606      	mov	r6, r0
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	3301      	adds	r3, #1
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	445b      	add	r3, fp
 8007724:	930a      	str	r3, [sp, #40]	; 0x28
 8007726:	9b04      	ldr	r3, [sp, #16]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	9309      	str	r3, [sp, #36]	; 0x24
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	4621      	mov	r1, r4
 8007732:	4650      	mov	r0, sl
 8007734:	f103 3bff 	add.w	fp, r3, #4294967295
 8007738:	f7ff fa62 	bl	8006c00 <quorem>
 800773c:	4603      	mov	r3, r0
 800773e:	4641      	mov	r1, r8
 8007740:	3330      	adds	r3, #48	; 0x30
 8007742:	9004      	str	r0, [sp, #16]
 8007744:	4650      	mov	r0, sl
 8007746:	930b      	str	r3, [sp, #44]	; 0x2c
 8007748:	f000 fb7a 	bl	8007e40 <__mcmp>
 800774c:	4632      	mov	r2, r6
 800774e:	9006      	str	r0, [sp, #24]
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f000 fb90 	bl	8007e78 <__mdiff>
 8007758:	68c2      	ldr	r2, [r0, #12]
 800775a:	4607      	mov	r7, r0
 800775c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800775e:	bb02      	cbnz	r2, 80077a2 <_dtoa_r+0xa82>
 8007760:	4601      	mov	r1, r0
 8007762:	4650      	mov	r0, sl
 8007764:	f000 fb6c 	bl	8007e40 <__mcmp>
 8007768:	4602      	mov	r2, r0
 800776a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776c:	4639      	mov	r1, r7
 800776e:	4628      	mov	r0, r5
 8007770:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007774:	f000 f92a 	bl	80079cc <_Bfree>
 8007778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800777a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800777c:	9f02      	ldr	r7, [sp, #8]
 800777e:	ea43 0102 	orr.w	r1, r3, r2
 8007782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007784:	430b      	orrs	r3, r1
 8007786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007788:	d10d      	bne.n	80077a6 <_dtoa_r+0xa86>
 800778a:	2b39      	cmp	r3, #57	; 0x39
 800778c:	d027      	beq.n	80077de <_dtoa_r+0xabe>
 800778e:	9a06      	ldr	r2, [sp, #24]
 8007790:	2a00      	cmp	r2, #0
 8007792:	dd01      	ble.n	8007798 <_dtoa_r+0xa78>
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	3331      	adds	r3, #49	; 0x31
 8007798:	f88b 3000 	strb.w	r3, [fp]
 800779c:	e776      	b.n	800768c <_dtoa_r+0x96c>
 800779e:	4630      	mov	r0, r6
 80077a0:	e7b9      	b.n	8007716 <_dtoa_r+0x9f6>
 80077a2:	2201      	movs	r2, #1
 80077a4:	e7e2      	b.n	800776c <_dtoa_r+0xa4c>
 80077a6:	9906      	ldr	r1, [sp, #24]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	db04      	blt.n	80077b6 <_dtoa_r+0xa96>
 80077ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80077ae:	4301      	orrs	r1, r0
 80077b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b2:	4301      	orrs	r1, r0
 80077b4:	d120      	bne.n	80077f8 <_dtoa_r+0xad8>
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	ddee      	ble.n	8007798 <_dtoa_r+0xa78>
 80077ba:	4651      	mov	r1, sl
 80077bc:	2201      	movs	r2, #1
 80077be:	4628      	mov	r0, r5
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	f000 fad1 	bl	8007d68 <__lshift>
 80077c6:	4621      	mov	r1, r4
 80077c8:	4682      	mov	sl, r0
 80077ca:	f000 fb39 	bl	8007e40 <__mcmp>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	9b02      	ldr	r3, [sp, #8]
 80077d2:	dc02      	bgt.n	80077da <_dtoa_r+0xaba>
 80077d4:	d1e0      	bne.n	8007798 <_dtoa_r+0xa78>
 80077d6:	07da      	lsls	r2, r3, #31
 80077d8:	d5de      	bpl.n	8007798 <_dtoa_r+0xa78>
 80077da:	2b39      	cmp	r3, #57	; 0x39
 80077dc:	d1da      	bne.n	8007794 <_dtoa_r+0xa74>
 80077de:	2339      	movs	r3, #57	; 0x39
 80077e0:	f88b 3000 	strb.w	r3, [fp]
 80077e4:	463b      	mov	r3, r7
 80077e6:	461f      	mov	r7, r3
 80077e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	2a39      	cmp	r2, #57	; 0x39
 80077f0:	d050      	beq.n	8007894 <_dtoa_r+0xb74>
 80077f2:	3201      	adds	r2, #1
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e749      	b.n	800768c <_dtoa_r+0x96c>
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	dd03      	ble.n	8007804 <_dtoa_r+0xae4>
 80077fc:	2b39      	cmp	r3, #57	; 0x39
 80077fe:	d0ee      	beq.n	80077de <_dtoa_r+0xabe>
 8007800:	3301      	adds	r3, #1
 8007802:	e7c9      	b.n	8007798 <_dtoa_r+0xa78>
 8007804:	9a02      	ldr	r2, [sp, #8]
 8007806:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007808:	f802 3c01 	strb.w	r3, [r2, #-1]
 800780c:	428a      	cmp	r2, r1
 800780e:	d02a      	beq.n	8007866 <_dtoa_r+0xb46>
 8007810:	4651      	mov	r1, sl
 8007812:	2300      	movs	r3, #0
 8007814:	220a      	movs	r2, #10
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f8fa 	bl	8007a10 <__multadd>
 800781c:	45b0      	cmp	r8, r6
 800781e:	4682      	mov	sl, r0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	f04f 020a 	mov.w	r2, #10
 8007828:	4641      	mov	r1, r8
 800782a:	4628      	mov	r0, r5
 800782c:	d107      	bne.n	800783e <_dtoa_r+0xb1e>
 800782e:	f000 f8ef 	bl	8007a10 <__multadd>
 8007832:	4680      	mov	r8, r0
 8007834:	4606      	mov	r6, r0
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	3301      	adds	r3, #1
 800783a:	9302      	str	r3, [sp, #8]
 800783c:	e777      	b.n	800772e <_dtoa_r+0xa0e>
 800783e:	f000 f8e7 	bl	8007a10 <__multadd>
 8007842:	4631      	mov	r1, r6
 8007844:	4680      	mov	r8, r0
 8007846:	2300      	movs	r3, #0
 8007848:	220a      	movs	r2, #10
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f8e0 	bl	8007a10 <__multadd>
 8007850:	4606      	mov	r6, r0
 8007852:	e7f0      	b.n	8007836 <_dtoa_r+0xb16>
 8007854:	f1bb 0f00 	cmp.w	fp, #0
 8007858:	bfcc      	ite	gt
 800785a:	465f      	movgt	r7, fp
 800785c:	2701      	movle	r7, #1
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	9a08      	ldr	r2, [sp, #32]
 8007864:	4417      	add	r7, r2
 8007866:	4651      	mov	r1, sl
 8007868:	2201      	movs	r2, #1
 800786a:	4628      	mov	r0, r5
 800786c:	9302      	str	r3, [sp, #8]
 800786e:	f000 fa7b 	bl	8007d68 <__lshift>
 8007872:	4621      	mov	r1, r4
 8007874:	4682      	mov	sl, r0
 8007876:	f000 fae3 	bl	8007e40 <__mcmp>
 800787a:	2800      	cmp	r0, #0
 800787c:	dcb2      	bgt.n	80077e4 <_dtoa_r+0xac4>
 800787e:	d102      	bne.n	8007886 <_dtoa_r+0xb66>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	07db      	lsls	r3, r3, #31
 8007884:	d4ae      	bmi.n	80077e4 <_dtoa_r+0xac4>
 8007886:	463b      	mov	r3, r7
 8007888:	461f      	mov	r7, r3
 800788a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800788e:	2a30      	cmp	r2, #48	; 0x30
 8007890:	d0fa      	beq.n	8007888 <_dtoa_r+0xb68>
 8007892:	e6fb      	b.n	800768c <_dtoa_r+0x96c>
 8007894:	9a08      	ldr	r2, [sp, #32]
 8007896:	429a      	cmp	r2, r3
 8007898:	d1a5      	bne.n	80077e6 <_dtoa_r+0xac6>
 800789a:	2331      	movs	r3, #49	; 0x31
 800789c:	f109 0901 	add.w	r9, r9, #1
 80078a0:	7013      	strb	r3, [r2, #0]
 80078a2:	e6f3      	b.n	800768c <_dtoa_r+0x96c>
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <_dtoa_r+0xbd4>)
 80078a6:	f7ff baa7 	b.w	8006df8 <_dtoa_r+0xd8>
 80078aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f47f aa80 	bne.w	8006db2 <_dtoa_r+0x92>
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <_dtoa_r+0xbd8>)
 80078b4:	f7ff baa0 	b.w	8006df8 <_dtoa_r+0xd8>
 80078b8:	f1bb 0f00 	cmp.w	fp, #0
 80078bc:	dc03      	bgt.n	80078c6 <_dtoa_r+0xba6>
 80078be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	f73f aecc 	bgt.w	800765e <_dtoa_r+0x93e>
 80078c6:	9f08      	ldr	r7, [sp, #32]
 80078c8:	4621      	mov	r1, r4
 80078ca:	4650      	mov	r0, sl
 80078cc:	f7ff f998 	bl	8006c00 <quorem>
 80078d0:	9a08      	ldr	r2, [sp, #32]
 80078d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80078d6:	f807 3b01 	strb.w	r3, [r7], #1
 80078da:	1aba      	subs	r2, r7, r2
 80078dc:	4593      	cmp	fp, r2
 80078de:	ddb9      	ble.n	8007854 <_dtoa_r+0xb34>
 80078e0:	4651      	mov	r1, sl
 80078e2:	2300      	movs	r3, #0
 80078e4:	220a      	movs	r2, #10
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 f892 	bl	8007a10 <__multadd>
 80078ec:	4682      	mov	sl, r0
 80078ee:	e7eb      	b.n	80078c8 <_dtoa_r+0xba8>
 80078f0:	0800c01f 	.word	0x0800c01f
 80078f4:	0800bf78 	.word	0x0800bf78
 80078f8:	0800bf9c 	.word	0x0800bf9c

080078fc <_localeconv_r>:
 80078fc:	4800      	ldr	r0, [pc, #0]	; (8007900 <_localeconv_r+0x4>)
 80078fe:	4770      	bx	lr
 8007900:	20000160 	.word	0x20000160

08007904 <malloc>:
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <malloc+0xc>)
 8007906:	4601      	mov	r1, r0
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	f000 bbfb 	b.w	8008104 <_malloc_r>
 800790e:	bf00      	nop
 8007910:	2000000c 	.word	0x2000000c

08007914 <memchr>:
 8007914:	4603      	mov	r3, r0
 8007916:	b510      	push	{r4, lr}
 8007918:	b2c9      	uxtb	r1, r1
 800791a:	4402      	add	r2, r0
 800791c:	4293      	cmp	r3, r2
 800791e:	4618      	mov	r0, r3
 8007920:	d101      	bne.n	8007926 <memchr+0x12>
 8007922:	2000      	movs	r0, #0
 8007924:	e003      	b.n	800792e <memchr+0x1a>
 8007926:	7804      	ldrb	r4, [r0, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	428c      	cmp	r4, r1
 800792c:	d1f6      	bne.n	800791c <memchr+0x8>
 800792e:	bd10      	pop	{r4, pc}

08007930 <memcpy>:
 8007930:	440a      	add	r2, r1
 8007932:	4291      	cmp	r1, r2
 8007934:	f100 33ff 	add.w	r3, r0, #4294967295
 8007938:	d100      	bne.n	800793c <memcpy+0xc>
 800793a:	4770      	bx	lr
 800793c:	b510      	push	{r4, lr}
 800793e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007942:	4291      	cmp	r1, r2
 8007944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007948:	d1f9      	bne.n	800793e <memcpy+0xe>
 800794a:	bd10      	pop	{r4, pc}

0800794c <_Balloc>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	b976      	cbnz	r6, 8007974 <_Balloc+0x28>
 8007956:	2010      	movs	r0, #16
 8007958:	f7ff ffd4 	bl	8007904 <malloc>
 800795c:	4602      	mov	r2, r0
 800795e:	6260      	str	r0, [r4, #36]	; 0x24
 8007960:	b920      	cbnz	r0, 800796c <_Balloc+0x20>
 8007962:	2166      	movs	r1, #102	; 0x66
 8007964:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <_Balloc+0x78>)
 8007966:	4818      	ldr	r0, [pc, #96]	; (80079c8 <_Balloc+0x7c>)
 8007968:	f000 fd92 	bl	8008490 <__assert_func>
 800796c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007970:	6006      	str	r6, [r0, #0]
 8007972:	60c6      	str	r6, [r0, #12]
 8007974:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007976:	68f3      	ldr	r3, [r6, #12]
 8007978:	b183      	cbz	r3, 800799c <_Balloc+0x50>
 800797a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007982:	b9b8      	cbnz	r0, 80079b4 <_Balloc+0x68>
 8007984:	2101      	movs	r1, #1
 8007986:	fa01 f605 	lsl.w	r6, r1, r5
 800798a:	1d72      	adds	r2, r6, #5
 800798c:	4620      	mov	r0, r4
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	f000 fb5e 	bl	8008050 <_calloc_r>
 8007994:	b160      	cbz	r0, 80079b0 <_Balloc+0x64>
 8007996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800799a:	e00e      	b.n	80079ba <_Balloc+0x6e>
 800799c:	2221      	movs	r2, #33	; 0x21
 800799e:	2104      	movs	r1, #4
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fb55 	bl	8008050 <_calloc_r>
 80079a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a8:	60f0      	str	r0, [r6, #12]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e4      	bne.n	800797a <_Balloc+0x2e>
 80079b0:	2000      	movs	r0, #0
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	6802      	ldr	r2, [r0, #0]
 80079b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ba:	2300      	movs	r3, #0
 80079bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079c0:	e7f7      	b.n	80079b2 <_Balloc+0x66>
 80079c2:	bf00      	nop
 80079c4:	0800bfa9 	.word	0x0800bfa9
 80079c8:	0800c030 	.word	0x0800c030

080079cc <_Bfree>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	b976      	cbnz	r6, 80079f4 <_Bfree+0x28>
 80079d6:	2010      	movs	r0, #16
 80079d8:	f7ff ff94 	bl	8007904 <malloc>
 80079dc:	4602      	mov	r2, r0
 80079de:	6268      	str	r0, [r5, #36]	; 0x24
 80079e0:	b920      	cbnz	r0, 80079ec <_Bfree+0x20>
 80079e2:	218a      	movs	r1, #138	; 0x8a
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <_Bfree+0x3c>)
 80079e6:	4809      	ldr	r0, [pc, #36]	; (8007a0c <_Bfree+0x40>)
 80079e8:	f000 fd52 	bl	8008490 <__assert_func>
 80079ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f0:	6006      	str	r6, [r0, #0]
 80079f2:	60c6      	str	r6, [r0, #12]
 80079f4:	b13c      	cbz	r4, 8007a06 <_Bfree+0x3a>
 80079f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079f8:	6862      	ldr	r2, [r4, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a00:	6021      	str	r1, [r4, #0]
 8007a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	0800bfa9 	.word	0x0800bfa9
 8007a0c:	0800c030 	.word	0x0800c030

08007a10 <__multadd>:
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a14:	4698      	mov	r8, r3
 8007a16:	460c      	mov	r4, r1
 8007a18:	2300      	movs	r3, #0
 8007a1a:	690e      	ldr	r6, [r1, #16]
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	f101 0014 	add.w	r0, r1, #20
 8007a22:	6805      	ldr	r5, [r0, #0]
 8007a24:	3301      	adds	r3, #1
 8007a26:	b2a9      	uxth	r1, r5
 8007a28:	fb02 8101 	mla	r1, r2, r1, r8
 8007a2c:	0c2d      	lsrs	r5, r5, #16
 8007a2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a32:	fb02 c505 	mla	r5, r2, r5, ip
 8007a36:	b289      	uxth	r1, r1
 8007a38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a3c:	429e      	cmp	r6, r3
 8007a3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a42:	f840 1b04 	str.w	r1, [r0], #4
 8007a46:	dcec      	bgt.n	8007a22 <__multadd+0x12>
 8007a48:	f1b8 0f00 	cmp.w	r8, #0
 8007a4c:	d022      	beq.n	8007a94 <__multadd+0x84>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	42b3      	cmp	r3, r6
 8007a52:	dc19      	bgt.n	8007a88 <__multadd+0x78>
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	4638      	mov	r0, r7
 8007a58:	3101      	adds	r1, #1
 8007a5a:	f7ff ff77 	bl	800794c <_Balloc>
 8007a5e:	4605      	mov	r5, r0
 8007a60:	b928      	cbnz	r0, 8007a6e <__multadd+0x5e>
 8007a62:	4602      	mov	r2, r0
 8007a64:	21b5      	movs	r1, #181	; 0xb5
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <__multadd+0x8c>)
 8007a68:	480d      	ldr	r0, [pc, #52]	; (8007aa0 <__multadd+0x90>)
 8007a6a:	f000 fd11 	bl	8008490 <__assert_func>
 8007a6e:	6922      	ldr	r2, [r4, #16]
 8007a70:	f104 010c 	add.w	r1, r4, #12
 8007a74:	3202      	adds	r2, #2
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	300c      	adds	r0, #12
 8007a7a:	f7ff ff59 	bl	8007930 <memcpy>
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff ffa3 	bl	80079cc <_Bfree>
 8007a86:	462c      	mov	r4, r5
 8007a88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a92:	6126      	str	r6, [r4, #16]
 8007a94:	4620      	mov	r0, r4
 8007a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9a:	bf00      	nop
 8007a9c:	0800c01f 	.word	0x0800c01f
 8007aa0:	0800c030 	.word	0x0800c030

08007aa4 <__hi0bits>:
 8007aa4:	0c02      	lsrs	r2, r0, #16
 8007aa6:	0412      	lsls	r2, r2, #16
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	b9ca      	cbnz	r2, 8007ae0 <__hi0bits+0x3c>
 8007aac:	0403      	lsls	r3, r0, #16
 8007aae:	2010      	movs	r0, #16
 8007ab0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ab4:	bf04      	itt	eq
 8007ab6:	021b      	lsleq	r3, r3, #8
 8007ab8:	3008      	addeq	r0, #8
 8007aba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007abe:	bf04      	itt	eq
 8007ac0:	011b      	lsleq	r3, r3, #4
 8007ac2:	3004      	addeq	r0, #4
 8007ac4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ac8:	bf04      	itt	eq
 8007aca:	009b      	lsleq	r3, r3, #2
 8007acc:	3002      	addeq	r0, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	db05      	blt.n	8007ade <__hi0bits+0x3a>
 8007ad2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ad6:	f100 0001 	add.w	r0, r0, #1
 8007ada:	bf08      	it	eq
 8007adc:	2020      	moveq	r0, #32
 8007ade:	4770      	bx	lr
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e7e5      	b.n	8007ab0 <__hi0bits+0xc>

08007ae4 <__lo0bits>:
 8007ae4:	6803      	ldr	r3, [r0, #0]
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	f013 0007 	ands.w	r0, r3, #7
 8007aec:	d00b      	beq.n	8007b06 <__lo0bits+0x22>
 8007aee:	07d9      	lsls	r1, r3, #31
 8007af0:	d422      	bmi.n	8007b38 <__lo0bits+0x54>
 8007af2:	0798      	lsls	r0, r3, #30
 8007af4:	bf49      	itett	mi
 8007af6:	085b      	lsrmi	r3, r3, #1
 8007af8:	089b      	lsrpl	r3, r3, #2
 8007afa:	2001      	movmi	r0, #1
 8007afc:	6013      	strmi	r3, [r2, #0]
 8007afe:	bf5c      	itt	pl
 8007b00:	2002      	movpl	r0, #2
 8007b02:	6013      	strpl	r3, [r2, #0]
 8007b04:	4770      	bx	lr
 8007b06:	b299      	uxth	r1, r3
 8007b08:	b909      	cbnz	r1, 8007b0e <__lo0bits+0x2a>
 8007b0a:	2010      	movs	r0, #16
 8007b0c:	0c1b      	lsrs	r3, r3, #16
 8007b0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b12:	bf04      	itt	eq
 8007b14:	0a1b      	lsreq	r3, r3, #8
 8007b16:	3008      	addeq	r0, #8
 8007b18:	0719      	lsls	r1, r3, #28
 8007b1a:	bf04      	itt	eq
 8007b1c:	091b      	lsreq	r3, r3, #4
 8007b1e:	3004      	addeq	r0, #4
 8007b20:	0799      	lsls	r1, r3, #30
 8007b22:	bf04      	itt	eq
 8007b24:	089b      	lsreq	r3, r3, #2
 8007b26:	3002      	addeq	r0, #2
 8007b28:	07d9      	lsls	r1, r3, #31
 8007b2a:	d403      	bmi.n	8007b34 <__lo0bits+0x50>
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	f100 0001 	add.w	r0, r0, #1
 8007b32:	d003      	beq.n	8007b3c <__lo0bits+0x58>
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	4770      	bx	lr
 8007b38:	2000      	movs	r0, #0
 8007b3a:	4770      	bx	lr
 8007b3c:	2020      	movs	r0, #32
 8007b3e:	4770      	bx	lr

08007b40 <__i2b>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	460c      	mov	r4, r1
 8007b44:	2101      	movs	r1, #1
 8007b46:	f7ff ff01 	bl	800794c <_Balloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	b928      	cbnz	r0, 8007b5a <__i2b+0x1a>
 8007b4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b52:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <__i2b+0x24>)
 8007b54:	4804      	ldr	r0, [pc, #16]	; (8007b68 <__i2b+0x28>)
 8007b56:	f000 fc9b 	bl	8008490 <__assert_func>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	6144      	str	r4, [r0, #20]
 8007b5e:	6103      	str	r3, [r0, #16]
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	bf00      	nop
 8007b64:	0800c01f 	.word	0x0800c01f
 8007b68:	0800c030 	.word	0x0800c030

08007b6c <__multiply>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	4614      	mov	r4, r2
 8007b72:	690a      	ldr	r2, [r1, #16]
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	460d      	mov	r5, r1
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	bfbe      	ittt	lt
 8007b7c:	460b      	movlt	r3, r1
 8007b7e:	4625      	movlt	r5, r4
 8007b80:	461c      	movlt	r4, r3
 8007b82:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b8a:	68ab      	ldr	r3, [r5, #8]
 8007b8c:	6869      	ldr	r1, [r5, #4]
 8007b8e:	eb0a 0709 	add.w	r7, sl, r9
 8007b92:	42bb      	cmp	r3, r7
 8007b94:	b085      	sub	sp, #20
 8007b96:	bfb8      	it	lt
 8007b98:	3101      	addlt	r1, #1
 8007b9a:	f7ff fed7 	bl	800794c <_Balloc>
 8007b9e:	b930      	cbnz	r0, 8007bae <__multiply+0x42>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	f240 115d 	movw	r1, #349	; 0x15d
 8007ba6:	4b41      	ldr	r3, [pc, #260]	; (8007cac <__multiply+0x140>)
 8007ba8:	4841      	ldr	r0, [pc, #260]	; (8007cb0 <__multiply+0x144>)
 8007baa:	f000 fc71 	bl	8008490 <__assert_func>
 8007bae:	f100 0614 	add.w	r6, r0, #20
 8007bb2:	4633      	mov	r3, r6
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007bba:	4543      	cmp	r3, r8
 8007bbc:	d31e      	bcc.n	8007bfc <__multiply+0x90>
 8007bbe:	f105 0c14 	add.w	ip, r5, #20
 8007bc2:	f104 0314 	add.w	r3, r4, #20
 8007bc6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007bca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007bce:	9202      	str	r2, [sp, #8]
 8007bd0:	ebac 0205 	sub.w	r2, ip, r5
 8007bd4:	3a15      	subs	r2, #21
 8007bd6:	f022 0203 	bic.w	r2, r2, #3
 8007bda:	3204      	adds	r2, #4
 8007bdc:	f105 0115 	add.w	r1, r5, #21
 8007be0:	458c      	cmp	ip, r1
 8007be2:	bf38      	it	cc
 8007be4:	2204      	movcc	r2, #4
 8007be6:	9201      	str	r2, [sp, #4]
 8007be8:	9a02      	ldr	r2, [sp, #8]
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d808      	bhi.n	8007c02 <__multiply+0x96>
 8007bf0:	2f00      	cmp	r7, #0
 8007bf2:	dc55      	bgt.n	8007ca0 <__multiply+0x134>
 8007bf4:	6107      	str	r7, [r0, #16]
 8007bf6:	b005      	add	sp, #20
 8007bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfc:	f843 2b04 	str.w	r2, [r3], #4
 8007c00:	e7db      	b.n	8007bba <__multiply+0x4e>
 8007c02:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c06:	f1ba 0f00 	cmp.w	sl, #0
 8007c0a:	d020      	beq.n	8007c4e <__multiply+0xe2>
 8007c0c:	46b1      	mov	r9, r6
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f105 0e14 	add.w	lr, r5, #20
 8007c14:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c18:	f8d9 b000 	ldr.w	fp, [r9]
 8007c1c:	b2a1      	uxth	r1, r4
 8007c1e:	fa1f fb8b 	uxth.w	fp, fp
 8007c22:	fb0a b101 	mla	r1, sl, r1, fp
 8007c26:	4411      	add	r1, r2
 8007c28:	f8d9 2000 	ldr.w	r2, [r9]
 8007c2c:	0c24      	lsrs	r4, r4, #16
 8007c2e:	0c12      	lsrs	r2, r2, #16
 8007c30:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c34:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c38:	b289      	uxth	r1, r1
 8007c3a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c3e:	45f4      	cmp	ip, lr
 8007c40:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c44:	f849 1b04 	str.w	r1, [r9], #4
 8007c48:	d8e4      	bhi.n	8007c14 <__multiply+0xa8>
 8007c4a:	9901      	ldr	r1, [sp, #4]
 8007c4c:	5072      	str	r2, [r6, r1]
 8007c4e:	9a03      	ldr	r2, [sp, #12]
 8007c50:	3304      	adds	r3, #4
 8007c52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c56:	f1b9 0f00 	cmp.w	r9, #0
 8007c5a:	d01f      	beq.n	8007c9c <__multiply+0x130>
 8007c5c:	46b6      	mov	lr, r6
 8007c5e:	f04f 0a00 	mov.w	sl, #0
 8007c62:	6834      	ldr	r4, [r6, #0]
 8007c64:	f105 0114 	add.w	r1, r5, #20
 8007c68:	880a      	ldrh	r2, [r1, #0]
 8007c6a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c6e:	b2a4      	uxth	r4, r4
 8007c70:	fb09 b202 	mla	r2, r9, r2, fp
 8007c74:	4492      	add	sl, r2
 8007c76:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c7a:	f84e 4b04 	str.w	r4, [lr], #4
 8007c7e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c82:	f8be 2000 	ldrh.w	r2, [lr]
 8007c86:	0c24      	lsrs	r4, r4, #16
 8007c88:	fb09 2404 	mla	r4, r9, r4, r2
 8007c8c:	458c      	cmp	ip, r1
 8007c8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c96:	d8e7      	bhi.n	8007c68 <__multiply+0xfc>
 8007c98:	9a01      	ldr	r2, [sp, #4]
 8007c9a:	50b4      	str	r4, [r6, r2]
 8007c9c:	3604      	adds	r6, #4
 8007c9e:	e7a3      	b.n	8007be8 <__multiply+0x7c>
 8007ca0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1a5      	bne.n	8007bf4 <__multiply+0x88>
 8007ca8:	3f01      	subs	r7, #1
 8007caa:	e7a1      	b.n	8007bf0 <__multiply+0x84>
 8007cac:	0800c01f 	.word	0x0800c01f
 8007cb0:	0800c030 	.word	0x0800c030

08007cb4 <__pow5mult>:
 8007cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb8:	4615      	mov	r5, r2
 8007cba:	f012 0203 	ands.w	r2, r2, #3
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	d007      	beq.n	8007cd4 <__pow5mult+0x20>
 8007cc4:	4c25      	ldr	r4, [pc, #148]	; (8007d5c <__pow5mult+0xa8>)
 8007cc6:	3a01      	subs	r2, #1
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cce:	f7ff fe9f 	bl	8007a10 <__multadd>
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	10ad      	asrs	r5, r5, #2
 8007cd6:	d03d      	beq.n	8007d54 <__pow5mult+0xa0>
 8007cd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cda:	b97c      	cbnz	r4, 8007cfc <__pow5mult+0x48>
 8007cdc:	2010      	movs	r0, #16
 8007cde:	f7ff fe11 	bl	8007904 <malloc>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ce6:	b928      	cbnz	r0, 8007cf4 <__pow5mult+0x40>
 8007ce8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007cec:	4b1c      	ldr	r3, [pc, #112]	; (8007d60 <__pow5mult+0xac>)
 8007cee:	481d      	ldr	r0, [pc, #116]	; (8007d64 <__pow5mult+0xb0>)
 8007cf0:	f000 fbce 	bl	8008490 <__assert_func>
 8007cf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cf8:	6004      	str	r4, [r0, #0]
 8007cfa:	60c4      	str	r4, [r0, #12]
 8007cfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d04:	b94c      	cbnz	r4, 8007d1a <__pow5mult+0x66>
 8007d06:	f240 2171 	movw	r1, #625	; 0x271
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff ff18 	bl	8007b40 <__i2b>
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d18:	6003      	str	r3, [r0, #0]
 8007d1a:	f04f 0900 	mov.w	r9, #0
 8007d1e:	07eb      	lsls	r3, r5, #31
 8007d20:	d50a      	bpl.n	8007d38 <__pow5mult+0x84>
 8007d22:	4639      	mov	r1, r7
 8007d24:	4622      	mov	r2, r4
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff ff20 	bl	8007b6c <__multiply>
 8007d2c:	4680      	mov	r8, r0
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff fe4b 	bl	80079cc <_Bfree>
 8007d36:	4647      	mov	r7, r8
 8007d38:	106d      	asrs	r5, r5, #1
 8007d3a:	d00b      	beq.n	8007d54 <__pow5mult+0xa0>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	b938      	cbnz	r0, 8007d50 <__pow5mult+0x9c>
 8007d40:	4622      	mov	r2, r4
 8007d42:	4621      	mov	r1, r4
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ff11 	bl	8007b6c <__multiply>
 8007d4a:	6020      	str	r0, [r4, #0]
 8007d4c:	f8c0 9000 	str.w	r9, [r0]
 8007d50:	4604      	mov	r4, r0
 8007d52:	e7e4      	b.n	8007d1e <__pow5mult+0x6a>
 8007d54:	4638      	mov	r0, r7
 8007d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5a:	bf00      	nop
 8007d5c:	0800c180 	.word	0x0800c180
 8007d60:	0800bfa9 	.word	0x0800bfa9
 8007d64:	0800c030 	.word	0x0800c030

08007d68 <__lshift>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	4607      	mov	r7, r0
 8007d70:	4691      	mov	r9, r2
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6849      	ldr	r1, [r1, #4]
 8007d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d80:	f108 0601 	add.w	r6, r8, #1
 8007d84:	42b3      	cmp	r3, r6
 8007d86:	db0b      	blt.n	8007da0 <__lshift+0x38>
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff fddf 	bl	800794c <_Balloc>
 8007d8e:	4605      	mov	r5, r0
 8007d90:	b948      	cbnz	r0, 8007da6 <__lshift+0x3e>
 8007d92:	4602      	mov	r2, r0
 8007d94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d98:	4b27      	ldr	r3, [pc, #156]	; (8007e38 <__lshift+0xd0>)
 8007d9a:	4828      	ldr	r0, [pc, #160]	; (8007e3c <__lshift+0xd4>)
 8007d9c:	f000 fb78 	bl	8008490 <__assert_func>
 8007da0:	3101      	adds	r1, #1
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	e7ee      	b.n	8007d84 <__lshift+0x1c>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f100 0114 	add.w	r1, r0, #20
 8007dac:	f100 0210 	add.w	r2, r0, #16
 8007db0:	4618      	mov	r0, r3
 8007db2:	4553      	cmp	r3, sl
 8007db4:	db33      	blt.n	8007e1e <__lshift+0xb6>
 8007db6:	6920      	ldr	r0, [r4, #16]
 8007db8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dbc:	f104 0314 	add.w	r3, r4, #20
 8007dc0:	f019 091f 	ands.w	r9, r9, #31
 8007dc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dcc:	d02b      	beq.n	8007e26 <__lshift+0xbe>
 8007dce:	468a      	mov	sl, r1
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	fa00 f009 	lsl.w	r0, r0, r9
 8007ddc:	4302      	orrs	r2, r0
 8007dde:	f84a 2b04 	str.w	r2, [sl], #4
 8007de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de6:	459c      	cmp	ip, r3
 8007de8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dec:	d8f3      	bhi.n	8007dd6 <__lshift+0x6e>
 8007dee:	ebac 0304 	sub.w	r3, ip, r4
 8007df2:	3b15      	subs	r3, #21
 8007df4:	f023 0303 	bic.w	r3, r3, #3
 8007df8:	3304      	adds	r3, #4
 8007dfa:	f104 0015 	add.w	r0, r4, #21
 8007dfe:	4584      	cmp	ip, r0
 8007e00:	bf38      	it	cc
 8007e02:	2304      	movcc	r3, #4
 8007e04:	50ca      	str	r2, [r1, r3]
 8007e06:	b10a      	cbz	r2, 8007e0c <__lshift+0xa4>
 8007e08:	f108 0602 	add.w	r6, r8, #2
 8007e0c:	3e01      	subs	r6, #1
 8007e0e:	4638      	mov	r0, r7
 8007e10:	4621      	mov	r1, r4
 8007e12:	612e      	str	r6, [r5, #16]
 8007e14:	f7ff fdda 	bl	80079cc <_Bfree>
 8007e18:	4628      	mov	r0, r5
 8007e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e22:	3301      	adds	r3, #1
 8007e24:	e7c5      	b.n	8007db2 <__lshift+0x4a>
 8007e26:	3904      	subs	r1, #4
 8007e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2c:	459c      	cmp	ip, r3
 8007e2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e32:	d8f9      	bhi.n	8007e28 <__lshift+0xc0>
 8007e34:	e7ea      	b.n	8007e0c <__lshift+0xa4>
 8007e36:	bf00      	nop
 8007e38:	0800c01f 	.word	0x0800c01f
 8007e3c:	0800c030 	.word	0x0800c030

08007e40 <__mcmp>:
 8007e40:	4603      	mov	r3, r0
 8007e42:	690a      	ldr	r2, [r1, #16]
 8007e44:	6900      	ldr	r0, [r0, #16]
 8007e46:	b530      	push	{r4, r5, lr}
 8007e48:	1a80      	subs	r0, r0, r2
 8007e4a:	d10d      	bne.n	8007e68 <__mcmp+0x28>
 8007e4c:	3314      	adds	r3, #20
 8007e4e:	3114      	adds	r1, #20
 8007e50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e60:	4295      	cmp	r5, r2
 8007e62:	d002      	beq.n	8007e6a <__mcmp+0x2a>
 8007e64:	d304      	bcc.n	8007e70 <__mcmp+0x30>
 8007e66:	2001      	movs	r0, #1
 8007e68:	bd30      	pop	{r4, r5, pc}
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	d3f4      	bcc.n	8007e58 <__mcmp+0x18>
 8007e6e:	e7fb      	b.n	8007e68 <__mcmp+0x28>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	e7f8      	b.n	8007e68 <__mcmp+0x28>
	...

08007e78 <__mdiff>:
 8007e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	4606      	mov	r6, r0
 8007e80:	4611      	mov	r1, r2
 8007e82:	4620      	mov	r0, r4
 8007e84:	4692      	mov	sl, r2
 8007e86:	f7ff ffdb 	bl	8007e40 <__mcmp>
 8007e8a:	1e05      	subs	r5, r0, #0
 8007e8c:	d111      	bne.n	8007eb2 <__mdiff+0x3a>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7ff fd5b 	bl	800794c <_Balloc>
 8007e96:	4602      	mov	r2, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <__mdiff+0x2e>
 8007e9a:	f240 2132 	movw	r1, #562	; 0x232
 8007e9e:	4b3c      	ldr	r3, [pc, #240]	; (8007f90 <__mdiff+0x118>)
 8007ea0:	483c      	ldr	r0, [pc, #240]	; (8007f94 <__mdiff+0x11c>)
 8007ea2:	f000 faf5 	bl	8008490 <__assert_func>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007eac:	4610      	mov	r0, r2
 8007eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	bfa4      	itt	ge
 8007eb4:	4653      	movge	r3, sl
 8007eb6:	46a2      	movge	sl, r4
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007ebe:	bfa6      	itte	ge
 8007ec0:	461c      	movge	r4, r3
 8007ec2:	2500      	movge	r5, #0
 8007ec4:	2501      	movlt	r5, #1
 8007ec6:	f7ff fd41 	bl	800794c <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b918      	cbnz	r0, 8007ed6 <__mdiff+0x5e>
 8007ece:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ed2:	4b2f      	ldr	r3, [pc, #188]	; (8007f90 <__mdiff+0x118>)
 8007ed4:	e7e4      	b.n	8007ea0 <__mdiff+0x28>
 8007ed6:	f100 0814 	add.w	r8, r0, #20
 8007eda:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007ede:	60c5      	str	r5, [r0, #12]
 8007ee0:	f04f 0c00 	mov.w	ip, #0
 8007ee4:	f10a 0514 	add.w	r5, sl, #20
 8007ee8:	f10a 0010 	add.w	r0, sl, #16
 8007eec:	46c2      	mov	sl, r8
 8007eee:	6926      	ldr	r6, [r4, #16]
 8007ef0:	f104 0914 	add.w	r9, r4, #20
 8007ef4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007ef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007efc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007f00:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f04:	fa1f f18b 	uxth.w	r1, fp
 8007f08:	4461      	add	r1, ip
 8007f0a:	fa1f fc83 	uxth.w	ip, r3
 8007f0e:	0c1b      	lsrs	r3, r3, #16
 8007f10:	eba1 010c 	sub.w	r1, r1, ip
 8007f14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f1c:	b289      	uxth	r1, r1
 8007f1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007f22:	454e      	cmp	r6, r9
 8007f24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007f28:	f84a 3b04 	str.w	r3, [sl], #4
 8007f2c:	d8e6      	bhi.n	8007efc <__mdiff+0x84>
 8007f2e:	1b33      	subs	r3, r6, r4
 8007f30:	3b15      	subs	r3, #21
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	3415      	adds	r4, #21
 8007f38:	3304      	adds	r3, #4
 8007f3a:	42a6      	cmp	r6, r4
 8007f3c:	bf38      	it	cc
 8007f3e:	2304      	movcc	r3, #4
 8007f40:	441d      	add	r5, r3
 8007f42:	4443      	add	r3, r8
 8007f44:	461e      	mov	r6, r3
 8007f46:	462c      	mov	r4, r5
 8007f48:	4574      	cmp	r4, lr
 8007f4a:	d30e      	bcc.n	8007f6a <__mdiff+0xf2>
 8007f4c:	f10e 0103 	add.w	r1, lr, #3
 8007f50:	1b49      	subs	r1, r1, r5
 8007f52:	f021 0103 	bic.w	r1, r1, #3
 8007f56:	3d03      	subs	r5, #3
 8007f58:	45ae      	cmp	lr, r5
 8007f5a:	bf38      	it	cc
 8007f5c:	2100      	movcc	r1, #0
 8007f5e:	4419      	add	r1, r3
 8007f60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007f64:	b18b      	cbz	r3, 8007f8a <__mdiff+0x112>
 8007f66:	6117      	str	r7, [r2, #16]
 8007f68:	e7a0      	b.n	8007eac <__mdiff+0x34>
 8007f6a:	f854 8b04 	ldr.w	r8, [r4], #4
 8007f6e:	fa1f f188 	uxth.w	r1, r8
 8007f72:	4461      	add	r1, ip
 8007f74:	1408      	asrs	r0, r1, #16
 8007f76:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007f7a:	b289      	uxth	r1, r1
 8007f7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f84:	f846 1b04 	str.w	r1, [r6], #4
 8007f88:	e7de      	b.n	8007f48 <__mdiff+0xd0>
 8007f8a:	3f01      	subs	r7, #1
 8007f8c:	e7e8      	b.n	8007f60 <__mdiff+0xe8>
 8007f8e:	bf00      	nop
 8007f90:	0800c01f 	.word	0x0800c01f
 8007f94:	0800c030 	.word	0x0800c030

08007f98 <__d2b>:
 8007f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007fa2:	4690      	mov	r8, r2
 8007fa4:	461d      	mov	r5, r3
 8007fa6:	f7ff fcd1 	bl	800794c <_Balloc>
 8007faa:	4604      	mov	r4, r0
 8007fac:	b930      	cbnz	r0, 8007fbc <__d2b+0x24>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	f240 310a 	movw	r1, #778	; 0x30a
 8007fb4:	4b24      	ldr	r3, [pc, #144]	; (8008048 <__d2b+0xb0>)
 8007fb6:	4825      	ldr	r0, [pc, #148]	; (800804c <__d2b+0xb4>)
 8007fb8:	f000 fa6a 	bl	8008490 <__assert_func>
 8007fbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007fc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007fc4:	bb2d      	cbnz	r5, 8008012 <__d2b+0x7a>
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	f1b8 0300 	subs.w	r3, r8, #0
 8007fcc:	d026      	beq.n	800801c <__d2b+0x84>
 8007fce:	4668      	mov	r0, sp
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	f7ff fd87 	bl	8007ae4 <__lo0bits>
 8007fd6:	9900      	ldr	r1, [sp, #0]
 8007fd8:	b1f0      	cbz	r0, 8008018 <__d2b+0x80>
 8007fda:	9a01      	ldr	r2, [sp, #4]
 8007fdc:	f1c0 0320 	rsb	r3, r0, #32
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	40c2      	lsrs	r2, r0
 8007fe8:	6163      	str	r3, [r4, #20]
 8007fea:	9201      	str	r2, [sp, #4]
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2102      	movne	r1, #2
 8007ff4:	2101      	moveq	r1, #1
 8007ff6:	61a3      	str	r3, [r4, #24]
 8007ff8:	6121      	str	r1, [r4, #16]
 8007ffa:	b1c5      	cbz	r5, 800802e <__d2b+0x96>
 8007ffc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008000:	4405      	add	r5, r0
 8008002:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008006:	603d      	str	r5, [r7, #0]
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	4620      	mov	r0, r4
 800800c:	b002      	add	sp, #8
 800800e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008016:	e7d6      	b.n	8007fc6 <__d2b+0x2e>
 8008018:	6161      	str	r1, [r4, #20]
 800801a:	e7e7      	b.n	8007fec <__d2b+0x54>
 800801c:	a801      	add	r0, sp, #4
 800801e:	f7ff fd61 	bl	8007ae4 <__lo0bits>
 8008022:	2101      	movs	r1, #1
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	6121      	str	r1, [r4, #16]
 8008028:	6163      	str	r3, [r4, #20]
 800802a:	3020      	adds	r0, #32
 800802c:	e7e5      	b.n	8007ffa <__d2b+0x62>
 800802e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008032:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008036:	6038      	str	r0, [r7, #0]
 8008038:	6918      	ldr	r0, [r3, #16]
 800803a:	f7ff fd33 	bl	8007aa4 <__hi0bits>
 800803e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008042:	6031      	str	r1, [r6, #0]
 8008044:	e7e1      	b.n	800800a <__d2b+0x72>
 8008046:	bf00      	nop
 8008048:	0800c01f 	.word	0x0800c01f
 800804c:	0800c030 	.word	0x0800c030

08008050 <_calloc_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	fb02 f501 	mul.w	r5, r2, r1
 8008056:	4629      	mov	r1, r5
 8008058:	f000 f854 	bl	8008104 <_malloc_r>
 800805c:	4604      	mov	r4, r0
 800805e:	b118      	cbz	r0, 8008068 <_calloc_r+0x18>
 8008060:	462a      	mov	r2, r5
 8008062:	2100      	movs	r1, #0
 8008064:	f7fe f90a 	bl	800627c <memset>
 8008068:	4620      	mov	r0, r4
 800806a:	bd38      	pop	{r3, r4, r5, pc}

0800806c <_free_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4605      	mov	r5, r0
 8008070:	2900      	cmp	r1, #0
 8008072:	d043      	beq.n	80080fc <_free_r+0x90>
 8008074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008078:	1f0c      	subs	r4, r1, #4
 800807a:	2b00      	cmp	r3, #0
 800807c:	bfb8      	it	lt
 800807e:	18e4      	addlt	r4, r4, r3
 8008080:	f000 fa62 	bl	8008548 <__malloc_lock>
 8008084:	4a1e      	ldr	r2, [pc, #120]	; (8008100 <_free_r+0x94>)
 8008086:	6813      	ldr	r3, [r2, #0]
 8008088:	4610      	mov	r0, r2
 800808a:	b933      	cbnz	r3, 800809a <_free_r+0x2e>
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	6014      	str	r4, [r2, #0]
 8008090:	4628      	mov	r0, r5
 8008092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008096:	f000 ba5d 	b.w	8008554 <__malloc_unlock>
 800809a:	42a3      	cmp	r3, r4
 800809c:	d90a      	bls.n	80080b4 <_free_r+0x48>
 800809e:	6821      	ldr	r1, [r4, #0]
 80080a0:	1862      	adds	r2, r4, r1
 80080a2:	4293      	cmp	r3, r2
 80080a4:	bf01      	itttt	eq
 80080a6:	681a      	ldreq	r2, [r3, #0]
 80080a8:	685b      	ldreq	r3, [r3, #4]
 80080aa:	1852      	addeq	r2, r2, r1
 80080ac:	6022      	streq	r2, [r4, #0]
 80080ae:	6063      	str	r3, [r4, #4]
 80080b0:	6004      	str	r4, [r0, #0]
 80080b2:	e7ed      	b.n	8008090 <_free_r+0x24>
 80080b4:	461a      	mov	r2, r3
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	b10b      	cbz	r3, 80080be <_free_r+0x52>
 80080ba:	42a3      	cmp	r3, r4
 80080bc:	d9fa      	bls.n	80080b4 <_free_r+0x48>
 80080be:	6811      	ldr	r1, [r2, #0]
 80080c0:	1850      	adds	r0, r2, r1
 80080c2:	42a0      	cmp	r0, r4
 80080c4:	d10b      	bne.n	80080de <_free_r+0x72>
 80080c6:	6820      	ldr	r0, [r4, #0]
 80080c8:	4401      	add	r1, r0
 80080ca:	1850      	adds	r0, r2, r1
 80080cc:	4283      	cmp	r3, r0
 80080ce:	6011      	str	r1, [r2, #0]
 80080d0:	d1de      	bne.n	8008090 <_free_r+0x24>
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	4401      	add	r1, r0
 80080d8:	6011      	str	r1, [r2, #0]
 80080da:	6053      	str	r3, [r2, #4]
 80080dc:	e7d8      	b.n	8008090 <_free_r+0x24>
 80080de:	d902      	bls.n	80080e6 <_free_r+0x7a>
 80080e0:	230c      	movs	r3, #12
 80080e2:	602b      	str	r3, [r5, #0]
 80080e4:	e7d4      	b.n	8008090 <_free_r+0x24>
 80080e6:	6820      	ldr	r0, [r4, #0]
 80080e8:	1821      	adds	r1, r4, r0
 80080ea:	428b      	cmp	r3, r1
 80080ec:	bf01      	itttt	eq
 80080ee:	6819      	ldreq	r1, [r3, #0]
 80080f0:	685b      	ldreq	r3, [r3, #4]
 80080f2:	1809      	addeq	r1, r1, r0
 80080f4:	6021      	streq	r1, [r4, #0]
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	6054      	str	r4, [r2, #4]
 80080fa:	e7c9      	b.n	8008090 <_free_r+0x24>
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	bf00      	nop
 8008100:	20000274 	.word	0x20000274

08008104 <_malloc_r>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	1ccd      	adds	r5, r1, #3
 8008108:	f025 0503 	bic.w	r5, r5, #3
 800810c:	3508      	adds	r5, #8
 800810e:	2d0c      	cmp	r5, #12
 8008110:	bf38      	it	cc
 8008112:	250c      	movcc	r5, #12
 8008114:	2d00      	cmp	r5, #0
 8008116:	4606      	mov	r6, r0
 8008118:	db01      	blt.n	800811e <_malloc_r+0x1a>
 800811a:	42a9      	cmp	r1, r5
 800811c:	d903      	bls.n	8008126 <_malloc_r+0x22>
 800811e:	230c      	movs	r3, #12
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	2000      	movs	r0, #0
 8008124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008126:	f000 fa0f 	bl	8008548 <__malloc_lock>
 800812a:	4921      	ldr	r1, [pc, #132]	; (80081b0 <_malloc_r+0xac>)
 800812c:	680a      	ldr	r2, [r1, #0]
 800812e:	4614      	mov	r4, r2
 8008130:	b99c      	cbnz	r4, 800815a <_malloc_r+0x56>
 8008132:	4f20      	ldr	r7, [pc, #128]	; (80081b4 <_malloc_r+0xb0>)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	b923      	cbnz	r3, 8008142 <_malloc_r+0x3e>
 8008138:	4621      	mov	r1, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f000 f998 	bl	8008470 <_sbrk_r>
 8008140:	6038      	str	r0, [r7, #0]
 8008142:	4629      	mov	r1, r5
 8008144:	4630      	mov	r0, r6
 8008146:	f000 f993 	bl	8008470 <_sbrk_r>
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	d123      	bne.n	8008196 <_malloc_r+0x92>
 800814e:	230c      	movs	r3, #12
 8008150:	4630      	mov	r0, r6
 8008152:	6033      	str	r3, [r6, #0]
 8008154:	f000 f9fe 	bl	8008554 <__malloc_unlock>
 8008158:	e7e3      	b.n	8008122 <_malloc_r+0x1e>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	1b5b      	subs	r3, r3, r5
 800815e:	d417      	bmi.n	8008190 <_malloc_r+0x8c>
 8008160:	2b0b      	cmp	r3, #11
 8008162:	d903      	bls.n	800816c <_malloc_r+0x68>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	441c      	add	r4, r3
 8008168:	6025      	str	r5, [r4, #0]
 800816a:	e004      	b.n	8008176 <_malloc_r+0x72>
 800816c:	6863      	ldr	r3, [r4, #4]
 800816e:	42a2      	cmp	r2, r4
 8008170:	bf0c      	ite	eq
 8008172:	600b      	streq	r3, [r1, #0]
 8008174:	6053      	strne	r3, [r2, #4]
 8008176:	4630      	mov	r0, r6
 8008178:	f000 f9ec 	bl	8008554 <__malloc_unlock>
 800817c:	f104 000b 	add.w	r0, r4, #11
 8008180:	1d23      	adds	r3, r4, #4
 8008182:	f020 0007 	bic.w	r0, r0, #7
 8008186:	1ac2      	subs	r2, r0, r3
 8008188:	d0cc      	beq.n	8008124 <_malloc_r+0x20>
 800818a:	1a1b      	subs	r3, r3, r0
 800818c:	50a3      	str	r3, [r4, r2]
 800818e:	e7c9      	b.n	8008124 <_malloc_r+0x20>
 8008190:	4622      	mov	r2, r4
 8008192:	6864      	ldr	r4, [r4, #4]
 8008194:	e7cc      	b.n	8008130 <_malloc_r+0x2c>
 8008196:	1cc4      	adds	r4, r0, #3
 8008198:	f024 0403 	bic.w	r4, r4, #3
 800819c:	42a0      	cmp	r0, r4
 800819e:	d0e3      	beq.n	8008168 <_malloc_r+0x64>
 80081a0:	1a21      	subs	r1, r4, r0
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 f964 	bl	8008470 <_sbrk_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d1dd      	bne.n	8008168 <_malloc_r+0x64>
 80081ac:	e7cf      	b.n	800814e <_malloc_r+0x4a>
 80081ae:	bf00      	nop
 80081b0:	20000274 	.word	0x20000274
 80081b4:	20000278 	.word	0x20000278

080081b8 <__ssputs_r>:
 80081b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081bc:	688e      	ldr	r6, [r1, #8]
 80081be:	4682      	mov	sl, r0
 80081c0:	429e      	cmp	r6, r3
 80081c2:	460c      	mov	r4, r1
 80081c4:	4690      	mov	r8, r2
 80081c6:	461f      	mov	r7, r3
 80081c8:	d838      	bhi.n	800823c <__ssputs_r+0x84>
 80081ca:	898a      	ldrh	r2, [r1, #12]
 80081cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081d0:	d032      	beq.n	8008238 <__ssputs_r+0x80>
 80081d2:	6825      	ldr	r5, [r4, #0]
 80081d4:	6909      	ldr	r1, [r1, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	eba5 0901 	sub.w	r9, r5, r1
 80081dc:	6965      	ldr	r5, [r4, #20]
 80081de:	444b      	add	r3, r9
 80081e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081e8:	106d      	asrs	r5, r5, #1
 80081ea:	429d      	cmp	r5, r3
 80081ec:	bf38      	it	cc
 80081ee:	461d      	movcc	r5, r3
 80081f0:	0553      	lsls	r3, r2, #21
 80081f2:	d531      	bpl.n	8008258 <__ssputs_r+0xa0>
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7ff ff85 	bl	8008104 <_malloc_r>
 80081fa:	4606      	mov	r6, r0
 80081fc:	b950      	cbnz	r0, 8008214 <__ssputs_r+0x5c>
 80081fe:	230c      	movs	r3, #12
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	f8ca 3000 	str.w	r3, [sl]
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800820e:	81a3      	strh	r3, [r4, #12]
 8008210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008214:	464a      	mov	r2, r9
 8008216:	6921      	ldr	r1, [r4, #16]
 8008218:	f7ff fb8a 	bl	8007930 <memcpy>
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	6126      	str	r6, [r4, #16]
 800822a:	444e      	add	r6, r9
 800822c:	6026      	str	r6, [r4, #0]
 800822e:	463e      	mov	r6, r7
 8008230:	6165      	str	r5, [r4, #20]
 8008232:	eba5 0509 	sub.w	r5, r5, r9
 8008236:	60a5      	str	r5, [r4, #8]
 8008238:	42be      	cmp	r6, r7
 800823a:	d900      	bls.n	800823e <__ssputs_r+0x86>
 800823c:	463e      	mov	r6, r7
 800823e:	4632      	mov	r2, r6
 8008240:	4641      	mov	r1, r8
 8008242:	6820      	ldr	r0, [r4, #0]
 8008244:	f000 f966 	bl	8008514 <memmove>
 8008248:	68a3      	ldr	r3, [r4, #8]
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	1b9b      	subs	r3, r3, r6
 800824e:	4432      	add	r2, r6
 8008250:	2000      	movs	r0, #0
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	6022      	str	r2, [r4, #0]
 8008256:	e7db      	b.n	8008210 <__ssputs_r+0x58>
 8008258:	462a      	mov	r2, r5
 800825a:	f000 f981 	bl	8008560 <_realloc_r>
 800825e:	4606      	mov	r6, r0
 8008260:	2800      	cmp	r0, #0
 8008262:	d1e1      	bne.n	8008228 <__ssputs_r+0x70>
 8008264:	4650      	mov	r0, sl
 8008266:	6921      	ldr	r1, [r4, #16]
 8008268:	f7ff ff00 	bl	800806c <_free_r>
 800826c:	e7c7      	b.n	80081fe <__ssputs_r+0x46>
	...

08008270 <_svfiprintf_r>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	4698      	mov	r8, r3
 8008276:	898b      	ldrh	r3, [r1, #12]
 8008278:	4607      	mov	r7, r0
 800827a:	061b      	lsls	r3, r3, #24
 800827c:	460d      	mov	r5, r1
 800827e:	4614      	mov	r4, r2
 8008280:	b09d      	sub	sp, #116	; 0x74
 8008282:	d50e      	bpl.n	80082a2 <_svfiprintf_r+0x32>
 8008284:	690b      	ldr	r3, [r1, #16]
 8008286:	b963      	cbnz	r3, 80082a2 <_svfiprintf_r+0x32>
 8008288:	2140      	movs	r1, #64	; 0x40
 800828a:	f7ff ff3b 	bl	8008104 <_malloc_r>
 800828e:	6028      	str	r0, [r5, #0]
 8008290:	6128      	str	r0, [r5, #16]
 8008292:	b920      	cbnz	r0, 800829e <_svfiprintf_r+0x2e>
 8008294:	230c      	movs	r3, #12
 8008296:	603b      	str	r3, [r7, #0]
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	e0d1      	b.n	8008442 <_svfiprintf_r+0x1d2>
 800829e:	2340      	movs	r3, #64	; 0x40
 80082a0:	616b      	str	r3, [r5, #20]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9309      	str	r3, [sp, #36]	; 0x24
 80082a6:	2320      	movs	r3, #32
 80082a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ac:	2330      	movs	r3, #48	; 0x30
 80082ae:	f04f 0901 	mov.w	r9, #1
 80082b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800845c <_svfiprintf_r+0x1ec>
 80082ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082be:	4623      	mov	r3, r4
 80082c0:	469a      	mov	sl, r3
 80082c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082c6:	b10a      	cbz	r2, 80082cc <_svfiprintf_r+0x5c>
 80082c8:	2a25      	cmp	r2, #37	; 0x25
 80082ca:	d1f9      	bne.n	80082c0 <_svfiprintf_r+0x50>
 80082cc:	ebba 0b04 	subs.w	fp, sl, r4
 80082d0:	d00b      	beq.n	80082ea <_svfiprintf_r+0x7a>
 80082d2:	465b      	mov	r3, fp
 80082d4:	4622      	mov	r2, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	4638      	mov	r0, r7
 80082da:	f7ff ff6d 	bl	80081b8 <__ssputs_r>
 80082de:	3001      	adds	r0, #1
 80082e0:	f000 80aa 	beq.w	8008438 <_svfiprintf_r+0x1c8>
 80082e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e6:	445a      	add	r2, fp
 80082e8:	9209      	str	r2, [sp, #36]	; 0x24
 80082ea:	f89a 3000 	ldrb.w	r3, [sl]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 80a2 	beq.w	8008438 <_svfiprintf_r+0x1c8>
 80082f4:	2300      	movs	r3, #0
 80082f6:	f04f 32ff 	mov.w	r2, #4294967295
 80082fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082fe:	f10a 0a01 	add.w	sl, sl, #1
 8008302:	9304      	str	r3, [sp, #16]
 8008304:	9307      	str	r3, [sp, #28]
 8008306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800830a:	931a      	str	r3, [sp, #104]	; 0x68
 800830c:	4654      	mov	r4, sl
 800830e:	2205      	movs	r2, #5
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	4851      	ldr	r0, [pc, #324]	; (800845c <_svfiprintf_r+0x1ec>)
 8008316:	f7ff fafd 	bl	8007914 <memchr>
 800831a:	9a04      	ldr	r2, [sp, #16]
 800831c:	b9d8      	cbnz	r0, 8008356 <_svfiprintf_r+0xe6>
 800831e:	06d0      	lsls	r0, r2, #27
 8008320:	bf44      	itt	mi
 8008322:	2320      	movmi	r3, #32
 8008324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008328:	0711      	lsls	r1, r2, #28
 800832a:	bf44      	itt	mi
 800832c:	232b      	movmi	r3, #43	; 0x2b
 800832e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008332:	f89a 3000 	ldrb.w	r3, [sl]
 8008336:	2b2a      	cmp	r3, #42	; 0x2a
 8008338:	d015      	beq.n	8008366 <_svfiprintf_r+0xf6>
 800833a:	4654      	mov	r4, sl
 800833c:	2000      	movs	r0, #0
 800833e:	f04f 0c0a 	mov.w	ip, #10
 8008342:	9a07      	ldr	r2, [sp, #28]
 8008344:	4621      	mov	r1, r4
 8008346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800834a:	3b30      	subs	r3, #48	; 0x30
 800834c:	2b09      	cmp	r3, #9
 800834e:	d94e      	bls.n	80083ee <_svfiprintf_r+0x17e>
 8008350:	b1b0      	cbz	r0, 8008380 <_svfiprintf_r+0x110>
 8008352:	9207      	str	r2, [sp, #28]
 8008354:	e014      	b.n	8008380 <_svfiprintf_r+0x110>
 8008356:	eba0 0308 	sub.w	r3, r0, r8
 800835a:	fa09 f303 	lsl.w	r3, r9, r3
 800835e:	4313      	orrs	r3, r2
 8008360:	46a2      	mov	sl, r4
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	e7d2      	b.n	800830c <_svfiprintf_r+0x9c>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	1d19      	adds	r1, r3, #4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	9103      	str	r1, [sp, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfbb      	ittet	lt
 8008372:	425b      	neglt	r3, r3
 8008374:	f042 0202 	orrlt.w	r2, r2, #2
 8008378:	9307      	strge	r3, [sp, #28]
 800837a:	9307      	strlt	r3, [sp, #28]
 800837c:	bfb8      	it	lt
 800837e:	9204      	strlt	r2, [sp, #16]
 8008380:	7823      	ldrb	r3, [r4, #0]
 8008382:	2b2e      	cmp	r3, #46	; 0x2e
 8008384:	d10c      	bne.n	80083a0 <_svfiprintf_r+0x130>
 8008386:	7863      	ldrb	r3, [r4, #1]
 8008388:	2b2a      	cmp	r3, #42	; 0x2a
 800838a:	d135      	bne.n	80083f8 <_svfiprintf_r+0x188>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	3402      	adds	r4, #2
 8008390:	1d1a      	adds	r2, r3, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	9203      	str	r2, [sp, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfb8      	it	lt
 800839a:	f04f 33ff 	movlt.w	r3, #4294967295
 800839e:	9305      	str	r3, [sp, #20]
 80083a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800846c <_svfiprintf_r+0x1fc>
 80083a4:	2203      	movs	r2, #3
 80083a6:	4650      	mov	r0, sl
 80083a8:	7821      	ldrb	r1, [r4, #0]
 80083aa:	f7ff fab3 	bl	8007914 <memchr>
 80083ae:	b140      	cbz	r0, 80083c2 <_svfiprintf_r+0x152>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	eba0 000a 	sub.w	r0, r0, sl
 80083b6:	fa03 f000 	lsl.w	r0, r3, r0
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	3401      	adds	r4, #1
 80083be:	4303      	orrs	r3, r0
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	2206      	movs	r2, #6
 80083c8:	4825      	ldr	r0, [pc, #148]	; (8008460 <_svfiprintf_r+0x1f0>)
 80083ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ce:	f7ff faa1 	bl	8007914 <memchr>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d038      	beq.n	8008448 <_svfiprintf_r+0x1d8>
 80083d6:	4b23      	ldr	r3, [pc, #140]	; (8008464 <_svfiprintf_r+0x1f4>)
 80083d8:	bb1b      	cbnz	r3, 8008422 <_svfiprintf_r+0x1b2>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	3307      	adds	r3, #7
 80083de:	f023 0307 	bic.w	r3, r3, #7
 80083e2:	3308      	adds	r3, #8
 80083e4:	9303      	str	r3, [sp, #12]
 80083e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e8:	4433      	add	r3, r6
 80083ea:	9309      	str	r3, [sp, #36]	; 0x24
 80083ec:	e767      	b.n	80082be <_svfiprintf_r+0x4e>
 80083ee:	460c      	mov	r4, r1
 80083f0:	2001      	movs	r0, #1
 80083f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083f6:	e7a5      	b.n	8008344 <_svfiprintf_r+0xd4>
 80083f8:	2300      	movs	r3, #0
 80083fa:	f04f 0c0a 	mov.w	ip, #10
 80083fe:	4619      	mov	r1, r3
 8008400:	3401      	adds	r4, #1
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	4620      	mov	r0, r4
 8008406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800840a:	3a30      	subs	r2, #48	; 0x30
 800840c:	2a09      	cmp	r2, #9
 800840e:	d903      	bls.n	8008418 <_svfiprintf_r+0x1a8>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0c5      	beq.n	80083a0 <_svfiprintf_r+0x130>
 8008414:	9105      	str	r1, [sp, #20]
 8008416:	e7c3      	b.n	80083a0 <_svfiprintf_r+0x130>
 8008418:	4604      	mov	r4, r0
 800841a:	2301      	movs	r3, #1
 800841c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008420:	e7f0      	b.n	8008404 <_svfiprintf_r+0x194>
 8008422:	ab03      	add	r3, sp, #12
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	462a      	mov	r2, r5
 8008428:	4638      	mov	r0, r7
 800842a:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <_svfiprintf_r+0x1f8>)
 800842c:	a904      	add	r1, sp, #16
 800842e:	f7fd ffcb 	bl	80063c8 <_printf_float>
 8008432:	1c42      	adds	r2, r0, #1
 8008434:	4606      	mov	r6, r0
 8008436:	d1d6      	bne.n	80083e6 <_svfiprintf_r+0x176>
 8008438:	89ab      	ldrh	r3, [r5, #12]
 800843a:	065b      	lsls	r3, r3, #25
 800843c:	f53f af2c 	bmi.w	8008298 <_svfiprintf_r+0x28>
 8008440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008442:	b01d      	add	sp, #116	; 0x74
 8008444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008448:	ab03      	add	r3, sp, #12
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	462a      	mov	r2, r5
 800844e:	4638      	mov	r0, r7
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <_svfiprintf_r+0x1f8>)
 8008452:	a904      	add	r1, sp, #16
 8008454:	f7fe fa54 	bl	8006900 <_printf_i>
 8008458:	e7eb      	b.n	8008432 <_svfiprintf_r+0x1c2>
 800845a:	bf00      	nop
 800845c:	0800c18c 	.word	0x0800c18c
 8008460:	0800c196 	.word	0x0800c196
 8008464:	080063c9 	.word	0x080063c9
 8008468:	080081b9 	.word	0x080081b9
 800846c:	0800c192 	.word	0x0800c192

08008470 <_sbrk_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	2300      	movs	r3, #0
 8008474:	4d05      	ldr	r5, [pc, #20]	; (800848c <_sbrk_r+0x1c>)
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	f7fb fe60 	bl	8004140 <_sbrk>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_sbrk_r+0x1a>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_sbrk_r+0x1a>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	2000049c 	.word	0x2000049c

08008490 <__assert_func>:
 8008490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008492:	4614      	mov	r4, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <__assert_func+0x2c>)
 8008498:	4605      	mov	r5, r0
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68d8      	ldr	r0, [r3, #12]
 800849e:	b14c      	cbz	r4, 80084b4 <__assert_func+0x24>
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <__assert_func+0x30>)
 80084a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084a6:	9100      	str	r1, [sp, #0]
 80084a8:	462b      	mov	r3, r5
 80084aa:	4906      	ldr	r1, [pc, #24]	; (80084c4 <__assert_func+0x34>)
 80084ac:	f000 f80e 	bl	80084cc <fiprintf>
 80084b0:	f000 faa2 	bl	80089f8 <abort>
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <__assert_func+0x38>)
 80084b6:	461c      	mov	r4, r3
 80084b8:	e7f3      	b.n	80084a2 <__assert_func+0x12>
 80084ba:	bf00      	nop
 80084bc:	2000000c 	.word	0x2000000c
 80084c0:	0800c19d 	.word	0x0800c19d
 80084c4:	0800c1aa 	.word	0x0800c1aa
 80084c8:	0800c1d8 	.word	0x0800c1d8

080084cc <fiprintf>:
 80084cc:	b40e      	push	{r1, r2, r3}
 80084ce:	b503      	push	{r0, r1, lr}
 80084d0:	4601      	mov	r1, r0
 80084d2:	ab03      	add	r3, sp, #12
 80084d4:	4805      	ldr	r0, [pc, #20]	; (80084ec <fiprintf+0x20>)
 80084d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084da:	6800      	ldr	r0, [r0, #0]
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	f000 f88d 	bl	80085fc <_vfiprintf_r>
 80084e2:	b002      	add	sp, #8
 80084e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e8:	b003      	add	sp, #12
 80084ea:	4770      	bx	lr
 80084ec:	2000000c 	.word	0x2000000c

080084f0 <__ascii_mbtowc>:
 80084f0:	b082      	sub	sp, #8
 80084f2:	b901      	cbnz	r1, 80084f6 <__ascii_mbtowc+0x6>
 80084f4:	a901      	add	r1, sp, #4
 80084f6:	b142      	cbz	r2, 800850a <__ascii_mbtowc+0x1a>
 80084f8:	b14b      	cbz	r3, 800850e <__ascii_mbtowc+0x1e>
 80084fa:	7813      	ldrb	r3, [r2, #0]
 80084fc:	600b      	str	r3, [r1, #0]
 80084fe:	7812      	ldrb	r2, [r2, #0]
 8008500:	1e10      	subs	r0, r2, #0
 8008502:	bf18      	it	ne
 8008504:	2001      	movne	r0, #1
 8008506:	b002      	add	sp, #8
 8008508:	4770      	bx	lr
 800850a:	4610      	mov	r0, r2
 800850c:	e7fb      	b.n	8008506 <__ascii_mbtowc+0x16>
 800850e:	f06f 0001 	mvn.w	r0, #1
 8008512:	e7f8      	b.n	8008506 <__ascii_mbtowc+0x16>

08008514 <memmove>:
 8008514:	4288      	cmp	r0, r1
 8008516:	b510      	push	{r4, lr}
 8008518:	eb01 0402 	add.w	r4, r1, r2
 800851c:	d902      	bls.n	8008524 <memmove+0x10>
 800851e:	4284      	cmp	r4, r0
 8008520:	4623      	mov	r3, r4
 8008522:	d807      	bhi.n	8008534 <memmove+0x20>
 8008524:	1e43      	subs	r3, r0, #1
 8008526:	42a1      	cmp	r1, r4
 8008528:	d008      	beq.n	800853c <memmove+0x28>
 800852a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008532:	e7f8      	b.n	8008526 <memmove+0x12>
 8008534:	4601      	mov	r1, r0
 8008536:	4402      	add	r2, r0
 8008538:	428a      	cmp	r2, r1
 800853a:	d100      	bne.n	800853e <memmove+0x2a>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008546:	e7f7      	b.n	8008538 <memmove+0x24>

08008548 <__malloc_lock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_lock+0x8>)
 800854a:	f000 bc15 	b.w	8008d78 <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	200004a4 	.word	0x200004a4

08008554 <__malloc_unlock>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__malloc_unlock+0x8>)
 8008556:	f000 bc10 	b.w	8008d7a <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	200004a4 	.word	0x200004a4

08008560 <_realloc_r>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	4607      	mov	r7, r0
 8008564:	4614      	mov	r4, r2
 8008566:	460e      	mov	r6, r1
 8008568:	b921      	cbnz	r1, 8008574 <_realloc_r+0x14>
 800856a:	4611      	mov	r1, r2
 800856c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008570:	f7ff bdc8 	b.w	8008104 <_malloc_r>
 8008574:	b922      	cbnz	r2, 8008580 <_realloc_r+0x20>
 8008576:	f7ff fd79 	bl	800806c <_free_r>
 800857a:	4625      	mov	r5, r4
 800857c:	4628      	mov	r0, r5
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008580:	f000 fc60 	bl	8008e44 <_malloc_usable_size_r>
 8008584:	42a0      	cmp	r0, r4
 8008586:	d20f      	bcs.n	80085a8 <_realloc_r+0x48>
 8008588:	4621      	mov	r1, r4
 800858a:	4638      	mov	r0, r7
 800858c:	f7ff fdba 	bl	8008104 <_malloc_r>
 8008590:	4605      	mov	r5, r0
 8008592:	2800      	cmp	r0, #0
 8008594:	d0f2      	beq.n	800857c <_realloc_r+0x1c>
 8008596:	4631      	mov	r1, r6
 8008598:	4622      	mov	r2, r4
 800859a:	f7ff f9c9 	bl	8007930 <memcpy>
 800859e:	4631      	mov	r1, r6
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7ff fd63 	bl	800806c <_free_r>
 80085a6:	e7e9      	b.n	800857c <_realloc_r+0x1c>
 80085a8:	4635      	mov	r5, r6
 80085aa:	e7e7      	b.n	800857c <_realloc_r+0x1c>

080085ac <__sfputc_r>:
 80085ac:	6893      	ldr	r3, [r2, #8]
 80085ae:	b410      	push	{r4}
 80085b0:	3b01      	subs	r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	6093      	str	r3, [r2, #8]
 80085b6:	da07      	bge.n	80085c8 <__sfputc_r+0x1c>
 80085b8:	6994      	ldr	r4, [r2, #24]
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	db01      	blt.n	80085c2 <__sfputc_r+0x16>
 80085be:	290a      	cmp	r1, #10
 80085c0:	d102      	bne.n	80085c8 <__sfputc_r+0x1c>
 80085c2:	bc10      	pop	{r4}
 80085c4:	f000 b94a 	b.w	800885c <__swbuf_r>
 80085c8:	6813      	ldr	r3, [r2, #0]
 80085ca:	1c58      	adds	r0, r3, #1
 80085cc:	6010      	str	r0, [r2, #0]
 80085ce:	7019      	strb	r1, [r3, #0]
 80085d0:	4608      	mov	r0, r1
 80085d2:	bc10      	pop	{r4}
 80085d4:	4770      	bx	lr

080085d6 <__sfputs_r>:
 80085d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d8:	4606      	mov	r6, r0
 80085da:	460f      	mov	r7, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	18d5      	adds	r5, r2, r3
 80085e0:	42ac      	cmp	r4, r5
 80085e2:	d101      	bne.n	80085e8 <__sfputs_r+0x12>
 80085e4:	2000      	movs	r0, #0
 80085e6:	e007      	b.n	80085f8 <__sfputs_r+0x22>
 80085e8:	463a      	mov	r2, r7
 80085ea:	4630      	mov	r0, r6
 80085ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f0:	f7ff ffdc 	bl	80085ac <__sfputc_r>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d1f3      	bne.n	80085e0 <__sfputs_r+0xa>
 80085f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085fc <_vfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	460d      	mov	r5, r1
 8008602:	4614      	mov	r4, r2
 8008604:	4698      	mov	r8, r3
 8008606:	4606      	mov	r6, r0
 8008608:	b09d      	sub	sp, #116	; 0x74
 800860a:	b118      	cbz	r0, 8008614 <_vfiprintf_r+0x18>
 800860c:	6983      	ldr	r3, [r0, #24]
 800860e:	b90b      	cbnz	r3, 8008614 <_vfiprintf_r+0x18>
 8008610:	f000 fb14 	bl	8008c3c <__sinit>
 8008614:	4b89      	ldr	r3, [pc, #548]	; (800883c <_vfiprintf_r+0x240>)
 8008616:	429d      	cmp	r5, r3
 8008618:	d11b      	bne.n	8008652 <_vfiprintf_r+0x56>
 800861a:	6875      	ldr	r5, [r6, #4]
 800861c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800861e:	07d9      	lsls	r1, r3, #31
 8008620:	d405      	bmi.n	800862e <_vfiprintf_r+0x32>
 8008622:	89ab      	ldrh	r3, [r5, #12]
 8008624:	059a      	lsls	r2, r3, #22
 8008626:	d402      	bmi.n	800862e <_vfiprintf_r+0x32>
 8008628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862a:	f000 fba5 	bl	8008d78 <__retarget_lock_acquire_recursive>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	071b      	lsls	r3, r3, #28
 8008632:	d501      	bpl.n	8008638 <_vfiprintf_r+0x3c>
 8008634:	692b      	ldr	r3, [r5, #16]
 8008636:	b9eb      	cbnz	r3, 8008674 <_vfiprintf_r+0x78>
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f000 f96e 	bl	800891c <__swsetup_r>
 8008640:	b1c0      	cbz	r0, 8008674 <_vfiprintf_r+0x78>
 8008642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008644:	07dc      	lsls	r4, r3, #31
 8008646:	d50e      	bpl.n	8008666 <_vfiprintf_r+0x6a>
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	b01d      	add	sp, #116	; 0x74
 800864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008652:	4b7b      	ldr	r3, [pc, #492]	; (8008840 <_vfiprintf_r+0x244>)
 8008654:	429d      	cmp	r5, r3
 8008656:	d101      	bne.n	800865c <_vfiprintf_r+0x60>
 8008658:	68b5      	ldr	r5, [r6, #8]
 800865a:	e7df      	b.n	800861c <_vfiprintf_r+0x20>
 800865c:	4b79      	ldr	r3, [pc, #484]	; (8008844 <_vfiprintf_r+0x248>)
 800865e:	429d      	cmp	r5, r3
 8008660:	bf08      	it	eq
 8008662:	68f5      	ldreq	r5, [r6, #12]
 8008664:	e7da      	b.n	800861c <_vfiprintf_r+0x20>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	0598      	lsls	r0, r3, #22
 800866a:	d4ed      	bmi.n	8008648 <_vfiprintf_r+0x4c>
 800866c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800866e:	f000 fb84 	bl	8008d7a <__retarget_lock_release_recursive>
 8008672:	e7e9      	b.n	8008648 <_vfiprintf_r+0x4c>
 8008674:	2300      	movs	r3, #0
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	2320      	movs	r3, #32
 800867a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800867e:	2330      	movs	r3, #48	; 0x30
 8008680:	f04f 0901 	mov.w	r9, #1
 8008684:	f8cd 800c 	str.w	r8, [sp, #12]
 8008688:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008848 <_vfiprintf_r+0x24c>
 800868c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008690:	4623      	mov	r3, r4
 8008692:	469a      	mov	sl, r3
 8008694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008698:	b10a      	cbz	r2, 800869e <_vfiprintf_r+0xa2>
 800869a:	2a25      	cmp	r2, #37	; 0x25
 800869c:	d1f9      	bne.n	8008692 <_vfiprintf_r+0x96>
 800869e:	ebba 0b04 	subs.w	fp, sl, r4
 80086a2:	d00b      	beq.n	80086bc <_vfiprintf_r+0xc0>
 80086a4:	465b      	mov	r3, fp
 80086a6:	4622      	mov	r2, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff ff93 	bl	80085d6 <__sfputs_r>
 80086b0:	3001      	adds	r0, #1
 80086b2:	f000 80aa 	beq.w	800880a <_vfiprintf_r+0x20e>
 80086b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b8:	445a      	add	r2, fp
 80086ba:	9209      	str	r2, [sp, #36]	; 0x24
 80086bc:	f89a 3000 	ldrb.w	r3, [sl]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80a2 	beq.w	800880a <_vfiprintf_r+0x20e>
 80086c6:	2300      	movs	r3, #0
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086d0:	f10a 0a01 	add.w	sl, sl, #1
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	9307      	str	r3, [sp, #28]
 80086d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086dc:	931a      	str	r3, [sp, #104]	; 0x68
 80086de:	4654      	mov	r4, sl
 80086e0:	2205      	movs	r2, #5
 80086e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e6:	4858      	ldr	r0, [pc, #352]	; (8008848 <_vfiprintf_r+0x24c>)
 80086e8:	f7ff f914 	bl	8007914 <memchr>
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	b9d8      	cbnz	r0, 8008728 <_vfiprintf_r+0x12c>
 80086f0:	06d1      	lsls	r1, r2, #27
 80086f2:	bf44      	itt	mi
 80086f4:	2320      	movmi	r3, #32
 80086f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086fa:	0713      	lsls	r3, r2, #28
 80086fc:	bf44      	itt	mi
 80086fe:	232b      	movmi	r3, #43	; 0x2b
 8008700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008704:	f89a 3000 	ldrb.w	r3, [sl]
 8008708:	2b2a      	cmp	r3, #42	; 0x2a
 800870a:	d015      	beq.n	8008738 <_vfiprintf_r+0x13c>
 800870c:	4654      	mov	r4, sl
 800870e:	2000      	movs	r0, #0
 8008710:	f04f 0c0a 	mov.w	ip, #10
 8008714:	9a07      	ldr	r2, [sp, #28]
 8008716:	4621      	mov	r1, r4
 8008718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800871c:	3b30      	subs	r3, #48	; 0x30
 800871e:	2b09      	cmp	r3, #9
 8008720:	d94e      	bls.n	80087c0 <_vfiprintf_r+0x1c4>
 8008722:	b1b0      	cbz	r0, 8008752 <_vfiprintf_r+0x156>
 8008724:	9207      	str	r2, [sp, #28]
 8008726:	e014      	b.n	8008752 <_vfiprintf_r+0x156>
 8008728:	eba0 0308 	sub.w	r3, r0, r8
 800872c:	fa09 f303 	lsl.w	r3, r9, r3
 8008730:	4313      	orrs	r3, r2
 8008732:	46a2      	mov	sl, r4
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	e7d2      	b.n	80086de <_vfiprintf_r+0xe2>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	1d19      	adds	r1, r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	9103      	str	r1, [sp, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	bfbb      	ittet	lt
 8008744:	425b      	neglt	r3, r3
 8008746:	f042 0202 	orrlt.w	r2, r2, #2
 800874a:	9307      	strge	r3, [sp, #28]
 800874c:	9307      	strlt	r3, [sp, #28]
 800874e:	bfb8      	it	lt
 8008750:	9204      	strlt	r2, [sp, #16]
 8008752:	7823      	ldrb	r3, [r4, #0]
 8008754:	2b2e      	cmp	r3, #46	; 0x2e
 8008756:	d10c      	bne.n	8008772 <_vfiprintf_r+0x176>
 8008758:	7863      	ldrb	r3, [r4, #1]
 800875a:	2b2a      	cmp	r3, #42	; 0x2a
 800875c:	d135      	bne.n	80087ca <_vfiprintf_r+0x1ce>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3402      	adds	r4, #2
 8008762:	1d1a      	adds	r2, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	9203      	str	r2, [sp, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	bfb8      	it	lt
 800876c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008858 <_vfiprintf_r+0x25c>
 8008776:	2203      	movs	r2, #3
 8008778:	4650      	mov	r0, sl
 800877a:	7821      	ldrb	r1, [r4, #0]
 800877c:	f7ff f8ca 	bl	8007914 <memchr>
 8008780:	b140      	cbz	r0, 8008794 <_vfiprintf_r+0x198>
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	eba0 000a 	sub.w	r0, r0, sl
 8008788:	fa03 f000 	lsl.w	r0, r3, r0
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	3401      	adds	r4, #1
 8008790:	4303      	orrs	r3, r0
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008798:	2206      	movs	r2, #6
 800879a:	482c      	ldr	r0, [pc, #176]	; (800884c <_vfiprintf_r+0x250>)
 800879c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087a0:	f7ff f8b8 	bl	8007914 <memchr>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d03f      	beq.n	8008828 <_vfiprintf_r+0x22c>
 80087a8:	4b29      	ldr	r3, [pc, #164]	; (8008850 <_vfiprintf_r+0x254>)
 80087aa:	bb1b      	cbnz	r3, 80087f4 <_vfiprintf_r+0x1f8>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	3307      	adds	r3, #7
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	3308      	adds	r3, #8
 80087b6:	9303      	str	r3, [sp, #12]
 80087b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ba:	443b      	add	r3, r7
 80087bc:	9309      	str	r3, [sp, #36]	; 0x24
 80087be:	e767      	b.n	8008690 <_vfiprintf_r+0x94>
 80087c0:	460c      	mov	r4, r1
 80087c2:	2001      	movs	r0, #1
 80087c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c8:	e7a5      	b.n	8008716 <_vfiprintf_r+0x11a>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f04f 0c0a 	mov.w	ip, #10
 80087d0:	4619      	mov	r1, r3
 80087d2:	3401      	adds	r4, #1
 80087d4:	9305      	str	r3, [sp, #20]
 80087d6:	4620      	mov	r0, r4
 80087d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087dc:	3a30      	subs	r2, #48	; 0x30
 80087de:	2a09      	cmp	r2, #9
 80087e0:	d903      	bls.n	80087ea <_vfiprintf_r+0x1ee>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0c5      	beq.n	8008772 <_vfiprintf_r+0x176>
 80087e6:	9105      	str	r1, [sp, #20]
 80087e8:	e7c3      	b.n	8008772 <_vfiprintf_r+0x176>
 80087ea:	4604      	mov	r4, r0
 80087ec:	2301      	movs	r3, #1
 80087ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80087f2:	e7f0      	b.n	80087d6 <_vfiprintf_r+0x1da>
 80087f4:	ab03      	add	r3, sp, #12
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	4b15      	ldr	r3, [pc, #84]	; (8008854 <_vfiprintf_r+0x258>)
 80087fe:	a904      	add	r1, sp, #16
 8008800:	f7fd fde2 	bl	80063c8 <_printf_float>
 8008804:	4607      	mov	r7, r0
 8008806:	1c78      	adds	r0, r7, #1
 8008808:	d1d6      	bne.n	80087b8 <_vfiprintf_r+0x1bc>
 800880a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800880c:	07d9      	lsls	r1, r3, #31
 800880e:	d405      	bmi.n	800881c <_vfiprintf_r+0x220>
 8008810:	89ab      	ldrh	r3, [r5, #12]
 8008812:	059a      	lsls	r2, r3, #22
 8008814:	d402      	bmi.n	800881c <_vfiprintf_r+0x220>
 8008816:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008818:	f000 faaf 	bl	8008d7a <__retarget_lock_release_recursive>
 800881c:	89ab      	ldrh	r3, [r5, #12]
 800881e:	065b      	lsls	r3, r3, #25
 8008820:	f53f af12 	bmi.w	8008648 <_vfiprintf_r+0x4c>
 8008824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008826:	e711      	b.n	800864c <_vfiprintf_r+0x50>
 8008828:	ab03      	add	r3, sp, #12
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	462a      	mov	r2, r5
 800882e:	4630      	mov	r0, r6
 8008830:	4b08      	ldr	r3, [pc, #32]	; (8008854 <_vfiprintf_r+0x258>)
 8008832:	a904      	add	r1, sp, #16
 8008834:	f7fe f864 	bl	8006900 <_printf_i>
 8008838:	e7e4      	b.n	8008804 <_vfiprintf_r+0x208>
 800883a:	bf00      	nop
 800883c:	0800c304 	.word	0x0800c304
 8008840:	0800c324 	.word	0x0800c324
 8008844:	0800c2e4 	.word	0x0800c2e4
 8008848:	0800c18c 	.word	0x0800c18c
 800884c:	0800c196 	.word	0x0800c196
 8008850:	080063c9 	.word	0x080063c9
 8008854:	080085d7 	.word	0x080085d7
 8008858:	0800c192 	.word	0x0800c192

0800885c <__swbuf_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	460e      	mov	r6, r1
 8008860:	4614      	mov	r4, r2
 8008862:	4605      	mov	r5, r0
 8008864:	b118      	cbz	r0, 800886e <__swbuf_r+0x12>
 8008866:	6983      	ldr	r3, [r0, #24]
 8008868:	b90b      	cbnz	r3, 800886e <__swbuf_r+0x12>
 800886a:	f000 f9e7 	bl	8008c3c <__sinit>
 800886e:	4b21      	ldr	r3, [pc, #132]	; (80088f4 <__swbuf_r+0x98>)
 8008870:	429c      	cmp	r4, r3
 8008872:	d12b      	bne.n	80088cc <__swbuf_r+0x70>
 8008874:	686c      	ldr	r4, [r5, #4]
 8008876:	69a3      	ldr	r3, [r4, #24]
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	071a      	lsls	r2, r3, #28
 800887e:	d52f      	bpl.n	80088e0 <__swbuf_r+0x84>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	b36b      	cbz	r3, 80088e0 <__swbuf_r+0x84>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	6820      	ldr	r0, [r4, #0]
 8008888:	b2f6      	uxtb	r6, r6
 800888a:	1ac0      	subs	r0, r0, r3
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	4637      	mov	r7, r6
 8008890:	4283      	cmp	r3, r0
 8008892:	dc04      	bgt.n	800889e <__swbuf_r+0x42>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f000 f93c 	bl	8008b14 <_fflush_r>
 800889c:	bb30      	cbnz	r0, 80088ec <__swbuf_r+0x90>
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	3001      	adds	r0, #1
 80088a2:	3b01      	subs	r3, #1
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	701e      	strb	r6, [r3, #0]
 80088ae:	6963      	ldr	r3, [r4, #20]
 80088b0:	4283      	cmp	r3, r0
 80088b2:	d004      	beq.n	80088be <__swbuf_r+0x62>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	07db      	lsls	r3, r3, #31
 80088b8:	d506      	bpl.n	80088c8 <__swbuf_r+0x6c>
 80088ba:	2e0a      	cmp	r6, #10
 80088bc:	d104      	bne.n	80088c8 <__swbuf_r+0x6c>
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f927 	bl	8008b14 <_fflush_r>
 80088c6:	b988      	cbnz	r0, 80088ec <__swbuf_r+0x90>
 80088c8:	4638      	mov	r0, r7
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <__swbuf_r+0x9c>)
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d101      	bne.n	80088d6 <__swbuf_r+0x7a>
 80088d2:	68ac      	ldr	r4, [r5, #8]
 80088d4:	e7cf      	b.n	8008876 <__swbuf_r+0x1a>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <__swbuf_r+0xa0>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	bf08      	it	eq
 80088dc:	68ec      	ldreq	r4, [r5, #12]
 80088de:	e7ca      	b.n	8008876 <__swbuf_r+0x1a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	f000 f81a 	bl	800891c <__swsetup_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0cb      	beq.n	8008884 <__swbuf_r+0x28>
 80088ec:	f04f 37ff 	mov.w	r7, #4294967295
 80088f0:	e7ea      	b.n	80088c8 <__swbuf_r+0x6c>
 80088f2:	bf00      	nop
 80088f4:	0800c304 	.word	0x0800c304
 80088f8:	0800c324 	.word	0x0800c324
 80088fc:	0800c2e4 	.word	0x0800c2e4

08008900 <__ascii_wctomb>:
 8008900:	4603      	mov	r3, r0
 8008902:	4608      	mov	r0, r1
 8008904:	b141      	cbz	r1, 8008918 <__ascii_wctomb+0x18>
 8008906:	2aff      	cmp	r2, #255	; 0xff
 8008908:	d904      	bls.n	8008914 <__ascii_wctomb+0x14>
 800890a:	228a      	movs	r2, #138	; 0x8a
 800890c:	f04f 30ff 	mov.w	r0, #4294967295
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	4770      	bx	lr
 8008914:	2001      	movs	r0, #1
 8008916:	700a      	strb	r2, [r1, #0]
 8008918:	4770      	bx	lr
	...

0800891c <__swsetup_r>:
 800891c:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <__swsetup_r+0xcc>)
 800891e:	b570      	push	{r4, r5, r6, lr}
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	4606      	mov	r6, r0
 8008924:	460c      	mov	r4, r1
 8008926:	b125      	cbz	r5, 8008932 <__swsetup_r+0x16>
 8008928:	69ab      	ldr	r3, [r5, #24]
 800892a:	b913      	cbnz	r3, 8008932 <__swsetup_r+0x16>
 800892c:	4628      	mov	r0, r5
 800892e:	f000 f985 	bl	8008c3c <__sinit>
 8008932:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <__swsetup_r+0xd0>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d10f      	bne.n	8008958 <__swsetup_r+0x3c>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008940:	0719      	lsls	r1, r3, #28
 8008942:	d42c      	bmi.n	800899e <__swsetup_r+0x82>
 8008944:	06dd      	lsls	r5, r3, #27
 8008946:	d411      	bmi.n	800896c <__swsetup_r+0x50>
 8008948:	2309      	movs	r3, #9
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	81a3      	strh	r3, [r4, #12]
 8008956:	e03e      	b.n	80089d6 <__swsetup_r+0xba>
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <__swsetup_r+0xd4>)
 800895a:	429c      	cmp	r4, r3
 800895c:	d101      	bne.n	8008962 <__swsetup_r+0x46>
 800895e:	68ac      	ldr	r4, [r5, #8]
 8008960:	e7eb      	b.n	800893a <__swsetup_r+0x1e>
 8008962:	4b24      	ldr	r3, [pc, #144]	; (80089f4 <__swsetup_r+0xd8>)
 8008964:	429c      	cmp	r4, r3
 8008966:	bf08      	it	eq
 8008968:	68ec      	ldreq	r4, [r5, #12]
 800896a:	e7e6      	b.n	800893a <__swsetup_r+0x1e>
 800896c:	0758      	lsls	r0, r3, #29
 800896e:	d512      	bpl.n	8008996 <__swsetup_r+0x7a>
 8008970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008972:	b141      	cbz	r1, 8008986 <__swsetup_r+0x6a>
 8008974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008978:	4299      	cmp	r1, r3
 800897a:	d002      	beq.n	8008982 <__swsetup_r+0x66>
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff fb75 	bl	800806c <_free_r>
 8008982:	2300      	movs	r3, #0
 8008984:	6363      	str	r3, [r4, #52]	; 0x34
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	2300      	movs	r3, #0
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	f043 0308 	orr.w	r3, r3, #8
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	b94b      	cbnz	r3, 80089b6 <__swsetup_r+0x9a>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ac:	d003      	beq.n	80089b6 <__swsetup_r+0x9a>
 80089ae:	4621      	mov	r1, r4
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 fa07 	bl	8008dc4 <__smakebuf_r>
 80089b6:	89a0      	ldrh	r0, [r4, #12]
 80089b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089bc:	f010 0301 	ands.w	r3, r0, #1
 80089c0:	d00a      	beq.n	80089d8 <__swsetup_r+0xbc>
 80089c2:	2300      	movs	r3, #0
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	6963      	ldr	r3, [r4, #20]
 80089c8:	425b      	negs	r3, r3
 80089ca:	61a3      	str	r3, [r4, #24]
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b943      	cbnz	r3, 80089e2 <__swsetup_r+0xc6>
 80089d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089d4:	d1ba      	bne.n	800894c <__swsetup_r+0x30>
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	0781      	lsls	r1, r0, #30
 80089da:	bf58      	it	pl
 80089dc:	6963      	ldrpl	r3, [r4, #20]
 80089de:	60a3      	str	r3, [r4, #8]
 80089e0:	e7f4      	b.n	80089cc <__swsetup_r+0xb0>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e7f7      	b.n	80089d6 <__swsetup_r+0xba>
 80089e6:	bf00      	nop
 80089e8:	2000000c 	.word	0x2000000c
 80089ec:	0800c304 	.word	0x0800c304
 80089f0:	0800c324 	.word	0x0800c324
 80089f4:	0800c2e4 	.word	0x0800c2e4

080089f8 <abort>:
 80089f8:	2006      	movs	r0, #6
 80089fa:	b508      	push	{r3, lr}
 80089fc:	f000 fa52 	bl	8008ea4 <raise>
 8008a00:	2001      	movs	r0, #1
 8008a02:	f7fb fb2a 	bl	800405a <_exit>
	...

08008a08 <__sflush_r>:
 8008a08:	898a      	ldrh	r2, [r1, #12]
 8008a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	4605      	mov	r5, r0
 8008a10:	0710      	lsls	r0, r2, #28
 8008a12:	460c      	mov	r4, r1
 8008a14:	d458      	bmi.n	8008ac8 <__sflush_r+0xc0>
 8008a16:	684b      	ldr	r3, [r1, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc05      	bgt.n	8008a28 <__sflush_r+0x20>
 8008a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dc02      	bgt.n	8008a28 <__sflush_r+0x20>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d0f9      	beq.n	8008a22 <__sflush_r+0x1a>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a34:	682f      	ldr	r7, [r5, #0]
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	d032      	beq.n	8008aa0 <__sflush_r+0x98>
 8008a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	075a      	lsls	r2, r3, #29
 8008a40:	d505      	bpl.n	8008a4e <__sflush_r+0x46>
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	1ac0      	subs	r0, r0, r3
 8008a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a48:	b10b      	cbz	r3, 8008a4e <__sflush_r+0x46>
 8008a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	2300      	movs	r3, #0
 8008a50:	4602      	mov	r2, r0
 8008a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a54:	4628      	mov	r0, r5
 8008a56:	6a21      	ldr	r1, [r4, #32]
 8008a58:	47b0      	blx	r6
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	d106      	bne.n	8008a6e <__sflush_r+0x66>
 8008a60:	6829      	ldr	r1, [r5, #0]
 8008a62:	291d      	cmp	r1, #29
 8008a64:	d82c      	bhi.n	8008ac0 <__sflush_r+0xb8>
 8008a66:	4a2a      	ldr	r2, [pc, #168]	; (8008b10 <__sflush_r+0x108>)
 8008a68:	40ca      	lsrs	r2, r1
 8008a6a:	07d6      	lsls	r6, r2, #31
 8008a6c:	d528      	bpl.n	8008ac0 <__sflush_r+0xb8>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6062      	str	r2, [r4, #4]
 8008a72:	6922      	ldr	r2, [r4, #16]
 8008a74:	04d9      	lsls	r1, r3, #19
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	d504      	bpl.n	8008a84 <__sflush_r+0x7c>
 8008a7a:	1c42      	adds	r2, r0, #1
 8008a7c:	d101      	bne.n	8008a82 <__sflush_r+0x7a>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b903      	cbnz	r3, 8008a84 <__sflush_r+0x7c>
 8008a82:	6560      	str	r0, [r4, #84]	; 0x54
 8008a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a86:	602f      	str	r7, [r5, #0]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	d0ca      	beq.n	8008a22 <__sflush_r+0x1a>
 8008a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a90:	4299      	cmp	r1, r3
 8008a92:	d002      	beq.n	8008a9a <__sflush_r+0x92>
 8008a94:	4628      	mov	r0, r5
 8008a96:	f7ff fae9 	bl	800806c <_free_r>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a9e:	e7c1      	b.n	8008a24 <__sflush_r+0x1c>
 8008aa0:	6a21      	ldr	r1, [r4, #32]
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b0      	blx	r6
 8008aa8:	1c41      	adds	r1, r0, #1
 8008aaa:	d1c7      	bne.n	8008a3c <__sflush_r+0x34>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0c4      	beq.n	8008a3c <__sflush_r+0x34>
 8008ab2:	2b1d      	cmp	r3, #29
 8008ab4:	d001      	beq.n	8008aba <__sflush_r+0xb2>
 8008ab6:	2b16      	cmp	r3, #22
 8008ab8:	d101      	bne.n	8008abe <__sflush_r+0xb6>
 8008aba:	602f      	str	r7, [r5, #0]
 8008abc:	e7b1      	b.n	8008a22 <__sflush_r+0x1a>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	e7ad      	b.n	8008a24 <__sflush_r+0x1c>
 8008ac8:	690f      	ldr	r7, [r1, #16]
 8008aca:	2f00      	cmp	r7, #0
 8008acc:	d0a9      	beq.n	8008a22 <__sflush_r+0x1a>
 8008ace:	0793      	lsls	r3, r2, #30
 8008ad0:	bf18      	it	ne
 8008ad2:	2300      	movne	r3, #0
 8008ad4:	680e      	ldr	r6, [r1, #0]
 8008ad6:	bf08      	it	eq
 8008ad8:	694b      	ldreq	r3, [r1, #20]
 8008ada:	eba6 0807 	sub.w	r8, r6, r7
 8008ade:	600f      	str	r7, [r1, #0]
 8008ae0:	608b      	str	r3, [r1, #8]
 8008ae2:	f1b8 0f00 	cmp.w	r8, #0
 8008ae6:	dd9c      	ble.n	8008a22 <__sflush_r+0x1a>
 8008ae8:	4643      	mov	r3, r8
 8008aea:	463a      	mov	r2, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	6a21      	ldr	r1, [r4, #32]
 8008af0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af2:	47b0      	blx	r6
 8008af4:	2800      	cmp	r0, #0
 8008af6:	dc06      	bgt.n	8008b06 <__sflush_r+0xfe>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f04f 30ff 	mov.w	r0, #4294967295
 8008afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	e78e      	b.n	8008a24 <__sflush_r+0x1c>
 8008b06:	4407      	add	r7, r0
 8008b08:	eba8 0800 	sub.w	r8, r8, r0
 8008b0c:	e7e9      	b.n	8008ae2 <__sflush_r+0xda>
 8008b0e:	bf00      	nop
 8008b10:	20400001 	.word	0x20400001

08008b14 <_fflush_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	690b      	ldr	r3, [r1, #16]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b913      	cbnz	r3, 8008b24 <_fflush_r+0x10>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	4628      	mov	r0, r5
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	b118      	cbz	r0, 8008b2e <_fflush_r+0x1a>
 8008b26:	6983      	ldr	r3, [r0, #24]
 8008b28:	b90b      	cbnz	r3, 8008b2e <_fflush_r+0x1a>
 8008b2a:	f000 f887 	bl	8008c3c <__sinit>
 8008b2e:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <_fflush_r+0x6c>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d11b      	bne.n	8008b6c <_fflush_r+0x58>
 8008b34:	686c      	ldr	r4, [r5, #4]
 8008b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0ef      	beq.n	8008b1e <_fflush_r+0xa>
 8008b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b40:	07d0      	lsls	r0, r2, #31
 8008b42:	d404      	bmi.n	8008b4e <_fflush_r+0x3a>
 8008b44:	0599      	lsls	r1, r3, #22
 8008b46:	d402      	bmi.n	8008b4e <_fflush_r+0x3a>
 8008b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4a:	f000 f915 	bl	8008d78 <__retarget_lock_acquire_recursive>
 8008b4e:	4628      	mov	r0, r5
 8008b50:	4621      	mov	r1, r4
 8008b52:	f7ff ff59 	bl	8008a08 <__sflush_r>
 8008b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b58:	4605      	mov	r5, r0
 8008b5a:	07da      	lsls	r2, r3, #31
 8008b5c:	d4e0      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	059b      	lsls	r3, r3, #22
 8008b62:	d4dd      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b66:	f000 f908 	bl	8008d7a <__retarget_lock_release_recursive>
 8008b6a:	e7d9      	b.n	8008b20 <_fflush_r+0xc>
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <_fflush_r+0x70>)
 8008b6e:	429c      	cmp	r4, r3
 8008b70:	d101      	bne.n	8008b76 <_fflush_r+0x62>
 8008b72:	68ac      	ldr	r4, [r5, #8]
 8008b74:	e7df      	b.n	8008b36 <_fflush_r+0x22>
 8008b76:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <_fflush_r+0x74>)
 8008b78:	429c      	cmp	r4, r3
 8008b7a:	bf08      	it	eq
 8008b7c:	68ec      	ldreq	r4, [r5, #12]
 8008b7e:	e7da      	b.n	8008b36 <_fflush_r+0x22>
 8008b80:	0800c304 	.word	0x0800c304
 8008b84:	0800c324 	.word	0x0800c324
 8008b88:	0800c2e4 	.word	0x0800c2e4

08008b8c <std>:
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	4604      	mov	r4, r0
 8008b92:	e9c0 3300 	strd	r3, r3, [r0]
 8008b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b9a:	6083      	str	r3, [r0, #8]
 8008b9c:	8181      	strh	r1, [r0, #12]
 8008b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008ba0:	81c2      	strh	r2, [r0, #14]
 8008ba2:	6183      	str	r3, [r0, #24]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	2208      	movs	r2, #8
 8008ba8:	305c      	adds	r0, #92	; 0x5c
 8008baa:	f7fd fb67 	bl	800627c <memset>
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <std+0x38>)
 8008bb0:	6224      	str	r4, [r4, #32]
 8008bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <std+0x3c>)
 8008bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bb8:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <std+0x40>)
 8008bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <std+0x44>)
 8008bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08008edd 	.word	0x08008edd
 8008bc8:	08008eff 	.word	0x08008eff
 8008bcc:	08008f37 	.word	0x08008f37
 8008bd0:	08008f5b 	.word	0x08008f5b

08008bd4 <_cleanup_r>:
 8008bd4:	4901      	ldr	r1, [pc, #4]	; (8008bdc <_cleanup_r+0x8>)
 8008bd6:	f000 b8af 	b.w	8008d38 <_fwalk_reent>
 8008bda:	bf00      	nop
 8008bdc:	08008b15 	.word	0x08008b15

08008be0 <__sfmoreglue>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	2568      	movs	r5, #104	; 0x68
 8008be4:	1e4a      	subs	r2, r1, #1
 8008be6:	4355      	muls	r5, r2
 8008be8:	460e      	mov	r6, r1
 8008bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bee:	f7ff fa89 	bl	8008104 <_malloc_r>
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	b140      	cbz	r0, 8008c08 <__sfmoreglue+0x28>
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8008bfc:	300c      	adds	r0, #12
 8008bfe:	60a0      	str	r0, [r4, #8]
 8008c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c04:	f7fd fb3a 	bl	800627c <memset>
 8008c08:	4620      	mov	r0, r4
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}

08008c0c <__sfp_lock_acquire>:
 8008c0c:	4801      	ldr	r0, [pc, #4]	; (8008c14 <__sfp_lock_acquire+0x8>)
 8008c0e:	f000 b8b3 	b.w	8008d78 <__retarget_lock_acquire_recursive>
 8008c12:	bf00      	nop
 8008c14:	200004a8 	.word	0x200004a8

08008c18 <__sfp_lock_release>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__sfp_lock_release+0x8>)
 8008c1a:	f000 b8ae 	b.w	8008d7a <__retarget_lock_release_recursive>
 8008c1e:	bf00      	nop
 8008c20:	200004a8 	.word	0x200004a8

08008c24 <__sinit_lock_acquire>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__sinit_lock_acquire+0x8>)
 8008c26:	f000 b8a7 	b.w	8008d78 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	200004a3 	.word	0x200004a3

08008c30 <__sinit_lock_release>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__sinit_lock_release+0x8>)
 8008c32:	f000 b8a2 	b.w	8008d7a <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	200004a3 	.word	0x200004a3

08008c3c <__sinit>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	4604      	mov	r4, r0
 8008c40:	f7ff fff0 	bl	8008c24 <__sinit_lock_acquire>
 8008c44:	69a3      	ldr	r3, [r4, #24]
 8008c46:	b11b      	cbz	r3, 8008c50 <__sinit+0x14>
 8008c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4c:	f7ff bff0 	b.w	8008c30 <__sinit_lock_release>
 8008c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c54:	6523      	str	r3, [r4, #80]	; 0x50
 8008c56:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <__sinit+0x68>)
 8008c58:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <__sinit+0x6c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	bf08      	it	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	4620      	mov	r0, r4
 8008c66:	bf08      	it	eq
 8008c68:	61a3      	streq	r3, [r4, #24]
 8008c6a:	f000 f81f 	bl	8008cac <__sfp>
 8008c6e:	6060      	str	r0, [r4, #4]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f81b 	bl	8008cac <__sfp>
 8008c76:	60a0      	str	r0, [r4, #8]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 f817 	bl	8008cac <__sfp>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2104      	movs	r1, #4
 8008c82:	60e0      	str	r0, [r4, #12]
 8008c84:	6860      	ldr	r0, [r4, #4]
 8008c86:	f7ff ff81 	bl	8008b8c <std>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	2109      	movs	r1, #9
 8008c8e:	68a0      	ldr	r0, [r4, #8]
 8008c90:	f7ff ff7c 	bl	8008b8c <std>
 8008c94:	2202      	movs	r2, #2
 8008c96:	2112      	movs	r1, #18
 8008c98:	68e0      	ldr	r0, [r4, #12]
 8008c9a:	f7ff ff77 	bl	8008b8c <std>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61a3      	str	r3, [r4, #24]
 8008ca2:	e7d1      	b.n	8008c48 <__sinit+0xc>
 8008ca4:	0800bf64 	.word	0x0800bf64
 8008ca8:	08008bd5 	.word	0x08008bd5

08008cac <__sfp>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	4607      	mov	r7, r0
 8008cb0:	f7ff ffac 	bl	8008c0c <__sfp_lock_acquire>
 8008cb4:	4b1e      	ldr	r3, [pc, #120]	; (8008d30 <__sfp+0x84>)
 8008cb6:	681e      	ldr	r6, [r3, #0]
 8008cb8:	69b3      	ldr	r3, [r6, #24]
 8008cba:	b913      	cbnz	r3, 8008cc2 <__sfp+0x16>
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff ffbd 	bl	8008c3c <__sinit>
 8008cc2:	3648      	adds	r6, #72	; 0x48
 8008cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	d503      	bpl.n	8008cd4 <__sfp+0x28>
 8008ccc:	6833      	ldr	r3, [r6, #0]
 8008cce:	b30b      	cbz	r3, 8008d14 <__sfp+0x68>
 8008cd0:	6836      	ldr	r6, [r6, #0]
 8008cd2:	e7f7      	b.n	8008cc4 <__sfp+0x18>
 8008cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd8:	b9d5      	cbnz	r5, 8008d10 <__sfp+0x64>
 8008cda:	4b16      	ldr	r3, [pc, #88]	; (8008d34 <__sfp+0x88>)
 8008cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ce0:	60e3      	str	r3, [r4, #12]
 8008ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ce4:	f000 f847 	bl	8008d76 <__retarget_lock_init_recursive>
 8008ce8:	f7ff ff96 	bl	8008c18 <__sfp_lock_release>
 8008cec:	2208      	movs	r2, #8
 8008cee:	4629      	mov	r1, r5
 8008cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cf8:	6025      	str	r5, [r4, #0]
 8008cfa:	61a5      	str	r5, [r4, #24]
 8008cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d00:	f7fd fabc 	bl	800627c <memset>
 8008d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d10:	3468      	adds	r4, #104	; 0x68
 8008d12:	e7d9      	b.n	8008cc8 <__sfp+0x1c>
 8008d14:	2104      	movs	r1, #4
 8008d16:	4638      	mov	r0, r7
 8008d18:	f7ff ff62 	bl	8008be0 <__sfmoreglue>
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	6030      	str	r0, [r6, #0]
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1d5      	bne.n	8008cd0 <__sfp+0x24>
 8008d24:	f7ff ff78 	bl	8008c18 <__sfp_lock_release>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	e7ee      	b.n	8008d0c <__sfp+0x60>
 8008d2e:	bf00      	nop
 8008d30:	0800bf64 	.word	0x0800bf64
 8008d34:	ffff0001 	.word	0xffff0001

08008d38 <_fwalk_reent>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	4688      	mov	r8, r1
 8008d40:	2700      	movs	r7, #0
 8008d42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d4e:	d505      	bpl.n	8008d5c <_fwalk_reent+0x24>
 8008d50:	6824      	ldr	r4, [r4, #0]
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d1f7      	bne.n	8008d46 <_fwalk_reent+0xe>
 8008d56:	4638      	mov	r0, r7
 8008d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5c:	89ab      	ldrh	r3, [r5, #12]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d907      	bls.n	8008d72 <_fwalk_reent+0x3a>
 8008d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d66:	3301      	adds	r3, #1
 8008d68:	d003      	beq.n	8008d72 <_fwalk_reent+0x3a>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	47c0      	blx	r8
 8008d70:	4307      	orrs	r7, r0
 8008d72:	3568      	adds	r5, #104	; 0x68
 8008d74:	e7e9      	b.n	8008d4a <_fwalk_reent+0x12>

08008d76 <__retarget_lock_init_recursive>:
 8008d76:	4770      	bx	lr

08008d78 <__retarget_lock_acquire_recursive>:
 8008d78:	4770      	bx	lr

08008d7a <__retarget_lock_release_recursive>:
 8008d7a:	4770      	bx	lr

08008d7c <__swhatbuf_r>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	460e      	mov	r6, r1
 8008d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d84:	4614      	mov	r4, r2
 8008d86:	2900      	cmp	r1, #0
 8008d88:	461d      	mov	r5, r3
 8008d8a:	b096      	sub	sp, #88	; 0x58
 8008d8c:	da07      	bge.n	8008d9e <__swhatbuf_r+0x22>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	89b3      	ldrh	r3, [r6, #12]
 8008d94:	061a      	lsls	r2, r3, #24
 8008d96:	d410      	bmi.n	8008dba <__swhatbuf_r+0x3e>
 8008d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d9c:	e00e      	b.n	8008dbc <__swhatbuf_r+0x40>
 8008d9e:	466a      	mov	r2, sp
 8008da0:	f000 f902 	bl	8008fa8 <_fstat_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	dbf2      	blt.n	8008d8e <__swhatbuf_r+0x12>
 8008da8:	9a01      	ldr	r2, [sp, #4]
 8008daa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008db2:	425a      	negs	r2, r3
 8008db4:	415a      	adcs	r2, r3
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	e7ee      	b.n	8008d98 <__swhatbuf_r+0x1c>
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	b016      	add	sp, #88	; 0x58
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}

08008dc4 <__smakebuf_r>:
 8008dc4:	898b      	ldrh	r3, [r1, #12]
 8008dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dc8:	079d      	lsls	r5, r3, #30
 8008dca:	4606      	mov	r6, r0
 8008dcc:	460c      	mov	r4, r1
 8008dce:	d507      	bpl.n	8008de0 <__smakebuf_r+0x1c>
 8008dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	2301      	movs	r3, #1
 8008dda:	6163      	str	r3, [r4, #20]
 8008ddc:	b002      	add	sp, #8
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	466a      	mov	r2, sp
 8008de2:	ab01      	add	r3, sp, #4
 8008de4:	f7ff ffca 	bl	8008d7c <__swhatbuf_r>
 8008de8:	9900      	ldr	r1, [sp, #0]
 8008dea:	4605      	mov	r5, r0
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff f989 	bl	8008104 <_malloc_r>
 8008df2:	b948      	cbnz	r0, 8008e08 <__smakebuf_r+0x44>
 8008df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df8:	059a      	lsls	r2, r3, #22
 8008dfa:	d4ef      	bmi.n	8008ddc <__smakebuf_r+0x18>
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	f043 0302 	orr.w	r3, r3, #2
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	e7e3      	b.n	8008dd0 <__smakebuf_r+0xc>
 8008e08:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <__smakebuf_r+0x7c>)
 8008e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	6020      	str	r0, [r4, #0]
 8008e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	9b00      	ldr	r3, [sp, #0]
 8008e18:	6120      	str	r0, [r4, #16]
 8008e1a:	6163      	str	r3, [r4, #20]
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	b15b      	cbz	r3, 8008e38 <__smakebuf_r+0x74>
 8008e20:	4630      	mov	r0, r6
 8008e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e26:	f000 f8d1 	bl	8008fcc <_isatty_r>
 8008e2a:	b128      	cbz	r0, 8008e38 <__smakebuf_r+0x74>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	f043 0301 	orr.w	r3, r3, #1
 8008e36:	81a3      	strh	r3, [r4, #12]
 8008e38:	89a0      	ldrh	r0, [r4, #12]
 8008e3a:	4305      	orrs	r5, r0
 8008e3c:	81a5      	strh	r5, [r4, #12]
 8008e3e:	e7cd      	b.n	8008ddc <__smakebuf_r+0x18>
 8008e40:	08008bd5 	.word	0x08008bd5

08008e44 <_malloc_usable_size_r>:
 8008e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e48:	1f18      	subs	r0, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bfbc      	itt	lt
 8008e4e:	580b      	ldrlt	r3, [r1, r0]
 8008e50:	18c0      	addlt	r0, r0, r3
 8008e52:	4770      	bx	lr

08008e54 <_raise_r>:
 8008e54:	291f      	cmp	r1, #31
 8008e56:	b538      	push	{r3, r4, r5, lr}
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	d904      	bls.n	8008e68 <_raise_r+0x14>
 8008e5e:	2316      	movs	r3, #22
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e6a:	b112      	cbz	r2, 8008e72 <_raise_r+0x1e>
 8008e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e70:	b94b      	cbnz	r3, 8008e86 <_raise_r+0x32>
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f830 	bl	8008ed8 <_getpid_r>
 8008e78:	462a      	mov	r2, r5
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e82:	f000 b817 	b.w	8008eb4 <_kill_r>
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d00a      	beq.n	8008ea0 <_raise_r+0x4c>
 8008e8a:	1c59      	adds	r1, r3, #1
 8008e8c:	d103      	bne.n	8008e96 <_raise_r+0x42>
 8008e8e:	2316      	movs	r3, #22
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	2001      	movs	r0, #1
 8008e94:	e7e7      	b.n	8008e66 <_raise_r+0x12>
 8008e96:	2400      	movs	r4, #0
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e9e:	4798      	blx	r3
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7e0      	b.n	8008e66 <_raise_r+0x12>

08008ea4 <raise>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <raise+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f7ff bfd3 	b.w	8008e54 <_raise_r>
 8008eae:	bf00      	nop
 8008eb0:	2000000c 	.word	0x2000000c

08008eb4 <_kill_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4d06      	ldr	r5, [pc, #24]	; (8008ed4 <_kill_r+0x20>)
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f7fb f8ba 	bl	800403a <_kill>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d102      	bne.n	8008ed0 <_kill_r+0x1c>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b103      	cbz	r3, 8008ed0 <_kill_r+0x1c>
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	bf00      	nop
 8008ed4:	2000049c 	.word	0x2000049c

08008ed8 <_getpid_r>:
 8008ed8:	f7fb b8a8 	b.w	800402c <_getpid>

08008edc <__sread>:
 8008edc:	b510      	push	{r4, lr}
 8008ede:	460c      	mov	r4, r1
 8008ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee4:	f000 f894 	bl	8009010 <_read_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	bfab      	itete	ge
 8008eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eee:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef0:	181b      	addge	r3, r3, r0
 8008ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ef6:	bfac      	ite	ge
 8008ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008efa:	81a3      	strhlt	r3, [r4, #12]
 8008efc:	bd10      	pop	{r4, pc}

08008efe <__swrite>:
 8008efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f02:	461f      	mov	r7, r3
 8008f04:	898b      	ldrh	r3, [r1, #12]
 8008f06:	4605      	mov	r5, r0
 8008f08:	05db      	lsls	r3, r3, #23
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	4616      	mov	r6, r2
 8008f0e:	d505      	bpl.n	8008f1c <__swrite+0x1e>
 8008f10:	2302      	movs	r3, #2
 8008f12:	2200      	movs	r2, #0
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	f000 f868 	bl	8008fec <_lseek_r>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	4632      	mov	r2, r6
 8008f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	4628      	mov	r0, r5
 8008f28:	463b      	mov	r3, r7
 8008f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	f000 b817 	b.w	8008f64 <_write_r>

08008f36 <__sseek>:
 8008f36:	b510      	push	{r4, lr}
 8008f38:	460c      	mov	r4, r1
 8008f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3e:	f000 f855 	bl	8008fec <_lseek_r>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	bf15      	itete	ne
 8008f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f52:	81a3      	strheq	r3, [r4, #12]
 8008f54:	bf18      	it	ne
 8008f56:	81a3      	strhne	r3, [r4, #12]
 8008f58:	bd10      	pop	{r4, pc}

08008f5a <__sclose>:
 8008f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5e:	f000 b813 	b.w	8008f88 <_close_r>
	...

08008f64 <_write_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4d05      	ldr	r5, [pc, #20]	; (8008f84 <_write_r+0x20>)
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f7fb f898 	bl	80040a8 <_write>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_write_r+0x1e>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_write_r+0x1e>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	2000049c 	.word	0x2000049c

08008f88 <_close_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4d05      	ldr	r5, [pc, #20]	; (8008fa4 <_close_r+0x1c>)
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	f7fb f8a4 	bl	80040e0 <_close>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_close_r+0x1a>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_close_r+0x1a>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	2000049c 	.word	0x2000049c

08008fa8 <_fstat_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	2300      	movs	r3, #0
 8008fac:	4d06      	ldr	r5, [pc, #24]	; (8008fc8 <_fstat_r+0x20>)
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	f7fb f89e 	bl	80040f6 <_fstat>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d102      	bne.n	8008fc4 <_fstat_r+0x1c>
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	b103      	cbz	r3, 8008fc4 <_fstat_r+0x1c>
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	bd38      	pop	{r3, r4, r5, pc}
 8008fc6:	bf00      	nop
 8008fc8:	2000049c 	.word	0x2000049c

08008fcc <_isatty_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4d05      	ldr	r5, [pc, #20]	; (8008fe8 <_isatty_r+0x1c>)
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	602b      	str	r3, [r5, #0]
 8008fd8:	f7fb f89c 	bl	8004114 <_isatty>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_isatty_r+0x1a>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_isatty_r+0x1a>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	2000049c 	.word	0x2000049c

08008fec <_lseek_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4d05      	ldr	r5, [pc, #20]	; (800900c <_lseek_r+0x20>)
 8008ff8:	602a      	str	r2, [r5, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f7fb f894 	bl	8004128 <_lseek>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_lseek_r+0x1e>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_lseek_r+0x1e>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	2000049c 	.word	0x2000049c

08009010 <_read_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	2200      	movs	r2, #0
 800901a:	4d05      	ldr	r5, [pc, #20]	; (8009030 <_read_r+0x20>)
 800901c:	602a      	str	r2, [r5, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f7fb f825 	bl	800406e <_read>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_read_r+0x1e>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_read_r+0x1e>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	2000049c 	.word	0x2000049c

08009034 <cos>:
 8009034:	b530      	push	{r4, r5, lr}
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <cos+0x7c>)
 8009038:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800903c:	4293      	cmp	r3, r2
 800903e:	b087      	sub	sp, #28
 8009040:	dc04      	bgt.n	800904c <cos+0x18>
 8009042:	2200      	movs	r2, #0
 8009044:	2300      	movs	r3, #0
 8009046:	f001 f8f3 	bl	800a230 <__kernel_cos>
 800904a:	e006      	b.n	800905a <cos+0x26>
 800904c:	4a19      	ldr	r2, [pc, #100]	; (80090b4 <cos+0x80>)
 800904e:	4293      	cmp	r3, r2
 8009050:	dd05      	ble.n	800905e <cos+0x2a>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	f7f7 f887 	bl	8000168 <__aeabi_dsub>
 800905a:	b007      	add	sp, #28
 800905c:	bd30      	pop	{r4, r5, pc}
 800905e:	aa02      	add	r2, sp, #8
 8009060:	f000 fb56 	bl	8009710 <__ieee754_rem_pio2>
 8009064:	f000 0003 	and.w	r0, r0, #3
 8009068:	2801      	cmp	r0, #1
 800906a:	d007      	beq.n	800907c <cos+0x48>
 800906c:	2802      	cmp	r0, #2
 800906e:	d00f      	beq.n	8009090 <cos+0x5c>
 8009070:	b9a8      	cbnz	r0, 800909e <cos+0x6a>
 8009072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800907a:	e7e4      	b.n	8009046 <cos+0x12>
 800907c:	9000      	str	r0, [sp, #0]
 800907e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009086:	f001 fcdb 	bl	800aa40 <__kernel_sin>
 800908a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800908e:	e7e4      	b.n	800905a <cos+0x26>
 8009090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009098:	f001 f8ca 	bl	800a230 <__kernel_cos>
 800909c:	e7f5      	b.n	800908a <cos+0x56>
 800909e:	2301      	movs	r3, #1
 80090a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090aa:	f001 fcc9 	bl	800aa40 <__kernel_sin>
 80090ae:	e7d4      	b.n	800905a <cos+0x26>
 80090b0:	3fe921fb 	.word	0x3fe921fb
 80090b4:	7fefffff 	.word	0x7fefffff

080090b8 <sin>:
 80090b8:	b530      	push	{r4, r5, lr}
 80090ba:	4a20      	ldr	r2, [pc, #128]	; (800913c <sin+0x84>)
 80090bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090c0:	4293      	cmp	r3, r2
 80090c2:	b087      	sub	sp, #28
 80090c4:	dc06      	bgt.n	80090d4 <sin+0x1c>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2200      	movs	r2, #0
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	2300      	movs	r3, #0
 80090ce:	f001 fcb7 	bl	800aa40 <__kernel_sin>
 80090d2:	e006      	b.n	80090e2 <sin+0x2a>
 80090d4:	4a1a      	ldr	r2, [pc, #104]	; (8009140 <sin+0x88>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	dd05      	ble.n	80090e6 <sin+0x2e>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	f7f7 f843 	bl	8000168 <__aeabi_dsub>
 80090e2:	b007      	add	sp, #28
 80090e4:	bd30      	pop	{r4, r5, pc}
 80090e6:	aa02      	add	r2, sp, #8
 80090e8:	f000 fb12 	bl	8009710 <__ieee754_rem_pio2>
 80090ec:	f000 0003 	and.w	r0, r0, #3
 80090f0:	2801      	cmp	r0, #1
 80090f2:	d009      	beq.n	8009108 <sin+0x50>
 80090f4:	2802      	cmp	r0, #2
 80090f6:	d00e      	beq.n	8009116 <sin+0x5e>
 80090f8:	b9c0      	cbnz	r0, 800912c <sin+0x74>
 80090fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090fe:	2301      	movs	r3, #1
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009106:	e7e2      	b.n	80090ce <sin+0x16>
 8009108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800910c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009110:	f001 f88e 	bl	800a230 <__kernel_cos>
 8009114:	e7e5      	b.n	80090e2 <sin+0x2a>
 8009116:	2301      	movs	r3, #1
 8009118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009122:	f001 fc8d 	bl	800aa40 <__kernel_sin>
 8009126:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800912a:	e7da      	b.n	80090e2 <sin+0x2a>
 800912c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009134:	f001 f87c 	bl	800a230 <__kernel_cos>
 8009138:	e7f5      	b.n	8009126 <sin+0x6e>
 800913a:	bf00      	nop
 800913c:	3fe921fb 	.word	0x3fe921fb
 8009140:	7fefffff 	.word	0x7fefffff

08009144 <atanf>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800914c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009150:	4604      	mov	r4, r0
 8009152:	4680      	mov	r8, r0
 8009154:	db0e      	blt.n	8009174 <atanf+0x30>
 8009156:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800915a:	dd04      	ble.n	8009166 <atanf+0x22>
 800915c:	4601      	mov	r1, r0
 800915e:	f7f7 fce9 	bl	8000b34 <__addsf3>
 8009162:	4604      	mov	r4, r0
 8009164:	e003      	b.n	800916e <atanf+0x2a>
 8009166:	2800      	cmp	r0, #0
 8009168:	f300 80ce 	bgt.w	8009308 <atanf+0x1c4>
 800916c:	4c67      	ldr	r4, [pc, #412]	; (800930c <atanf+0x1c8>)
 800916e:	4620      	mov	r0, r4
 8009170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009174:	4b66      	ldr	r3, [pc, #408]	; (8009310 <atanf+0x1cc>)
 8009176:	429d      	cmp	r5, r3
 8009178:	dc0e      	bgt.n	8009198 <atanf+0x54>
 800917a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800917e:	da08      	bge.n	8009192 <atanf+0x4e>
 8009180:	4964      	ldr	r1, [pc, #400]	; (8009314 <atanf+0x1d0>)
 8009182:	f7f7 fcd7 	bl	8000b34 <__addsf3>
 8009186:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800918a:	f7f7 ff97 	bl	80010bc <__aeabi_fcmpgt>
 800918e:	2800      	cmp	r0, #0
 8009190:	d1ed      	bne.n	800916e <atanf+0x2a>
 8009192:	f04f 36ff 	mov.w	r6, #4294967295
 8009196:	e01c      	b.n	80091d2 <atanf+0x8e>
 8009198:	f000 f914 	bl	80093c4 <fabsf>
 800919c:	4b5e      	ldr	r3, [pc, #376]	; (8009318 <atanf+0x1d4>)
 800919e:	4604      	mov	r4, r0
 80091a0:	429d      	cmp	r5, r3
 80091a2:	dc7c      	bgt.n	800929e <atanf+0x15a>
 80091a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80091a8:	429d      	cmp	r5, r3
 80091aa:	dc67      	bgt.n	800927c <atanf+0x138>
 80091ac:	4601      	mov	r1, r0
 80091ae:	f7f7 fcc1 	bl	8000b34 <__addsf3>
 80091b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80091b6:	f7f7 fcbb 	bl	8000b30 <__aeabi_fsub>
 80091ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80091be:	4605      	mov	r5, r0
 80091c0:	4620      	mov	r0, r4
 80091c2:	f7f7 fcb7 	bl	8000b34 <__addsf3>
 80091c6:	4601      	mov	r1, r0
 80091c8:	4628      	mov	r0, r5
 80091ca:	f7f7 fe6f 	bl	8000eac <__aeabi_fdiv>
 80091ce:	2600      	movs	r6, #0
 80091d0:	4604      	mov	r4, r0
 80091d2:	4621      	mov	r1, r4
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7f7 fdb5 	bl	8000d44 <__aeabi_fmul>
 80091da:	4601      	mov	r1, r0
 80091dc:	4607      	mov	r7, r0
 80091de:	f7f7 fdb1 	bl	8000d44 <__aeabi_fmul>
 80091e2:	4605      	mov	r5, r0
 80091e4:	494d      	ldr	r1, [pc, #308]	; (800931c <atanf+0x1d8>)
 80091e6:	f7f7 fdad 	bl	8000d44 <__aeabi_fmul>
 80091ea:	494d      	ldr	r1, [pc, #308]	; (8009320 <atanf+0x1dc>)
 80091ec:	f7f7 fca2 	bl	8000b34 <__addsf3>
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7f7 fda7 	bl	8000d44 <__aeabi_fmul>
 80091f6:	494b      	ldr	r1, [pc, #300]	; (8009324 <atanf+0x1e0>)
 80091f8:	f7f7 fc9c 	bl	8000b34 <__addsf3>
 80091fc:	4629      	mov	r1, r5
 80091fe:	f7f7 fda1 	bl	8000d44 <__aeabi_fmul>
 8009202:	4949      	ldr	r1, [pc, #292]	; (8009328 <atanf+0x1e4>)
 8009204:	f7f7 fc96 	bl	8000b34 <__addsf3>
 8009208:	4629      	mov	r1, r5
 800920a:	f7f7 fd9b 	bl	8000d44 <__aeabi_fmul>
 800920e:	4947      	ldr	r1, [pc, #284]	; (800932c <atanf+0x1e8>)
 8009210:	f7f7 fc90 	bl	8000b34 <__addsf3>
 8009214:	4629      	mov	r1, r5
 8009216:	f7f7 fd95 	bl	8000d44 <__aeabi_fmul>
 800921a:	4945      	ldr	r1, [pc, #276]	; (8009330 <atanf+0x1ec>)
 800921c:	f7f7 fc8a 	bl	8000b34 <__addsf3>
 8009220:	4639      	mov	r1, r7
 8009222:	f7f7 fd8f 	bl	8000d44 <__aeabi_fmul>
 8009226:	4943      	ldr	r1, [pc, #268]	; (8009334 <atanf+0x1f0>)
 8009228:	4607      	mov	r7, r0
 800922a:	4628      	mov	r0, r5
 800922c:	f7f7 fd8a 	bl	8000d44 <__aeabi_fmul>
 8009230:	4941      	ldr	r1, [pc, #260]	; (8009338 <atanf+0x1f4>)
 8009232:	f7f7 fc7d 	bl	8000b30 <__aeabi_fsub>
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 fd84 	bl	8000d44 <__aeabi_fmul>
 800923c:	493f      	ldr	r1, [pc, #252]	; (800933c <atanf+0x1f8>)
 800923e:	f7f7 fc77 	bl	8000b30 <__aeabi_fsub>
 8009242:	4629      	mov	r1, r5
 8009244:	f7f7 fd7e 	bl	8000d44 <__aeabi_fmul>
 8009248:	493d      	ldr	r1, [pc, #244]	; (8009340 <atanf+0x1fc>)
 800924a:	f7f7 fc71 	bl	8000b30 <__aeabi_fsub>
 800924e:	4629      	mov	r1, r5
 8009250:	f7f7 fd78 	bl	8000d44 <__aeabi_fmul>
 8009254:	493b      	ldr	r1, [pc, #236]	; (8009344 <atanf+0x200>)
 8009256:	f7f7 fc6b 	bl	8000b30 <__aeabi_fsub>
 800925a:	4629      	mov	r1, r5
 800925c:	f7f7 fd72 	bl	8000d44 <__aeabi_fmul>
 8009260:	4601      	mov	r1, r0
 8009262:	4638      	mov	r0, r7
 8009264:	f7f7 fc66 	bl	8000b34 <__addsf3>
 8009268:	4621      	mov	r1, r4
 800926a:	f7f7 fd6b 	bl	8000d44 <__aeabi_fmul>
 800926e:	1c73      	adds	r3, r6, #1
 8009270:	4601      	mov	r1, r0
 8009272:	d133      	bne.n	80092dc <atanf+0x198>
 8009274:	4620      	mov	r0, r4
 8009276:	f7f7 fc5b 	bl	8000b30 <__aeabi_fsub>
 800927a:	e772      	b.n	8009162 <atanf+0x1e>
 800927c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009280:	f7f7 fc56 	bl	8000b30 <__aeabi_fsub>
 8009284:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009288:	4605      	mov	r5, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f7f7 fc52 	bl	8000b34 <__addsf3>
 8009290:	4601      	mov	r1, r0
 8009292:	4628      	mov	r0, r5
 8009294:	f7f7 fe0a 	bl	8000eac <__aeabi_fdiv>
 8009298:	2601      	movs	r6, #1
 800929a:	4604      	mov	r4, r0
 800929c:	e799      	b.n	80091d2 <atanf+0x8e>
 800929e:	4b2a      	ldr	r3, [pc, #168]	; (8009348 <atanf+0x204>)
 80092a0:	429d      	cmp	r5, r3
 80092a2:	dc14      	bgt.n	80092ce <atanf+0x18a>
 80092a4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80092a8:	f7f7 fc42 	bl	8000b30 <__aeabi_fsub>
 80092ac:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80092b0:	4605      	mov	r5, r0
 80092b2:	4620      	mov	r0, r4
 80092b4:	f7f7 fd46 	bl	8000d44 <__aeabi_fmul>
 80092b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80092bc:	f7f7 fc3a 	bl	8000b34 <__addsf3>
 80092c0:	4601      	mov	r1, r0
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7f7 fdf2 	bl	8000eac <__aeabi_fdiv>
 80092c8:	2602      	movs	r6, #2
 80092ca:	4604      	mov	r4, r0
 80092cc:	e781      	b.n	80091d2 <atanf+0x8e>
 80092ce:	4601      	mov	r1, r0
 80092d0:	481e      	ldr	r0, [pc, #120]	; (800934c <atanf+0x208>)
 80092d2:	f7f7 fdeb 	bl	8000eac <__aeabi_fdiv>
 80092d6:	2603      	movs	r6, #3
 80092d8:	4604      	mov	r4, r0
 80092da:	e77a      	b.n	80091d2 <atanf+0x8e>
 80092dc:	4b1c      	ldr	r3, [pc, #112]	; (8009350 <atanf+0x20c>)
 80092de:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80092e2:	f7f7 fc25 	bl	8000b30 <__aeabi_fsub>
 80092e6:	4621      	mov	r1, r4
 80092e8:	f7f7 fc22 	bl	8000b30 <__aeabi_fsub>
 80092ec:	4b19      	ldr	r3, [pc, #100]	; (8009354 <atanf+0x210>)
 80092ee:	4601      	mov	r1, r0
 80092f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092f4:	f7f7 fc1c 	bl	8000b30 <__aeabi_fsub>
 80092f8:	f1b8 0f00 	cmp.w	r8, #0
 80092fc:	4604      	mov	r4, r0
 80092fe:	f6bf af36 	bge.w	800916e <atanf+0x2a>
 8009302:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009306:	e72c      	b.n	8009162 <atanf+0x1e>
 8009308:	4c13      	ldr	r4, [pc, #76]	; (8009358 <atanf+0x214>)
 800930a:	e730      	b.n	800916e <atanf+0x2a>
 800930c:	bfc90fdb 	.word	0xbfc90fdb
 8009310:	3edfffff 	.word	0x3edfffff
 8009314:	7149f2ca 	.word	0x7149f2ca
 8009318:	3f97ffff 	.word	0x3f97ffff
 800931c:	3c8569d7 	.word	0x3c8569d7
 8009320:	3d4bda59 	.word	0x3d4bda59
 8009324:	3d886b35 	.word	0x3d886b35
 8009328:	3dba2e6e 	.word	0x3dba2e6e
 800932c:	3e124925 	.word	0x3e124925
 8009330:	3eaaaaab 	.word	0x3eaaaaab
 8009334:	bd15a221 	.word	0xbd15a221
 8009338:	3d6ef16b 	.word	0x3d6ef16b
 800933c:	3d9d8795 	.word	0x3d9d8795
 8009340:	3de38e38 	.word	0x3de38e38
 8009344:	3e4ccccd 	.word	0x3e4ccccd
 8009348:	401bffff 	.word	0x401bffff
 800934c:	bf800000 	.word	0xbf800000
 8009350:	0800c354 	.word	0x0800c354
 8009354:	0800c344 	.word	0x0800c344
 8009358:	3fc90fdb 	.word	0x3fc90fdb

0800935c <cosf>:
 800935c:	b507      	push	{r0, r1, r2, lr}
 800935e:	4a18      	ldr	r2, [pc, #96]	; (80093c0 <cosf+0x64>)
 8009360:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009364:	4293      	cmp	r3, r2
 8009366:	4601      	mov	r1, r0
 8009368:	dc03      	bgt.n	8009372 <cosf+0x16>
 800936a:	2100      	movs	r1, #0
 800936c:	f001 fc1e 	bl	800abac <__kernel_cosf>
 8009370:	e004      	b.n	800937c <cosf+0x20>
 8009372:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009376:	db04      	blt.n	8009382 <cosf+0x26>
 8009378:	f7f7 fbda 	bl	8000b30 <__aeabi_fsub>
 800937c:	b003      	add	sp, #12
 800937e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009382:	4669      	mov	r1, sp
 8009384:	f000 fda4 	bl	8009ed0 <__ieee754_rem_pio2f>
 8009388:	f000 0203 	and.w	r2, r0, #3
 800938c:	2a01      	cmp	r2, #1
 800938e:	d005      	beq.n	800939c <cosf+0x40>
 8009390:	2a02      	cmp	r2, #2
 8009392:	d00a      	beq.n	80093aa <cosf+0x4e>
 8009394:	b972      	cbnz	r2, 80093b4 <cosf+0x58>
 8009396:	9901      	ldr	r1, [sp, #4]
 8009398:	9800      	ldr	r0, [sp, #0]
 800939a:	e7e7      	b.n	800936c <cosf+0x10>
 800939c:	9901      	ldr	r1, [sp, #4]
 800939e:	9800      	ldr	r0, [sp, #0]
 80093a0:	f001 ff3a 	bl	800b218 <__kernel_sinf>
 80093a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80093a8:	e7e8      	b.n	800937c <cosf+0x20>
 80093aa:	9901      	ldr	r1, [sp, #4]
 80093ac:	9800      	ldr	r0, [sp, #0]
 80093ae:	f001 fbfd 	bl	800abac <__kernel_cosf>
 80093b2:	e7f7      	b.n	80093a4 <cosf+0x48>
 80093b4:	2201      	movs	r2, #1
 80093b6:	9901      	ldr	r1, [sp, #4]
 80093b8:	9800      	ldr	r0, [sp, #0]
 80093ba:	f001 ff2d 	bl	800b218 <__kernel_sinf>
 80093be:	e7dd      	b.n	800937c <cosf+0x20>
 80093c0:	3f490fd8 	.word	0x3f490fd8

080093c4 <fabsf>:
 80093c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80093c8:	4770      	bx	lr
	...

080093cc <sinf>:
 80093cc:	b507      	push	{r0, r1, r2, lr}
 80093ce:	4a19      	ldr	r2, [pc, #100]	; (8009434 <sinf+0x68>)
 80093d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80093d4:	4293      	cmp	r3, r2
 80093d6:	4601      	mov	r1, r0
 80093d8:	dc04      	bgt.n	80093e4 <sinf+0x18>
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	f001 ff1b 	bl	800b218 <__kernel_sinf>
 80093e2:	e004      	b.n	80093ee <sinf+0x22>
 80093e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80093e8:	db04      	blt.n	80093f4 <sinf+0x28>
 80093ea:	f7f7 fba1 	bl	8000b30 <__aeabi_fsub>
 80093ee:	b003      	add	sp, #12
 80093f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80093f4:	4669      	mov	r1, sp
 80093f6:	f000 fd6b 	bl	8009ed0 <__ieee754_rem_pio2f>
 80093fa:	f000 0003 	and.w	r0, r0, #3
 80093fe:	2801      	cmp	r0, #1
 8009400:	d006      	beq.n	8009410 <sinf+0x44>
 8009402:	2802      	cmp	r0, #2
 8009404:	d009      	beq.n	800941a <sinf+0x4e>
 8009406:	b980      	cbnz	r0, 800942a <sinf+0x5e>
 8009408:	2201      	movs	r2, #1
 800940a:	9901      	ldr	r1, [sp, #4]
 800940c:	9800      	ldr	r0, [sp, #0]
 800940e:	e7e6      	b.n	80093de <sinf+0x12>
 8009410:	9901      	ldr	r1, [sp, #4]
 8009412:	9800      	ldr	r0, [sp, #0]
 8009414:	f001 fbca 	bl	800abac <__kernel_cosf>
 8009418:	e7e9      	b.n	80093ee <sinf+0x22>
 800941a:	2201      	movs	r2, #1
 800941c:	9901      	ldr	r1, [sp, #4]
 800941e:	9800      	ldr	r0, [sp, #0]
 8009420:	f001 fefa 	bl	800b218 <__kernel_sinf>
 8009424:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009428:	e7e1      	b.n	80093ee <sinf+0x22>
 800942a:	9901      	ldr	r1, [sp, #4]
 800942c:	9800      	ldr	r0, [sp, #0]
 800942e:	f001 fbbd 	bl	800abac <__kernel_cosf>
 8009432:	e7f7      	b.n	8009424 <sinf+0x58>
 8009434:	3f490fd8 	.word	0x3f490fd8

08009438 <tanf>:
 8009438:	b507      	push	{r0, r1, r2, lr}
 800943a:	4a0f      	ldr	r2, [pc, #60]	; (8009478 <tanf+0x40>)
 800943c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009440:	4293      	cmp	r3, r2
 8009442:	4601      	mov	r1, r0
 8009444:	dc04      	bgt.n	8009450 <tanf+0x18>
 8009446:	2201      	movs	r2, #1
 8009448:	2100      	movs	r1, #0
 800944a:	f001 ff5b 	bl	800b304 <__kernel_tanf>
 800944e:	e004      	b.n	800945a <tanf+0x22>
 8009450:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009454:	db04      	blt.n	8009460 <tanf+0x28>
 8009456:	f7f7 fb6b 	bl	8000b30 <__aeabi_fsub>
 800945a:	b003      	add	sp, #12
 800945c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009460:	4669      	mov	r1, sp
 8009462:	f000 fd35 	bl	8009ed0 <__ieee754_rem_pio2f>
 8009466:	0042      	lsls	r2, r0, #1
 8009468:	f002 0202 	and.w	r2, r2, #2
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	9800      	ldr	r0, [sp, #0]
 8009470:	f1c2 0201 	rsb	r2, r2, #1
 8009474:	e7e9      	b.n	800944a <tanf+0x12>
 8009476:	bf00      	nop
 8009478:	3f490fda 	.word	0x3f490fda

0800947c <atan2>:
 800947c:	f000 b874 	b.w	8009568 <__ieee754_atan2>

08009480 <sqrt>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	4606      	mov	r6, r0
 8009484:	460f      	mov	r7, r1
 8009486:	f000 fb33 	bl	8009af0 <__ieee754_sqrt>
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <sqrt+0x54>)
 800948c:	4604      	mov	r4, r0
 800948e:	f993 3000 	ldrsb.w	r3, [r3]
 8009492:	460d      	mov	r5, r1
 8009494:	3301      	adds	r3, #1
 8009496:	d019      	beq.n	80094cc <sqrt+0x4c>
 8009498:	4632      	mov	r2, r6
 800949a:	463b      	mov	r3, r7
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	f7f7 fab4 	bl	8000a0c <__aeabi_dcmpun>
 80094a4:	b990      	cbnz	r0, 80094cc <sqrt+0x4c>
 80094a6:	2200      	movs	r2, #0
 80094a8:	2300      	movs	r3, #0
 80094aa:	4630      	mov	r0, r6
 80094ac:	4639      	mov	r1, r7
 80094ae:	f7f7 fa85 	bl	80009bc <__aeabi_dcmplt>
 80094b2:	b158      	cbz	r0, 80094cc <sqrt+0x4c>
 80094b4:	f7fc feb8 	bl	8006228 <__errno>
 80094b8:	2321      	movs	r3, #33	; 0x21
 80094ba:	2200      	movs	r2, #0
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	2300      	movs	r3, #0
 80094c0:	4610      	mov	r0, r2
 80094c2:	4619      	mov	r1, r3
 80094c4:	f7f7 f932 	bl	800072c <__aeabi_ddiv>
 80094c8:	4604      	mov	r4, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200001dc 	.word	0x200001dc

080094d8 <asinf>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4604      	mov	r4, r0
 80094dc:	f000 fbb4 	bl	8009c48 <__ieee754_asinf>
 80094e0:	4b0e      	ldr	r3, [pc, #56]	; (800951c <asinf+0x44>)
 80094e2:	4605      	mov	r5, r0
 80094e4:	f993 3000 	ldrsb.w	r3, [r3]
 80094e8:	3301      	adds	r3, #1
 80094ea:	d015      	beq.n	8009518 <asinf+0x40>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7f7 fdee 	bl	80010d0 <__aeabi_fcmpun>
 80094f4:	b980      	cbnz	r0, 8009518 <asinf+0x40>
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff ff64 	bl	80093c4 <fabsf>
 80094fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009500:	f7f7 fddc 	bl	80010bc <__aeabi_fcmpgt>
 8009504:	b140      	cbz	r0, 8009518 <asinf+0x40>
 8009506:	f7fc fe8f 	bl	8006228 <__errno>
 800950a:	2321      	movs	r3, #33	; 0x21
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	4804      	ldr	r0, [pc, #16]	; (8009520 <asinf+0x48>)
 8009510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009514:	f002 bafc 	b.w	800bb10 <nanf>
 8009518:	4628      	mov	r0, r5
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	200001dc 	.word	0x200001dc
 8009520:	0800c1d8 	.word	0x0800c1d8

08009524 <sqrtf>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4605      	mov	r5, r0
 8009528:	f000 fe30 	bl	800a18c <__ieee754_sqrtf>
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <sqrtf+0x40>)
 800952e:	4604      	mov	r4, r0
 8009530:	f993 3000 	ldrsb.w	r3, [r3]
 8009534:	3301      	adds	r3, #1
 8009536:	d012      	beq.n	800955e <sqrtf+0x3a>
 8009538:	4629      	mov	r1, r5
 800953a:	4628      	mov	r0, r5
 800953c:	f7f7 fdc8 	bl	80010d0 <__aeabi_fcmpun>
 8009540:	b968      	cbnz	r0, 800955e <sqrtf+0x3a>
 8009542:	2100      	movs	r1, #0
 8009544:	4628      	mov	r0, r5
 8009546:	f7f7 fd9b 	bl	8001080 <__aeabi_fcmplt>
 800954a:	b140      	cbz	r0, 800955e <sqrtf+0x3a>
 800954c:	f7fc fe6c 	bl	8006228 <__errno>
 8009550:	2321      	movs	r3, #33	; 0x21
 8009552:	2100      	movs	r1, #0
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	4608      	mov	r0, r1
 8009558:	f7f7 fca8 	bl	8000eac <__aeabi_fdiv>
 800955c:	4604      	mov	r4, r0
 800955e:	4620      	mov	r0, r4
 8009560:	bd38      	pop	{r3, r4, r5, pc}
 8009562:	bf00      	nop
 8009564:	200001dc 	.word	0x200001dc

08009568 <__ieee754_atan2>:
 8009568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	4692      	mov	sl, r2
 800956e:	4699      	mov	r9, r3
 8009570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009574:	461f      	mov	r7, r3
 8009576:	f1ca 0300 	rsb	r3, sl, #0
 800957a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8009708 <__ieee754_atan2+0x1a0>
 800957e:	ea43 030a 	orr.w	r3, r3, sl
 8009582:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009586:	4573      	cmp	r3, lr
 8009588:	4604      	mov	r4, r0
 800958a:	460d      	mov	r5, r1
 800958c:	d808      	bhi.n	80095a0 <__ieee754_atan2+0x38>
 800958e:	4246      	negs	r6, r0
 8009590:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009594:	4306      	orrs	r6, r0
 8009596:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800959a:	4576      	cmp	r6, lr
 800959c:	468c      	mov	ip, r1
 800959e:	d908      	bls.n	80095b2 <__ieee754_atan2+0x4a>
 80095a0:	4652      	mov	r2, sl
 80095a2:	464b      	mov	r3, r9
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f6 fde0 	bl	800016c <__adddf3>
 80095ac:	4604      	mov	r4, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	e019      	b.n	80095e6 <__ieee754_atan2+0x7e>
 80095b2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80095b6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80095ba:	ea56 060a 	orrs.w	r6, r6, sl
 80095be:	d103      	bne.n	80095c8 <__ieee754_atan2+0x60>
 80095c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	f001 bfcc 	b.w	800b560 <atan>
 80095c8:	17be      	asrs	r6, r7, #30
 80095ca:	f006 0602 	and.w	r6, r6, #2
 80095ce:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80095d2:	ea53 0100 	orrs.w	r1, r3, r0
 80095d6:	d10a      	bne.n	80095ee <__ieee754_atan2+0x86>
 80095d8:	2e02      	cmp	r6, #2
 80095da:	d067      	beq.n	80096ac <__ieee754_atan2+0x144>
 80095dc:	2e03      	cmp	r6, #3
 80095de:	d102      	bne.n	80095e6 <__ieee754_atan2+0x7e>
 80095e0:	a53b      	add	r5, pc, #236	; (adr r5, 80096d0 <__ieee754_atan2+0x168>)
 80095e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ee:	ea52 010a 	orrs.w	r1, r2, sl
 80095f2:	d106      	bne.n	8009602 <__ieee754_atan2+0x9a>
 80095f4:	f1bc 0f00 	cmp.w	ip, #0
 80095f8:	da63      	bge.n	80096c2 <__ieee754_atan2+0x15a>
 80095fa:	a537      	add	r5, pc, #220	; (adr r5, 80096d8 <__ieee754_atan2+0x170>)
 80095fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009600:	e7f1      	b.n	80095e6 <__ieee754_atan2+0x7e>
 8009602:	4572      	cmp	r2, lr
 8009604:	d10f      	bne.n	8009626 <__ieee754_atan2+0xbe>
 8009606:	4293      	cmp	r3, r2
 8009608:	f106 36ff 	add.w	r6, r6, #4294967295
 800960c:	d107      	bne.n	800961e <__ieee754_atan2+0xb6>
 800960e:	2e02      	cmp	r6, #2
 8009610:	d850      	bhi.n	80096b4 <__ieee754_atan2+0x14c>
 8009612:	4b3b      	ldr	r3, [pc, #236]	; (8009700 <__ieee754_atan2+0x198>)
 8009614:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009618:	e9d6 4500 	ldrd	r4, r5, [r6]
 800961c:	e7e3      	b.n	80095e6 <__ieee754_atan2+0x7e>
 800961e:	2e02      	cmp	r6, #2
 8009620:	d84c      	bhi.n	80096bc <__ieee754_atan2+0x154>
 8009622:	4b38      	ldr	r3, [pc, #224]	; (8009704 <__ieee754_atan2+0x19c>)
 8009624:	e7f6      	b.n	8009614 <__ieee754_atan2+0xac>
 8009626:	4573      	cmp	r3, lr
 8009628:	d0e4      	beq.n	80095f4 <__ieee754_atan2+0x8c>
 800962a:	1a9b      	subs	r3, r3, r2
 800962c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009630:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009634:	da20      	bge.n	8009678 <__ieee754_atan2+0x110>
 8009636:	2f00      	cmp	r7, #0
 8009638:	da01      	bge.n	800963e <__ieee754_atan2+0xd6>
 800963a:	323c      	adds	r2, #60	; 0x3c
 800963c:	db20      	blt.n	8009680 <__ieee754_atan2+0x118>
 800963e:	4652      	mov	r2, sl
 8009640:	464b      	mov	r3, r9
 8009642:	4620      	mov	r0, r4
 8009644:	4629      	mov	r1, r5
 8009646:	f7f7 f871 	bl	800072c <__aeabi_ddiv>
 800964a:	f002 f913 	bl	800b874 <fabs>
 800964e:	f001 ff87 	bl	800b560 <atan>
 8009652:	4604      	mov	r4, r0
 8009654:	460d      	mov	r5, r1
 8009656:	2e01      	cmp	r6, #1
 8009658:	d015      	beq.n	8009686 <__ieee754_atan2+0x11e>
 800965a:	2e02      	cmp	r6, #2
 800965c:	d017      	beq.n	800968e <__ieee754_atan2+0x126>
 800965e:	2e00      	cmp	r6, #0
 8009660:	d0c1      	beq.n	80095e6 <__ieee754_atan2+0x7e>
 8009662:	a31f      	add	r3, pc, #124	; (adr r3, 80096e0 <__ieee754_atan2+0x178>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	4620      	mov	r0, r4
 800966a:	4629      	mov	r1, r5
 800966c:	f7f6 fd7c 	bl	8000168 <__aeabi_dsub>
 8009670:	a31d      	add	r3, pc, #116	; (adr r3, 80096e8 <__ieee754_atan2+0x180>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	e016      	b.n	80096a6 <__ieee754_atan2+0x13e>
 8009678:	a51d      	add	r5, pc, #116	; (adr r5, 80096f0 <__ieee754_atan2+0x188>)
 800967a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800967e:	e7ea      	b.n	8009656 <__ieee754_atan2+0xee>
 8009680:	2400      	movs	r4, #0
 8009682:	2500      	movs	r5, #0
 8009684:	e7e7      	b.n	8009656 <__ieee754_atan2+0xee>
 8009686:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800968a:	461d      	mov	r5, r3
 800968c:	e7ab      	b.n	80095e6 <__ieee754_atan2+0x7e>
 800968e:	a314      	add	r3, pc, #80	; (adr r3, 80096e0 <__ieee754_atan2+0x178>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	4620      	mov	r0, r4
 8009696:	4629      	mov	r1, r5
 8009698:	f7f6 fd66 	bl	8000168 <__aeabi_dsub>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	a111      	add	r1, pc, #68	; (adr r1, 80096e8 <__ieee754_atan2+0x180>)
 80096a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a6:	f7f6 fd5f 	bl	8000168 <__aeabi_dsub>
 80096aa:	e77f      	b.n	80095ac <__ieee754_atan2+0x44>
 80096ac:	a50e      	add	r5, pc, #56	; (adr r5, 80096e8 <__ieee754_atan2+0x180>)
 80096ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096b2:	e798      	b.n	80095e6 <__ieee754_atan2+0x7e>
 80096b4:	a510      	add	r5, pc, #64	; (adr r5, 80096f8 <__ieee754_atan2+0x190>)
 80096b6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096ba:	e794      	b.n	80095e6 <__ieee754_atan2+0x7e>
 80096bc:	2400      	movs	r4, #0
 80096be:	2500      	movs	r5, #0
 80096c0:	e791      	b.n	80095e6 <__ieee754_atan2+0x7e>
 80096c2:	a50b      	add	r5, pc, #44	; (adr r5, 80096f0 <__ieee754_atan2+0x188>)
 80096c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096c8:	e78d      	b.n	80095e6 <__ieee754_atan2+0x7e>
 80096ca:	bf00      	nop
 80096cc:	f3af 8000 	nop.w
 80096d0:	54442d18 	.word	0x54442d18
 80096d4:	c00921fb 	.word	0xc00921fb
 80096d8:	54442d18 	.word	0x54442d18
 80096dc:	bff921fb 	.word	0xbff921fb
 80096e0:	33145c07 	.word	0x33145c07
 80096e4:	3ca1a626 	.word	0x3ca1a626
 80096e8:	54442d18 	.word	0x54442d18
 80096ec:	400921fb 	.word	0x400921fb
 80096f0:	54442d18 	.word	0x54442d18
 80096f4:	3ff921fb 	.word	0x3ff921fb
 80096f8:	54442d18 	.word	0x54442d18
 80096fc:	3fe921fb 	.word	0x3fe921fb
 8009700:	0800c368 	.word	0x0800c368
 8009704:	0800c380 	.word	0x0800c380
 8009708:	7ff00000 	.word	0x7ff00000
 800970c:	00000000 	.word	0x00000000

08009710 <__ieee754_rem_pio2>:
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	4614      	mov	r4, r2
 8009716:	4ac4      	ldr	r2, [pc, #784]	; (8009a28 <__ieee754_rem_pio2+0x318>)
 8009718:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800971c:	b08d      	sub	sp, #52	; 0x34
 800971e:	4592      	cmp	sl, r2
 8009720:	9104      	str	r1, [sp, #16]
 8009722:	dc07      	bgt.n	8009734 <__ieee754_rem_pio2+0x24>
 8009724:	2200      	movs	r2, #0
 8009726:	2300      	movs	r3, #0
 8009728:	e9c4 0100 	strd	r0, r1, [r4]
 800972c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009730:	2500      	movs	r5, #0
 8009732:	e024      	b.n	800977e <__ieee754_rem_pio2+0x6e>
 8009734:	4abd      	ldr	r2, [pc, #756]	; (8009a2c <__ieee754_rem_pio2+0x31c>)
 8009736:	4592      	cmp	sl, r2
 8009738:	dc72      	bgt.n	8009820 <__ieee754_rem_pio2+0x110>
 800973a:	9b04      	ldr	r3, [sp, #16]
 800973c:	4dbc      	ldr	r5, [pc, #752]	; (8009a30 <__ieee754_rem_pio2+0x320>)
 800973e:	2b00      	cmp	r3, #0
 8009740:	a3ab      	add	r3, pc, #684	; (adr r3, 80099f0 <__ieee754_rem_pio2+0x2e0>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	dd36      	ble.n	80097b6 <__ieee754_rem_pio2+0xa6>
 8009748:	f7f6 fd0e 	bl	8000168 <__aeabi_dsub>
 800974c:	45aa      	cmp	sl, r5
 800974e:	4606      	mov	r6, r0
 8009750:	460f      	mov	r7, r1
 8009752:	d018      	beq.n	8009786 <__ieee754_rem_pio2+0x76>
 8009754:	a3a8      	add	r3, pc, #672	; (adr r3, 80099f8 <__ieee754_rem_pio2+0x2e8>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 fd05 	bl	8000168 <__aeabi_dsub>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4630      	mov	r0, r6
 8009764:	e9c4 2300 	strd	r2, r3, [r4]
 8009768:	4639      	mov	r1, r7
 800976a:	f7f6 fcfd 	bl	8000168 <__aeabi_dsub>
 800976e:	a3a2      	add	r3, pc, #648	; (adr r3, 80099f8 <__ieee754_rem_pio2+0x2e8>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 fcf8 	bl	8000168 <__aeabi_dsub>
 8009778:	2501      	movs	r5, #1
 800977a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800977e:	4628      	mov	r0, r5
 8009780:	b00d      	add	sp, #52	; 0x34
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	a39e      	add	r3, pc, #632	; (adr r3, 8009a00 <__ieee754_rem_pio2+0x2f0>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f6 fcec 	bl	8000168 <__aeabi_dsub>
 8009790:	a39d      	add	r3, pc, #628	; (adr r3, 8009a08 <__ieee754_rem_pio2+0x2f8>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	4606      	mov	r6, r0
 8009798:	460f      	mov	r7, r1
 800979a:	f7f6 fce5 	bl	8000168 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4630      	mov	r0, r6
 80097a4:	e9c4 2300 	strd	r2, r3, [r4]
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f6 fcdd 	bl	8000168 <__aeabi_dsub>
 80097ae:	a396      	add	r3, pc, #600	; (adr r3, 8009a08 <__ieee754_rem_pio2+0x2f8>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	e7de      	b.n	8009774 <__ieee754_rem_pio2+0x64>
 80097b6:	f7f6 fcd9 	bl	800016c <__adddf3>
 80097ba:	45aa      	cmp	sl, r5
 80097bc:	4606      	mov	r6, r0
 80097be:	460f      	mov	r7, r1
 80097c0:	d016      	beq.n	80097f0 <__ieee754_rem_pio2+0xe0>
 80097c2:	a38d      	add	r3, pc, #564	; (adr r3, 80099f8 <__ieee754_rem_pio2+0x2e8>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 fcd0 	bl	800016c <__adddf3>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4630      	mov	r0, r6
 80097d2:	e9c4 2300 	strd	r2, r3, [r4]
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f6 fcc6 	bl	8000168 <__aeabi_dsub>
 80097dc:	a386      	add	r3, pc, #536	; (adr r3, 80099f8 <__ieee754_rem_pio2+0x2e8>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fcc3 	bl	800016c <__adddf3>
 80097e6:	f04f 35ff 	mov.w	r5, #4294967295
 80097ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097ee:	e7c6      	b.n	800977e <__ieee754_rem_pio2+0x6e>
 80097f0:	a383      	add	r3, pc, #524	; (adr r3, 8009a00 <__ieee754_rem_pio2+0x2f0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fcb9 	bl	800016c <__adddf3>
 80097fa:	a383      	add	r3, pc, #524	; (adr r3, 8009a08 <__ieee754_rem_pio2+0x2f8>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	4606      	mov	r6, r0
 8009802:	460f      	mov	r7, r1
 8009804:	f7f6 fcb2 	bl	800016c <__adddf3>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4630      	mov	r0, r6
 800980e:	e9c4 2300 	strd	r2, r3, [r4]
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 fca8 	bl	8000168 <__aeabi_dsub>
 8009818:	a37b      	add	r3, pc, #492	; (adr r3, 8009a08 <__ieee754_rem_pio2+0x2f8>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	e7e0      	b.n	80097e2 <__ieee754_rem_pio2+0xd2>
 8009820:	4a84      	ldr	r2, [pc, #528]	; (8009a34 <__ieee754_rem_pio2+0x324>)
 8009822:	4592      	cmp	sl, r2
 8009824:	f300 80d5 	bgt.w	80099d2 <__ieee754_rem_pio2+0x2c2>
 8009828:	f002 f824 	bl	800b874 <fabs>
 800982c:	a378      	add	r3, pc, #480	; (adr r3, 8009a10 <__ieee754_rem_pio2+0x300>)
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	4606      	mov	r6, r0
 8009834:	460f      	mov	r7, r1
 8009836:	f7f6 fe4f 	bl	80004d8 <__aeabi_dmul>
 800983a:	2200      	movs	r2, #0
 800983c:	4b7e      	ldr	r3, [pc, #504]	; (8009a38 <__ieee754_rem_pio2+0x328>)
 800983e:	f7f6 fc95 	bl	800016c <__adddf3>
 8009842:	f7f7 f8f9 	bl	8000a38 <__aeabi_d2iz>
 8009846:	4605      	mov	r5, r0
 8009848:	f7f6 fddc 	bl	8000404 <__aeabi_i2d>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009854:	a366      	add	r3, pc, #408	; (adr r3, 80099f0 <__ieee754_rem_pio2+0x2e0>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fe3d 	bl	80004d8 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fc7f 	bl	8000168 <__aeabi_dsub>
 800986a:	a363      	add	r3, pc, #396	; (adr r3, 80099f8 <__ieee754_rem_pio2+0x2e8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	4680      	mov	r8, r0
 8009872:	4689      	mov	r9, r1
 8009874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009878:	f7f6 fe2e 	bl	80004d8 <__aeabi_dmul>
 800987c:	2d1f      	cmp	r5, #31
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	dc0e      	bgt.n	80098a2 <__ieee754_rem_pio2+0x192>
 8009884:	4b6d      	ldr	r3, [pc, #436]	; (8009a3c <__ieee754_rem_pio2+0x32c>)
 8009886:	1e6a      	subs	r2, r5, #1
 8009888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988c:	4553      	cmp	r3, sl
 800988e:	d008      	beq.n	80098a2 <__ieee754_rem_pio2+0x192>
 8009890:	4632      	mov	r2, r6
 8009892:	463b      	mov	r3, r7
 8009894:	4640      	mov	r0, r8
 8009896:	4649      	mov	r1, r9
 8009898:	f7f6 fc66 	bl	8000168 <__aeabi_dsub>
 800989c:	e9c4 0100 	strd	r0, r1, [r4]
 80098a0:	e013      	b.n	80098ca <__ieee754_rem_pio2+0x1ba>
 80098a2:	463b      	mov	r3, r7
 80098a4:	4632      	mov	r2, r6
 80098a6:	4640      	mov	r0, r8
 80098a8:	4649      	mov	r1, r9
 80098aa:	f7f6 fc5d 	bl	8000168 <__aeabi_dsub>
 80098ae:	ea4f 532a 	mov.w	r3, sl, asr #20
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098b8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80098bc:	f1ba 0f10 	cmp.w	sl, #16
 80098c0:	dc1f      	bgt.n	8009902 <__ieee754_rem_pio2+0x1f2>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	e9c4 2300 	strd	r2, r3, [r4]
 80098ca:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80098ce:	4640      	mov	r0, r8
 80098d0:	4653      	mov	r3, sl
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f6 fc48 	bl	8000168 <__aeabi_dsub>
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	f7f6 fc44 	bl	8000168 <__aeabi_dsub>
 80098e0:	460b      	mov	r3, r1
 80098e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80098e6:	9904      	ldr	r1, [sp, #16]
 80098e8:	4602      	mov	r2, r0
 80098ea:	2900      	cmp	r1, #0
 80098ec:	f6bf af47 	bge.w	800977e <__ieee754_rem_pio2+0x6e>
 80098f0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80098f4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80098f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80098fc:	60e3      	str	r3, [r4, #12]
 80098fe:	426d      	negs	r5, r5
 8009900:	e73d      	b.n	800977e <__ieee754_rem_pio2+0x6e>
 8009902:	a33f      	add	r3, pc, #252	; (adr r3, 8009a00 <__ieee754_rem_pio2+0x2f0>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800990c:	f7f6 fde4 	bl	80004d8 <__aeabi_dmul>
 8009910:	4606      	mov	r6, r0
 8009912:	460f      	mov	r7, r1
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4640      	mov	r0, r8
 800991a:	4649      	mov	r1, r9
 800991c:	f7f6 fc24 	bl	8000168 <__aeabi_dsub>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4682      	mov	sl, r0
 8009926:	468b      	mov	fp, r1
 8009928:	4640      	mov	r0, r8
 800992a:	4649      	mov	r1, r9
 800992c:	f7f6 fc1c 	bl	8000168 <__aeabi_dsub>
 8009930:	4632      	mov	r2, r6
 8009932:	463b      	mov	r3, r7
 8009934:	f7f6 fc18 	bl	8000168 <__aeabi_dsub>
 8009938:	a333      	add	r3, pc, #204	; (adr r3, 8009a08 <__ieee754_rem_pio2+0x2f8>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009946:	f7f6 fdc7 	bl	80004d8 <__aeabi_dmul>
 800994a:	4632      	mov	r2, r6
 800994c:	463b      	mov	r3, r7
 800994e:	f7f6 fc0b 	bl	8000168 <__aeabi_dsub>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	4650      	mov	r0, sl
 800995c:	4659      	mov	r1, fp
 800995e:	f7f6 fc03 	bl	8000168 <__aeabi_dsub>
 8009962:	9a05      	ldr	r2, [sp, #20]
 8009964:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b31      	cmp	r3, #49	; 0x31
 800996c:	dc06      	bgt.n	800997c <__ieee754_rem_pio2+0x26c>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	46d0      	mov	r8, sl
 8009974:	46d9      	mov	r9, fp
 8009976:	e9c4 2300 	strd	r2, r3, [r4]
 800997a:	e7a6      	b.n	80098ca <__ieee754_rem_pio2+0x1ba>
 800997c:	a326      	add	r3, pc, #152	; (adr r3, 8009a18 <__ieee754_rem_pio2+0x308>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009986:	f7f6 fda7 	bl	80004d8 <__aeabi_dmul>
 800998a:	4606      	mov	r6, r0
 800998c:	460f      	mov	r7, r1
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4650      	mov	r0, sl
 8009994:	4659      	mov	r1, fp
 8009996:	f7f6 fbe7 	bl	8000168 <__aeabi_dsub>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4680      	mov	r8, r0
 80099a0:	4689      	mov	r9, r1
 80099a2:	4650      	mov	r0, sl
 80099a4:	4659      	mov	r1, fp
 80099a6:	f7f6 fbdf 	bl	8000168 <__aeabi_dsub>
 80099aa:	4632      	mov	r2, r6
 80099ac:	463b      	mov	r3, r7
 80099ae:	f7f6 fbdb 	bl	8000168 <__aeabi_dsub>
 80099b2:	a31b      	add	r3, pc, #108	; (adr r3, 8009a20 <__ieee754_rem_pio2+0x310>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	4606      	mov	r6, r0
 80099ba:	460f      	mov	r7, r1
 80099bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c0:	f7f6 fd8a 	bl	80004d8 <__aeabi_dmul>
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	f7f6 fbce 	bl	8000168 <__aeabi_dsub>
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	e75e      	b.n	8009890 <__ieee754_rem_pio2+0x180>
 80099d2:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <__ieee754_rem_pio2+0x330>)
 80099d4:	4592      	cmp	sl, r2
 80099d6:	dd35      	ble.n	8009a44 <__ieee754_rem_pio2+0x334>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	f7f6 fbc4 	bl	8000168 <__aeabi_dsub>
 80099e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099e4:	e9c4 0100 	strd	r0, r1, [r4]
 80099e8:	e6a2      	b.n	8009730 <__ieee754_rem_pio2+0x20>
 80099ea:	bf00      	nop
 80099ec:	f3af 8000 	nop.w
 80099f0:	54400000 	.word	0x54400000
 80099f4:	3ff921fb 	.word	0x3ff921fb
 80099f8:	1a626331 	.word	0x1a626331
 80099fc:	3dd0b461 	.word	0x3dd0b461
 8009a00:	1a600000 	.word	0x1a600000
 8009a04:	3dd0b461 	.word	0x3dd0b461
 8009a08:	2e037073 	.word	0x2e037073
 8009a0c:	3ba3198a 	.word	0x3ba3198a
 8009a10:	6dc9c883 	.word	0x6dc9c883
 8009a14:	3fe45f30 	.word	0x3fe45f30
 8009a18:	2e000000 	.word	0x2e000000
 8009a1c:	3ba3198a 	.word	0x3ba3198a
 8009a20:	252049c1 	.word	0x252049c1
 8009a24:	397b839a 	.word	0x397b839a
 8009a28:	3fe921fb 	.word	0x3fe921fb
 8009a2c:	4002d97b 	.word	0x4002d97b
 8009a30:	3ff921fb 	.word	0x3ff921fb
 8009a34:	413921fb 	.word	0x413921fb
 8009a38:	3fe00000 	.word	0x3fe00000
 8009a3c:	0800c398 	.word	0x0800c398
 8009a40:	7fefffff 	.word	0x7fefffff
 8009a44:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009a48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009a4c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009a50:	460f      	mov	r7, r1
 8009a52:	4606      	mov	r6, r0
 8009a54:	f7f6 fff0 	bl	8000a38 <__aeabi_d2iz>
 8009a58:	f7f6 fcd4 	bl	8000404 <__aeabi_i2d>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a68:	f7f6 fb7e 	bl	8000168 <__aeabi_dsub>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4b1e      	ldr	r3, [pc, #120]	; (8009ae8 <__ieee754_rem_pio2+0x3d8>)
 8009a70:	f7f6 fd32 	bl	80004d8 <__aeabi_dmul>
 8009a74:	460f      	mov	r7, r1
 8009a76:	4606      	mov	r6, r0
 8009a78:	f7f6 ffde 	bl	8000a38 <__aeabi_d2iz>
 8009a7c:	f7f6 fcc2 	bl	8000404 <__aeabi_i2d>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4630      	mov	r0, r6
 8009a86:	4639      	mov	r1, r7
 8009a88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a8c:	f7f6 fb6c 	bl	8000168 <__aeabi_dsub>
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <__ieee754_rem_pio2+0x3d8>)
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	f04f 0803 	mov.w	r8, #3
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	2700      	movs	r7, #0
 8009aa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009aa4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8009aae:	463b      	mov	r3, r7
 8009ab0:	46c2      	mov	sl, r8
 8009ab2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ab6:	f7f6 ff77 	bl	80009a8 <__aeabi_dcmpeq>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d1f4      	bne.n	8009aa8 <__ieee754_rem_pio2+0x398>
 8009abe:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <__ieee754_rem_pio2+0x3dc>)
 8009ac0:	462a      	mov	r2, r5
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	a806      	add	r0, sp, #24
 8009acc:	4653      	mov	r3, sl
 8009ace:	f000 fc6d 	bl	800a3ac <__kernel_rem_pio2>
 8009ad2:	9b04      	ldr	r3, [sp, #16]
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f6bf ae51 	bge.w	800977e <__ieee754_rem_pio2+0x6e>
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ae2:	6063      	str	r3, [r4, #4]
 8009ae4:	68e3      	ldr	r3, [r4, #12]
 8009ae6:	e707      	b.n	80098f8 <__ieee754_rem_pio2+0x1e8>
 8009ae8:	41700000 	.word	0x41700000
 8009aec:	0800c418 	.word	0x0800c418

08009af0 <__ieee754_sqrt>:
 8009af0:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009c44 <__ieee754_sqrt+0x154>
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	ea3c 0c01 	bics.w	ip, ip, r1
 8009afc:	460b      	mov	r3, r1
 8009afe:	4606      	mov	r6, r0
 8009b00:	460d      	mov	r5, r1
 8009b02:	460a      	mov	r2, r1
 8009b04:	4607      	mov	r7, r0
 8009b06:	4604      	mov	r4, r0
 8009b08:	d10e      	bne.n	8009b28 <__ieee754_sqrt+0x38>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	f7f6 fce4 	bl	80004d8 <__aeabi_dmul>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4630      	mov	r0, r6
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f6 fb28 	bl	800016c <__adddf3>
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460d      	mov	r5, r1
 8009b20:	4630      	mov	r0, r6
 8009b22:	4629      	mov	r1, r5
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	dc0d      	bgt.n	8009b48 <__ieee754_sqrt+0x58>
 8009b2c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009b30:	ea5c 0707 	orrs.w	r7, ip, r7
 8009b34:	d0f4      	beq.n	8009b20 <__ieee754_sqrt+0x30>
 8009b36:	b139      	cbz	r1, 8009b48 <__ieee754_sqrt+0x58>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	f7f6 fb15 	bl	8000168 <__aeabi_dsub>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	f7f6 fdf3 	bl	800072c <__aeabi_ddiv>
 8009b46:	e7e9      	b.n	8009b1c <__ieee754_sqrt+0x2c>
 8009b48:	1512      	asrs	r2, r2, #20
 8009b4a:	d074      	beq.n	8009c36 <__ieee754_sqrt+0x146>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	07d5      	lsls	r5, r2, #31
 8009b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b54:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009b58:	bf5e      	ittt	pl
 8009b5a:	0fe3      	lsrpl	r3, r4, #31
 8009b5c:	0064      	lslpl	r4, r4, #1
 8009b5e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009b62:	0fe3      	lsrs	r3, r4, #31
 8009b64:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009b68:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009b6c:	2516      	movs	r5, #22
 8009b6e:	4601      	mov	r1, r0
 8009b70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b74:	1076      	asrs	r6, r6, #1
 8009b76:	0064      	lsls	r4, r4, #1
 8009b78:	188f      	adds	r7, r1, r2
 8009b7a:	429f      	cmp	r7, r3
 8009b7c:	bfde      	ittt	le
 8009b7e:	1bdb      	suble	r3, r3, r7
 8009b80:	18b9      	addle	r1, r7, r2
 8009b82:	1880      	addle	r0, r0, r2
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	3d01      	subs	r5, #1
 8009b88:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009b8c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009b90:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009b94:	d1f0      	bne.n	8009b78 <__ieee754_sqrt+0x88>
 8009b96:	462a      	mov	r2, r5
 8009b98:	f04f 0e20 	mov.w	lr, #32
 8009b9c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	eb07 0c05 	add.w	ip, r7, r5
 8009ba6:	dc02      	bgt.n	8009bae <__ieee754_sqrt+0xbe>
 8009ba8:	d113      	bne.n	8009bd2 <__ieee754_sqrt+0xe2>
 8009baa:	45a4      	cmp	ip, r4
 8009bac:	d811      	bhi.n	8009bd2 <__ieee754_sqrt+0xe2>
 8009bae:	f1bc 0f00 	cmp.w	ip, #0
 8009bb2:	eb0c 0507 	add.w	r5, ip, r7
 8009bb6:	da43      	bge.n	8009c40 <__ieee754_sqrt+0x150>
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	db41      	blt.n	8009c40 <__ieee754_sqrt+0x150>
 8009bbc:	f101 0801 	add.w	r8, r1, #1
 8009bc0:	1a5b      	subs	r3, r3, r1
 8009bc2:	4641      	mov	r1, r8
 8009bc4:	45a4      	cmp	ip, r4
 8009bc6:	bf88      	it	hi
 8009bc8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009bcc:	eba4 040c 	sub.w	r4, r4, ip
 8009bd0:	443a      	add	r2, r7
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	f1be 0e01 	subs.w	lr, lr, #1
 8009bd8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009bdc:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8009be0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009be4:	d1dc      	bne.n	8009ba0 <__ieee754_sqrt+0xb0>
 8009be6:	4323      	orrs	r3, r4
 8009be8:	d006      	beq.n	8009bf8 <__ieee754_sqrt+0x108>
 8009bea:	1c54      	adds	r4, r2, #1
 8009bec:	bf0b      	itete	eq
 8009bee:	4672      	moveq	r2, lr
 8009bf0:	3201      	addne	r2, #1
 8009bf2:	3001      	addeq	r0, #1
 8009bf4:	f022 0201 	bicne.w	r2, r2, #1
 8009bf8:	1043      	asrs	r3, r0, #1
 8009bfa:	07c1      	lsls	r1, r0, #31
 8009bfc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009c00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c08:	bf48      	it	mi
 8009c0a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009c0e:	4610      	mov	r0, r2
 8009c10:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009c14:	e782      	b.n	8009b1c <__ieee754_sqrt+0x2c>
 8009c16:	0ae3      	lsrs	r3, r4, #11
 8009c18:	3915      	subs	r1, #21
 8009c1a:	0564      	lsls	r4, r4, #21
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0fa      	beq.n	8009c16 <__ieee754_sqrt+0x126>
 8009c20:	02de      	lsls	r6, r3, #11
 8009c22:	d50a      	bpl.n	8009c3a <__ieee754_sqrt+0x14a>
 8009c24:	f1c2 0020 	rsb	r0, r2, #32
 8009c28:	fa24 f000 	lsr.w	r0, r4, r0
 8009c2c:	1e55      	subs	r5, r2, #1
 8009c2e:	4094      	lsls	r4, r2
 8009c30:	4303      	orrs	r3, r0
 8009c32:	1b4a      	subs	r2, r1, r5
 8009c34:	e78a      	b.n	8009b4c <__ieee754_sqrt+0x5c>
 8009c36:	4611      	mov	r1, r2
 8009c38:	e7f0      	b.n	8009c1c <__ieee754_sqrt+0x12c>
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	3201      	adds	r2, #1
 8009c3e:	e7ef      	b.n	8009c20 <__ieee754_sqrt+0x130>
 8009c40:	4688      	mov	r8, r1
 8009c42:	e7bd      	b.n	8009bc0 <__ieee754_sqrt+0xd0>
 8009c44:	7ff00000 	.word	0x7ff00000

08009c48 <__ieee754_asinf>:
 8009c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8009c50:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009c54:	4604      	mov	r4, r0
 8009c56:	4605      	mov	r5, r0
 8009c58:	d10c      	bne.n	8009c74 <__ieee754_asinf+0x2c>
 8009c5a:	498d      	ldr	r1, [pc, #564]	; (8009e90 <__ieee754_asinf+0x248>)
 8009c5c:	f7f7 f872 	bl	8000d44 <__aeabi_fmul>
 8009c60:	498c      	ldr	r1, [pc, #560]	; (8009e94 <__ieee754_asinf+0x24c>)
 8009c62:	4605      	mov	r5, r0
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7f7 f86d 	bl	8000d44 <__aeabi_fmul>
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f7f6 ff61 	bl	8000b34 <__addsf3>
 8009c72:	e006      	b.n	8009c82 <__ieee754_asinf+0x3a>
 8009c74:	dd07      	ble.n	8009c86 <__ieee754_asinf+0x3e>
 8009c76:	4601      	mov	r1, r0
 8009c78:	f7f6 ff5a 	bl	8000b30 <__aeabi_fsub>
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	f7f7 f915 	bl	8000eac <__aeabi_fdiv>
 8009c82:	4604      	mov	r4, r0
 8009c84:	e00e      	b.n	8009ca4 <__ieee754_asinf+0x5c>
 8009c86:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8009c8a:	da58      	bge.n	8009d3e <__ieee754_asinf+0xf6>
 8009c8c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8009c90:	da0b      	bge.n	8009caa <__ieee754_asinf+0x62>
 8009c92:	4981      	ldr	r1, [pc, #516]	; (8009e98 <__ieee754_asinf+0x250>)
 8009c94:	f7f6 ff4e 	bl	8000b34 <__addsf3>
 8009c98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009c9c:	f7f7 fa0e 	bl	80010bc <__aeabi_fcmpgt>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d04c      	beq.n	8009d3e <__ieee754_asinf+0xf6>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009caa:	4601      	mov	r1, r0
 8009cac:	f7f7 f84a 	bl	8000d44 <__aeabi_fmul>
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	497a      	ldr	r1, [pc, #488]	; (8009e9c <__ieee754_asinf+0x254>)
 8009cb4:	f7f7 f846 	bl	8000d44 <__aeabi_fmul>
 8009cb8:	4979      	ldr	r1, [pc, #484]	; (8009ea0 <__ieee754_asinf+0x258>)
 8009cba:	f7f6 ff3b 	bl	8000b34 <__addsf3>
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f7f7 f840 	bl	8000d44 <__aeabi_fmul>
 8009cc4:	4977      	ldr	r1, [pc, #476]	; (8009ea4 <__ieee754_asinf+0x25c>)
 8009cc6:	f7f6 ff33 	bl	8000b30 <__aeabi_fsub>
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f7 f83a 	bl	8000d44 <__aeabi_fmul>
 8009cd0:	4975      	ldr	r1, [pc, #468]	; (8009ea8 <__ieee754_asinf+0x260>)
 8009cd2:	f7f6 ff2f 	bl	8000b34 <__addsf3>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f7 f834 	bl	8000d44 <__aeabi_fmul>
 8009cdc:	4973      	ldr	r1, [pc, #460]	; (8009eac <__ieee754_asinf+0x264>)
 8009cde:	f7f6 ff27 	bl	8000b30 <__aeabi_fsub>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f7 f82e 	bl	8000d44 <__aeabi_fmul>
 8009ce8:	4971      	ldr	r1, [pc, #452]	; (8009eb0 <__ieee754_asinf+0x268>)
 8009cea:	f7f6 ff23 	bl	8000b34 <__addsf3>
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f7f7 f828 	bl	8000d44 <__aeabi_fmul>
 8009cf4:	496f      	ldr	r1, [pc, #444]	; (8009eb4 <__ieee754_asinf+0x26c>)
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	f7f7 f823 	bl	8000d44 <__aeabi_fmul>
 8009cfe:	496e      	ldr	r1, [pc, #440]	; (8009eb8 <__ieee754_asinf+0x270>)
 8009d00:	f7f6 ff16 	bl	8000b30 <__aeabi_fsub>
 8009d04:	4629      	mov	r1, r5
 8009d06:	f7f7 f81d 	bl	8000d44 <__aeabi_fmul>
 8009d0a:	496c      	ldr	r1, [pc, #432]	; (8009ebc <__ieee754_asinf+0x274>)
 8009d0c:	f7f6 ff12 	bl	8000b34 <__addsf3>
 8009d10:	4629      	mov	r1, r5
 8009d12:	f7f7 f817 	bl	8000d44 <__aeabi_fmul>
 8009d16:	496a      	ldr	r1, [pc, #424]	; (8009ec0 <__ieee754_asinf+0x278>)
 8009d18:	f7f6 ff0a 	bl	8000b30 <__aeabi_fsub>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7f7 f811 	bl	8000d44 <__aeabi_fmul>
 8009d22:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009d26:	f7f6 ff05 	bl	8000b34 <__addsf3>
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7f7 f8bd 	bl	8000eac <__aeabi_fdiv>
 8009d32:	4621      	mov	r1, r4
 8009d34:	f7f7 f806 	bl	8000d44 <__aeabi_fmul>
 8009d38:	4601      	mov	r1, r0
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	e797      	b.n	8009c6e <__ieee754_asinf+0x26>
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7ff fb40 	bl	80093c4 <fabsf>
 8009d44:	4601      	mov	r1, r0
 8009d46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009d4a:	f7f6 fef1 	bl	8000b30 <__aeabi_fsub>
 8009d4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009d52:	f7f6 fff7 	bl	8000d44 <__aeabi_fmul>
 8009d56:	4606      	mov	r6, r0
 8009d58:	4950      	ldr	r1, [pc, #320]	; (8009e9c <__ieee754_asinf+0x254>)
 8009d5a:	f7f6 fff3 	bl	8000d44 <__aeabi_fmul>
 8009d5e:	4950      	ldr	r1, [pc, #320]	; (8009ea0 <__ieee754_asinf+0x258>)
 8009d60:	f7f6 fee8 	bl	8000b34 <__addsf3>
 8009d64:	4631      	mov	r1, r6
 8009d66:	f7f6 ffed 	bl	8000d44 <__aeabi_fmul>
 8009d6a:	494e      	ldr	r1, [pc, #312]	; (8009ea4 <__ieee754_asinf+0x25c>)
 8009d6c:	f7f6 fee0 	bl	8000b30 <__aeabi_fsub>
 8009d70:	4631      	mov	r1, r6
 8009d72:	f7f6 ffe7 	bl	8000d44 <__aeabi_fmul>
 8009d76:	494c      	ldr	r1, [pc, #304]	; (8009ea8 <__ieee754_asinf+0x260>)
 8009d78:	f7f6 fedc 	bl	8000b34 <__addsf3>
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	f7f6 ffe1 	bl	8000d44 <__aeabi_fmul>
 8009d82:	494a      	ldr	r1, [pc, #296]	; (8009eac <__ieee754_asinf+0x264>)
 8009d84:	f7f6 fed4 	bl	8000b30 <__aeabi_fsub>
 8009d88:	4631      	mov	r1, r6
 8009d8a:	f7f6 ffdb 	bl	8000d44 <__aeabi_fmul>
 8009d8e:	4948      	ldr	r1, [pc, #288]	; (8009eb0 <__ieee754_asinf+0x268>)
 8009d90:	f7f6 fed0 	bl	8000b34 <__addsf3>
 8009d94:	4631      	mov	r1, r6
 8009d96:	f7f6 ffd5 	bl	8000d44 <__aeabi_fmul>
 8009d9a:	4946      	ldr	r1, [pc, #280]	; (8009eb4 <__ieee754_asinf+0x26c>)
 8009d9c:	4681      	mov	r9, r0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7f6 ffd0 	bl	8000d44 <__aeabi_fmul>
 8009da4:	4944      	ldr	r1, [pc, #272]	; (8009eb8 <__ieee754_asinf+0x270>)
 8009da6:	f7f6 fec3 	bl	8000b30 <__aeabi_fsub>
 8009daa:	4631      	mov	r1, r6
 8009dac:	f7f6 ffca 	bl	8000d44 <__aeabi_fmul>
 8009db0:	4942      	ldr	r1, [pc, #264]	; (8009ebc <__ieee754_asinf+0x274>)
 8009db2:	f7f6 febf 	bl	8000b34 <__addsf3>
 8009db6:	4631      	mov	r1, r6
 8009db8:	f7f6 ffc4 	bl	8000d44 <__aeabi_fmul>
 8009dbc:	4940      	ldr	r1, [pc, #256]	; (8009ec0 <__ieee754_asinf+0x278>)
 8009dbe:	f7f6 feb7 	bl	8000b30 <__aeabi_fsub>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	f7f6 ffbe 	bl	8000d44 <__aeabi_fmul>
 8009dc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009dcc:	f7f6 feb2 	bl	8000b34 <__addsf3>
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f000 f9da 	bl	800a18c <__ieee754_sqrtf>
 8009dd8:	4b3a      	ldr	r3, [pc, #232]	; (8009ec4 <__ieee754_asinf+0x27c>)
 8009dda:	4607      	mov	r7, r0
 8009ddc:	4598      	cmp	r8, r3
 8009dde:	dd1a      	ble.n	8009e16 <__ieee754_asinf+0x1ce>
 8009de0:	4651      	mov	r1, sl
 8009de2:	4648      	mov	r0, r9
 8009de4:	f7f7 f862 	bl	8000eac <__aeabi_fdiv>
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 ffab 	bl	8000d44 <__aeabi_fmul>
 8009dee:	4639      	mov	r1, r7
 8009df0:	f7f6 fea0 	bl	8000b34 <__addsf3>
 8009df4:	4601      	mov	r1, r0
 8009df6:	f7f6 fe9d 	bl	8000b34 <__addsf3>
 8009dfa:	4933      	ldr	r1, [pc, #204]	; (8009ec8 <__ieee754_asinf+0x280>)
 8009dfc:	f7f6 fe9a 	bl	8000b34 <__addsf3>
 8009e00:	4601      	mov	r1, r0
 8009e02:	4823      	ldr	r0, [pc, #140]	; (8009e90 <__ieee754_asinf+0x248>)
 8009e04:	f7f6 fe94 	bl	8000b30 <__aeabi_fsub>
 8009e08:	2d00      	cmp	r5, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	f73f af4a 	bgt.w	8009ca4 <__ieee754_asinf+0x5c>
 8009e10:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009e14:	e735      	b.n	8009c82 <__ieee754_asinf+0x3a>
 8009e16:	4601      	mov	r1, r0
 8009e18:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8009e1c:	f7f6 fe8a 	bl	8000b34 <__addsf3>
 8009e20:	4651      	mov	r1, sl
 8009e22:	4604      	mov	r4, r0
 8009e24:	4648      	mov	r0, r9
 8009e26:	f7f7 f841 	bl	8000eac <__aeabi_fdiv>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f7f6 ff89 	bl	8000d44 <__aeabi_fmul>
 8009e32:	f028 080f 	bic.w	r8, r8, #15
 8009e36:	4681      	mov	r9, r0
 8009e38:	4641      	mov	r1, r8
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7f6 ff82 	bl	8000d44 <__aeabi_fmul>
 8009e40:	4601      	mov	r1, r0
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7f6 fe74 	bl	8000b30 <__aeabi_fsub>
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7f6 fe71 	bl	8000b34 <__addsf3>
 8009e52:	4601      	mov	r1, r0
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7f7 f829 	bl	8000eac <__aeabi_fdiv>
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	f7f6 fe6a 	bl	8000b34 <__addsf3>
 8009e60:	4601      	mov	r1, r0
 8009e62:	480c      	ldr	r0, [pc, #48]	; (8009e94 <__ieee754_asinf+0x24c>)
 8009e64:	f7f6 fe64 	bl	8000b30 <__aeabi_fsub>
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4648      	mov	r0, r9
 8009e6c:	f7f6 fe60 	bl	8000b30 <__aeabi_fsub>
 8009e70:	4641      	mov	r1, r8
 8009e72:	4604      	mov	r4, r0
 8009e74:	4640      	mov	r0, r8
 8009e76:	f7f6 fe5d 	bl	8000b34 <__addsf3>
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	4813      	ldr	r0, [pc, #76]	; (8009ecc <__ieee754_asinf+0x284>)
 8009e7e:	f7f6 fe57 	bl	8000b30 <__aeabi_fsub>
 8009e82:	4601      	mov	r1, r0
 8009e84:	4620      	mov	r0, r4
 8009e86:	f7f6 fe53 	bl	8000b30 <__aeabi_fsub>
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	480f      	ldr	r0, [pc, #60]	; (8009ecc <__ieee754_asinf+0x284>)
 8009e8e:	e7b9      	b.n	8009e04 <__ieee754_asinf+0x1bc>
 8009e90:	3fc90fdb 	.word	0x3fc90fdb
 8009e94:	b33bbd2e 	.word	0xb33bbd2e
 8009e98:	7149f2ca 	.word	0x7149f2ca
 8009e9c:	3811ef08 	.word	0x3811ef08
 8009ea0:	3a4f7f04 	.word	0x3a4f7f04
 8009ea4:	3d241146 	.word	0x3d241146
 8009ea8:	3e4e0aa8 	.word	0x3e4e0aa8
 8009eac:	3ea6b090 	.word	0x3ea6b090
 8009eb0:	3e2aaaab 	.word	0x3e2aaaab
 8009eb4:	3d9dc62e 	.word	0x3d9dc62e
 8009eb8:	3f303361 	.word	0x3f303361
 8009ebc:	4001572d 	.word	0x4001572d
 8009ec0:	4019d139 	.word	0x4019d139
 8009ec4:	3f799999 	.word	0x3f799999
 8009ec8:	333bbd2e 	.word	0x333bbd2e
 8009ecc:	3f490fdb 	.word	0x3f490fdb

08009ed0 <__ieee754_rem_pio2f>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	4aa0      	ldr	r2, [pc, #640]	; (800a158 <__ieee754_rem_pio2f+0x288>)
 8009ed6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009eda:	4296      	cmp	r6, r2
 8009edc:	460c      	mov	r4, r1
 8009ede:	4682      	mov	sl, r0
 8009ee0:	b087      	sub	sp, #28
 8009ee2:	dc04      	bgt.n	8009eee <__ieee754_rem_pio2f+0x1e>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6008      	str	r0, [r1, #0]
 8009ee8:	604b      	str	r3, [r1, #4]
 8009eea:	2500      	movs	r5, #0
 8009eec:	e01a      	b.n	8009f24 <__ieee754_rem_pio2f+0x54>
 8009eee:	4a9b      	ldr	r2, [pc, #620]	; (800a15c <__ieee754_rem_pio2f+0x28c>)
 8009ef0:	4296      	cmp	r6, r2
 8009ef2:	dc4b      	bgt.n	8009f8c <__ieee754_rem_pio2f+0xbc>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	499a      	ldr	r1, [pc, #616]	; (800a160 <__ieee754_rem_pio2f+0x290>)
 8009ef8:	4f9a      	ldr	r7, [pc, #616]	; (800a164 <__ieee754_rem_pio2f+0x294>)
 8009efa:	f026 060f 	bic.w	r6, r6, #15
 8009efe:	dd23      	ble.n	8009f48 <__ieee754_rem_pio2f+0x78>
 8009f00:	f7f6 fe16 	bl	8000b30 <__aeabi_fsub>
 8009f04:	42be      	cmp	r6, r7
 8009f06:	4605      	mov	r5, r0
 8009f08:	d010      	beq.n	8009f2c <__ieee754_rem_pio2f+0x5c>
 8009f0a:	4997      	ldr	r1, [pc, #604]	; (800a168 <__ieee754_rem_pio2f+0x298>)
 8009f0c:	f7f6 fe10 	bl	8000b30 <__aeabi_fsub>
 8009f10:	4601      	mov	r1, r0
 8009f12:	6020      	str	r0, [r4, #0]
 8009f14:	4628      	mov	r0, r5
 8009f16:	f7f6 fe0b 	bl	8000b30 <__aeabi_fsub>
 8009f1a:	4993      	ldr	r1, [pc, #588]	; (800a168 <__ieee754_rem_pio2f+0x298>)
 8009f1c:	f7f6 fe08 	bl	8000b30 <__aeabi_fsub>
 8009f20:	2501      	movs	r5, #1
 8009f22:	6060      	str	r0, [r4, #4]
 8009f24:	4628      	mov	r0, r5
 8009f26:	b007      	add	sp, #28
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	498f      	ldr	r1, [pc, #572]	; (800a16c <__ieee754_rem_pio2f+0x29c>)
 8009f2e:	f7f6 fdff 	bl	8000b30 <__aeabi_fsub>
 8009f32:	498f      	ldr	r1, [pc, #572]	; (800a170 <__ieee754_rem_pio2f+0x2a0>)
 8009f34:	4605      	mov	r5, r0
 8009f36:	f7f6 fdfb 	bl	8000b30 <__aeabi_fsub>
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	6020      	str	r0, [r4, #0]
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f7f6 fdf6 	bl	8000b30 <__aeabi_fsub>
 8009f44:	498a      	ldr	r1, [pc, #552]	; (800a170 <__ieee754_rem_pio2f+0x2a0>)
 8009f46:	e7e9      	b.n	8009f1c <__ieee754_rem_pio2f+0x4c>
 8009f48:	f7f6 fdf4 	bl	8000b34 <__addsf3>
 8009f4c:	42be      	cmp	r6, r7
 8009f4e:	4605      	mov	r5, r0
 8009f50:	d00e      	beq.n	8009f70 <__ieee754_rem_pio2f+0xa0>
 8009f52:	4985      	ldr	r1, [pc, #532]	; (800a168 <__ieee754_rem_pio2f+0x298>)
 8009f54:	f7f6 fdee 	bl	8000b34 <__addsf3>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7f6 fde7 	bl	8000b30 <__aeabi_fsub>
 8009f62:	4981      	ldr	r1, [pc, #516]	; (800a168 <__ieee754_rem_pio2f+0x298>)
 8009f64:	f7f6 fde6 	bl	8000b34 <__addsf3>
 8009f68:	f04f 35ff 	mov.w	r5, #4294967295
 8009f6c:	6060      	str	r0, [r4, #4]
 8009f6e:	e7d9      	b.n	8009f24 <__ieee754_rem_pio2f+0x54>
 8009f70:	497e      	ldr	r1, [pc, #504]	; (800a16c <__ieee754_rem_pio2f+0x29c>)
 8009f72:	f7f6 fddf 	bl	8000b34 <__addsf3>
 8009f76:	497e      	ldr	r1, [pc, #504]	; (800a170 <__ieee754_rem_pio2f+0x2a0>)
 8009f78:	4605      	mov	r5, r0
 8009f7a:	f7f6 fddb 	bl	8000b34 <__addsf3>
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6020      	str	r0, [r4, #0]
 8009f82:	4628      	mov	r0, r5
 8009f84:	f7f6 fdd4 	bl	8000b30 <__aeabi_fsub>
 8009f88:	4979      	ldr	r1, [pc, #484]	; (800a170 <__ieee754_rem_pio2f+0x2a0>)
 8009f8a:	e7eb      	b.n	8009f64 <__ieee754_rem_pio2f+0x94>
 8009f8c:	4a79      	ldr	r2, [pc, #484]	; (800a174 <__ieee754_rem_pio2f+0x2a4>)
 8009f8e:	4296      	cmp	r6, r2
 8009f90:	f300 8091 	bgt.w	800a0b6 <__ieee754_rem_pio2f+0x1e6>
 8009f94:	f7ff fa16 	bl	80093c4 <fabsf>
 8009f98:	4977      	ldr	r1, [pc, #476]	; (800a178 <__ieee754_rem_pio2f+0x2a8>)
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	f7f6 fed2 	bl	8000d44 <__aeabi_fmul>
 8009fa0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009fa4:	f7f6 fdc6 	bl	8000b34 <__addsf3>
 8009fa8:	f7f7 f8a8 	bl	80010fc <__aeabi_f2iz>
 8009fac:	4605      	mov	r5, r0
 8009fae:	f7f6 fe75 	bl	8000c9c <__aeabi_i2f>
 8009fb2:	496b      	ldr	r1, [pc, #428]	; (800a160 <__ieee754_rem_pio2f+0x290>)
 8009fb4:	4681      	mov	r9, r0
 8009fb6:	f7f6 fec5 	bl	8000d44 <__aeabi_fmul>
 8009fba:	4601      	mov	r1, r0
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7f6 fdb7 	bl	8000b30 <__aeabi_fsub>
 8009fc2:	4969      	ldr	r1, [pc, #420]	; (800a168 <__ieee754_rem_pio2f+0x298>)
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f7f6 febc 	bl	8000d44 <__aeabi_fmul>
 8009fcc:	2d1f      	cmp	r5, #31
 8009fce:	4607      	mov	r7, r0
 8009fd0:	dc0c      	bgt.n	8009fec <__ieee754_rem_pio2f+0x11c>
 8009fd2:	4a6a      	ldr	r2, [pc, #424]	; (800a17c <__ieee754_rem_pio2f+0x2ac>)
 8009fd4:	1e69      	subs	r1, r5, #1
 8009fd6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009fda:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d004      	beq.n	8009fec <__ieee754_rem_pio2f+0x11c>
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	f7f6 fda3 	bl	8000b30 <__aeabi_fsub>
 8009fea:	e00b      	b.n	800a004 <__ieee754_rem_pio2f+0x134>
 8009fec:	4639      	mov	r1, r7
 8009fee:	4640      	mov	r0, r8
 8009ff0:	f7f6 fd9e 	bl	8000b30 <__aeabi_fsub>
 8009ff4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009ff8:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8009ffc:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800a000:	2e08      	cmp	r6, #8
 800a002:	dc01      	bgt.n	800a008 <__ieee754_rem_pio2f+0x138>
 800a004:	6020      	str	r0, [r4, #0]
 800a006:	e026      	b.n	800a056 <__ieee754_rem_pio2f+0x186>
 800a008:	4958      	ldr	r1, [pc, #352]	; (800a16c <__ieee754_rem_pio2f+0x29c>)
 800a00a:	4648      	mov	r0, r9
 800a00c:	f7f6 fe9a 	bl	8000d44 <__aeabi_fmul>
 800a010:	4607      	mov	r7, r0
 800a012:	4601      	mov	r1, r0
 800a014:	4640      	mov	r0, r8
 800a016:	f7f6 fd8b 	bl	8000b30 <__aeabi_fsub>
 800a01a:	4601      	mov	r1, r0
 800a01c:	4606      	mov	r6, r0
 800a01e:	4640      	mov	r0, r8
 800a020:	f7f6 fd86 	bl	8000b30 <__aeabi_fsub>
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 fd83 	bl	8000b30 <__aeabi_fsub>
 800a02a:	4607      	mov	r7, r0
 800a02c:	4950      	ldr	r1, [pc, #320]	; (800a170 <__ieee754_rem_pio2f+0x2a0>)
 800a02e:	4648      	mov	r0, r9
 800a030:	f7f6 fe88 	bl	8000d44 <__aeabi_fmul>
 800a034:	4639      	mov	r1, r7
 800a036:	f7f6 fd7b 	bl	8000b30 <__aeabi_fsub>
 800a03a:	4601      	mov	r1, r0
 800a03c:	4607      	mov	r7, r0
 800a03e:	4630      	mov	r0, r6
 800a040:	f7f6 fd76 	bl	8000b30 <__aeabi_fsub>
 800a044:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a048:	ebab 0b03 	sub.w	fp, fp, r3
 800a04c:	f1bb 0f19 	cmp.w	fp, #25
 800a050:	dc16      	bgt.n	800a080 <__ieee754_rem_pio2f+0x1b0>
 800a052:	46b0      	mov	r8, r6
 800a054:	6020      	str	r0, [r4, #0]
 800a056:	6826      	ldr	r6, [r4, #0]
 800a058:	4640      	mov	r0, r8
 800a05a:	4631      	mov	r1, r6
 800a05c:	f7f6 fd68 	bl	8000b30 <__aeabi_fsub>
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fd65 	bl	8000b30 <__aeabi_fsub>
 800a066:	f1ba 0f00 	cmp.w	sl, #0
 800a06a:	6060      	str	r0, [r4, #4]
 800a06c:	f6bf af5a 	bge.w	8009f24 <__ieee754_rem_pio2f+0x54>
 800a070:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a074:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a078:	6026      	str	r6, [r4, #0]
 800a07a:	6060      	str	r0, [r4, #4]
 800a07c:	426d      	negs	r5, r5
 800a07e:	e751      	b.n	8009f24 <__ieee754_rem_pio2f+0x54>
 800a080:	493f      	ldr	r1, [pc, #252]	; (800a180 <__ieee754_rem_pio2f+0x2b0>)
 800a082:	4648      	mov	r0, r9
 800a084:	f7f6 fe5e 	bl	8000d44 <__aeabi_fmul>
 800a088:	4607      	mov	r7, r0
 800a08a:	4601      	mov	r1, r0
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7f6 fd4f 	bl	8000b30 <__aeabi_fsub>
 800a092:	4601      	mov	r1, r0
 800a094:	4680      	mov	r8, r0
 800a096:	4630      	mov	r0, r6
 800a098:	f7f6 fd4a 	bl	8000b30 <__aeabi_fsub>
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 fd47 	bl	8000b30 <__aeabi_fsub>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	4937      	ldr	r1, [pc, #220]	; (800a184 <__ieee754_rem_pio2f+0x2b4>)
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	f7f6 fe4c 	bl	8000d44 <__aeabi_fmul>
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	f7f6 fd3f 	bl	8000b30 <__aeabi_fsub>
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	e795      	b.n	8009fe2 <__ieee754_rem_pio2f+0x112>
 800a0b6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a0ba:	db05      	blt.n	800a0c8 <__ieee754_rem_pio2f+0x1f8>
 800a0bc:	4601      	mov	r1, r0
 800a0be:	f7f6 fd37 	bl	8000b30 <__aeabi_fsub>
 800a0c2:	6060      	str	r0, [r4, #4]
 800a0c4:	6020      	str	r0, [r4, #0]
 800a0c6:	e710      	b.n	8009eea <__ieee754_rem_pio2f+0x1a>
 800a0c8:	15f7      	asrs	r7, r6, #23
 800a0ca:	3f86      	subs	r7, #134	; 0x86
 800a0cc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7f7 f813 	bl	80010fc <__aeabi_f2iz>
 800a0d6:	f7f6 fde1 	bl	8000c9c <__aeabi_i2f>
 800a0da:	4601      	mov	r1, r0
 800a0dc:	9003      	str	r0, [sp, #12]
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7f6 fd26 	bl	8000b30 <__aeabi_fsub>
 800a0e4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a0e8:	f7f6 fe2c 	bl	8000d44 <__aeabi_fmul>
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	f7f7 f805 	bl	80010fc <__aeabi_f2iz>
 800a0f2:	f7f6 fdd3 	bl	8000c9c <__aeabi_i2f>
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	9004      	str	r0, [sp, #16]
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7f6 fd17 	bl	8000b30 <__aeabi_fsub>
 800a102:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a106:	f7f6 fe1d 	bl	8000d44 <__aeabi_fmul>
 800a10a:	2100      	movs	r1, #0
 800a10c:	9005      	str	r0, [sp, #20]
 800a10e:	f7f6 ffad 	bl	800106c <__aeabi_fcmpeq>
 800a112:	b1f0      	cbz	r0, 800a152 <__ieee754_rem_pio2f+0x282>
 800a114:	2100      	movs	r1, #0
 800a116:	4628      	mov	r0, r5
 800a118:	f7f6 ffa8 	bl	800106c <__aeabi_fcmpeq>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	bf14      	ite	ne
 800a120:	2301      	movne	r3, #1
 800a122:	2302      	moveq	r3, #2
 800a124:	4a18      	ldr	r2, [pc, #96]	; (800a188 <__ieee754_rem_pio2f+0x2b8>)
 800a126:	4621      	mov	r1, r4
 800a128:	9201      	str	r2, [sp, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	a803      	add	r0, sp, #12
 800a12e:	9200      	str	r2, [sp, #0]
 800a130:	463a      	mov	r2, r7
 800a132:	f000 fdbb 	bl	800acac <__kernel_rem_pio2f>
 800a136:	f1ba 0f00 	cmp.w	sl, #0
 800a13a:	4605      	mov	r5, r0
 800a13c:	f6bf aef2 	bge.w	8009f24 <__ieee754_rem_pio2f+0x54>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	6863      	ldr	r3, [r4, #4]
 800a14a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a14e:	6063      	str	r3, [r4, #4]
 800a150:	e794      	b.n	800a07c <__ieee754_rem_pio2f+0x1ac>
 800a152:	2303      	movs	r3, #3
 800a154:	e7e6      	b.n	800a124 <__ieee754_rem_pio2f+0x254>
 800a156:	bf00      	nop
 800a158:	3f490fd8 	.word	0x3f490fd8
 800a15c:	4016cbe3 	.word	0x4016cbe3
 800a160:	3fc90f80 	.word	0x3fc90f80
 800a164:	3fc90fd0 	.word	0x3fc90fd0
 800a168:	37354443 	.word	0x37354443
 800a16c:	37354400 	.word	0x37354400
 800a170:	2e85a308 	.word	0x2e85a308
 800a174:	43490f80 	.word	0x43490f80
 800a178:	3f22f984 	.word	0x3f22f984
 800a17c:	0800c520 	.word	0x0800c520
 800a180:	2e85a300 	.word	0x2e85a300
 800a184:	248d3132 	.word	0x248d3132
 800a188:	0800c5a0 	.word	0x0800c5a0

0800a18c <__ieee754_sqrtf>:
 800a18c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a190:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4603      	mov	r3, r0
 800a198:	4604      	mov	r4, r0
 800a19a:	d309      	bcc.n	800a1b0 <__ieee754_sqrtf+0x24>
 800a19c:	4601      	mov	r1, r0
 800a19e:	f7f6 fdd1 	bl	8000d44 <__aeabi_fmul>
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f7f6 fcc5 	bl	8000b34 <__addsf3>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	d0fb      	beq.n	800a1ac <__ieee754_sqrtf+0x20>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	da06      	bge.n	800a1c6 <__ieee754_sqrtf+0x3a>
 800a1b8:	4601      	mov	r1, r0
 800a1ba:	f7f6 fcb9 	bl	8000b30 <__aeabi_fsub>
 800a1be:	4601      	mov	r1, r0
 800a1c0:	f7f6 fe74 	bl	8000eac <__aeabi_fdiv>
 800a1c4:	e7f1      	b.n	800a1aa <__ieee754_sqrtf+0x1e>
 800a1c6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800a1ca:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a1ce:	d029      	beq.n	800a224 <__ieee754_sqrtf+0x98>
 800a1d0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800a1d4:	07cb      	lsls	r3, r1, #31
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800a1de:	f04f 0419 	mov.w	r4, #25
 800a1e2:	461e      	mov	r6, r3
 800a1e4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800a1e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a1ec:	bf58      	it	pl
 800a1ee:	0052      	lslpl	r2, r2, #1
 800a1f0:	1040      	asrs	r0, r0, #1
 800a1f2:	0052      	lsls	r2, r2, #1
 800a1f4:	1875      	adds	r5, r6, r1
 800a1f6:	4295      	cmp	r5, r2
 800a1f8:	bfde      	ittt	le
 800a1fa:	186e      	addle	r6, r5, r1
 800a1fc:	1b52      	suble	r2, r2, r5
 800a1fe:	185b      	addle	r3, r3, r1
 800a200:	3c01      	subs	r4, #1
 800a202:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a206:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a20a:	d1f3      	bne.n	800a1f4 <__ieee754_sqrtf+0x68>
 800a20c:	b112      	cbz	r2, 800a214 <__ieee754_sqrtf+0x88>
 800a20e:	3301      	adds	r3, #1
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	105c      	asrs	r4, r3, #1
 800a216:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a21a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800a21e:	e7c5      	b.n	800a1ac <__ieee754_sqrtf+0x20>
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	3201      	adds	r2, #1
 800a224:	0218      	lsls	r0, r3, #8
 800a226:	d5fb      	bpl.n	800a220 <__ieee754_sqrtf+0x94>
 800a228:	3a01      	subs	r2, #1
 800a22a:	1a89      	subs	r1, r1, r2
 800a22c:	e7d0      	b.n	800a1d0 <__ieee754_sqrtf+0x44>
	...

0800a230 <__kernel_cos>:
 800a230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a238:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a23c:	4680      	mov	r8, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	e9cd 2300 	strd	r2, r3, [sp]
 800a244:	da04      	bge.n	800a250 <__kernel_cos+0x20>
 800a246:	f7f6 fbf7 	bl	8000a38 <__aeabi_d2iz>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	f000 8086 	beq.w	800a35c <__kernel_cos+0x12c>
 800a250:	4642      	mov	r2, r8
 800a252:	463b      	mov	r3, r7
 800a254:	4640      	mov	r0, r8
 800a256:	4639      	mov	r1, r7
 800a258:	f7f6 f93e 	bl	80004d8 <__aeabi_dmul>
 800a25c:	2200      	movs	r2, #0
 800a25e:	4b4e      	ldr	r3, [pc, #312]	; (800a398 <__kernel_cos+0x168>)
 800a260:	4604      	mov	r4, r0
 800a262:	460d      	mov	r5, r1
 800a264:	f7f6 f938 	bl	80004d8 <__aeabi_dmul>
 800a268:	a33f      	add	r3, pc, #252	; (adr r3, 800a368 <__kernel_cos+0x138>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	4682      	mov	sl, r0
 800a270:	468b      	mov	fp, r1
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f6 f92f 	bl	80004d8 <__aeabi_dmul>
 800a27a:	a33d      	add	r3, pc, #244	; (adr r3, 800a370 <__kernel_cos+0x140>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f5 ff74 	bl	800016c <__adddf3>
 800a284:	4622      	mov	r2, r4
 800a286:	462b      	mov	r3, r5
 800a288:	f7f6 f926 	bl	80004d8 <__aeabi_dmul>
 800a28c:	a33a      	add	r3, pc, #232	; (adr r3, 800a378 <__kernel_cos+0x148>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f7f5 ff69 	bl	8000168 <__aeabi_dsub>
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	f7f6 f91d 	bl	80004d8 <__aeabi_dmul>
 800a29e:	a338      	add	r3, pc, #224	; (adr r3, 800a380 <__kernel_cos+0x150>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f5 ff62 	bl	800016c <__adddf3>
 800a2a8:	4622      	mov	r2, r4
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	f7f6 f914 	bl	80004d8 <__aeabi_dmul>
 800a2b0:	a335      	add	r3, pc, #212	; (adr r3, 800a388 <__kernel_cos+0x158>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f5 ff57 	bl	8000168 <__aeabi_dsub>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	462b      	mov	r3, r5
 800a2be:	f7f6 f90b 	bl	80004d8 <__aeabi_dmul>
 800a2c2:	a333      	add	r3, pc, #204	; (adr r3, 800a390 <__kernel_cos+0x160>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f5 ff50 	bl	800016c <__adddf3>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	f7f6 f902 	bl	80004d8 <__aeabi_dmul>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	f7f6 f8fe 	bl	80004d8 <__aeabi_dmul>
 800a2dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7f6 f8f6 	bl	80004d8 <__aeabi_dmul>
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f7f5 ff38 	bl	8000168 <__aeabi_dsub>
 800a2f8:	4b28      	ldr	r3, [pc, #160]	; (800a39c <__kernel_cos+0x16c>)
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	429e      	cmp	r6, r3
 800a2fe:	4689      	mov	r9, r1
 800a300:	dc0e      	bgt.n	800a320 <__kernel_cos+0xf0>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4650      	mov	r0, sl
 800a308:	4659      	mov	r1, fp
 800a30a:	f7f5 ff2d 	bl	8000168 <__aeabi_dsub>
 800a30e:	4602      	mov	r2, r0
 800a310:	2000      	movs	r0, #0
 800a312:	460b      	mov	r3, r1
 800a314:	4922      	ldr	r1, [pc, #136]	; (800a3a0 <__kernel_cos+0x170>)
 800a316:	f7f5 ff27 	bl	8000168 <__aeabi_dsub>
 800a31a:	b003      	add	sp, #12
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	2400      	movs	r4, #0
 800a322:	4b20      	ldr	r3, [pc, #128]	; (800a3a4 <__kernel_cos+0x174>)
 800a324:	4622      	mov	r2, r4
 800a326:	429e      	cmp	r6, r3
 800a328:	bfcc      	ite	gt
 800a32a:	4d1f      	ldrgt	r5, [pc, #124]	; (800a3a8 <__kernel_cos+0x178>)
 800a32c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a330:	462b      	mov	r3, r5
 800a332:	2000      	movs	r0, #0
 800a334:	491a      	ldr	r1, [pc, #104]	; (800a3a0 <__kernel_cos+0x170>)
 800a336:	f7f5 ff17 	bl	8000168 <__aeabi_dsub>
 800a33a:	4622      	mov	r2, r4
 800a33c:	4606      	mov	r6, r0
 800a33e:	460f      	mov	r7, r1
 800a340:	462b      	mov	r3, r5
 800a342:	4650      	mov	r0, sl
 800a344:	4659      	mov	r1, fp
 800a346:	f7f5 ff0f 	bl	8000168 <__aeabi_dsub>
 800a34a:	4642      	mov	r2, r8
 800a34c:	464b      	mov	r3, r9
 800a34e:	f7f5 ff0b 	bl	8000168 <__aeabi_dsub>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	e7dc      	b.n	800a316 <__kernel_cos+0xe6>
 800a35c:	2000      	movs	r0, #0
 800a35e:	4910      	ldr	r1, [pc, #64]	; (800a3a0 <__kernel_cos+0x170>)
 800a360:	e7db      	b.n	800a31a <__kernel_cos+0xea>
 800a362:	bf00      	nop
 800a364:	f3af 8000 	nop.w
 800a368:	be8838d4 	.word	0xbe8838d4
 800a36c:	bda8fae9 	.word	0xbda8fae9
 800a370:	bdb4b1c4 	.word	0xbdb4b1c4
 800a374:	3e21ee9e 	.word	0x3e21ee9e
 800a378:	809c52ad 	.word	0x809c52ad
 800a37c:	3e927e4f 	.word	0x3e927e4f
 800a380:	19cb1590 	.word	0x19cb1590
 800a384:	3efa01a0 	.word	0x3efa01a0
 800a388:	16c15177 	.word	0x16c15177
 800a38c:	3f56c16c 	.word	0x3f56c16c
 800a390:	5555554c 	.word	0x5555554c
 800a394:	3fa55555 	.word	0x3fa55555
 800a398:	3fe00000 	.word	0x3fe00000
 800a39c:	3fd33332 	.word	0x3fd33332
 800a3a0:	3ff00000 	.word	0x3ff00000
 800a3a4:	3fe90000 	.word	0x3fe90000
 800a3a8:	3fd20000 	.word	0x3fd20000

0800a3ac <__kernel_rem_pio2>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a3b4:	9308      	str	r3, [sp, #32]
 800a3b6:	9101      	str	r1, [sp, #4]
 800a3b8:	4bc0      	ldr	r3, [pc, #768]	; (800a6bc <__kernel_rem_pio2+0x310>)
 800a3ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a3bc:	f112 0f14 	cmn.w	r2, #20
 800a3c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3c4:	bfa8      	it	ge
 800a3c6:	1ed4      	subge	r4, r2, #3
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	9b08      	ldr	r3, [sp, #32]
 800a3cc:	bfb8      	it	lt
 800a3ce:	2400      	movlt	r4, #0
 800a3d0:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3d4:	9306      	str	r3, [sp, #24]
 800a3d6:	bfa4      	itt	ge
 800a3d8:	2318      	movge	r3, #24
 800a3da:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3de:	f06f 0317 	mvn.w	r3, #23
 800a3e2:	fb04 3303 	mla	r3, r4, r3, r3
 800a3e6:	eb03 0a02 	add.w	sl, r3, r2
 800a3ea:	9a06      	ldr	r2, [sp, #24]
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	1aa7      	subs	r7, r4, r2
 800a3f0:	eb03 0802 	add.w	r8, r3, r2
 800a3f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a3f6:	2500      	movs	r5, #0
 800a3f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2300      	movs	r3, #0
 800a400:	9009      	str	r0, [sp, #36]	; 0x24
 800a402:	ae20      	add	r6, sp, #128	; 0x80
 800a404:	4545      	cmp	r5, r8
 800a406:	dd19      	ble.n	800a43c <__kernel_rem_pio2+0x90>
 800a408:	9b08      	ldr	r3, [sp, #32]
 800a40a:	aa20      	add	r2, sp, #128	; 0x80
 800a40c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a410:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a414:	f1c3 0301 	rsb	r3, r3, #1
 800a418:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a41c:	9307      	str	r3, [sp, #28]
 800a41e:	9b07      	ldr	r3, [sp, #28]
 800a420:	9a04      	ldr	r2, [sp, #16]
 800a422:	4443      	add	r3, r8
 800a424:	429a      	cmp	r2, r3
 800a426:	db35      	blt.n	800a494 <__kernel_rem_pio2+0xe8>
 800a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	f1a3 0908 	sub.w	r9, r3, #8
 800a430:	2300      	movs	r3, #0
 800a432:	462f      	mov	r7, r5
 800a434:	2600      	movs	r6, #0
 800a436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a43a:	e01f      	b.n	800a47c <__kernel_rem_pio2+0xd0>
 800a43c:	42ef      	cmn	r7, r5
 800a43e:	d40b      	bmi.n	800a458 <__kernel_rem_pio2+0xac>
 800a440:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a448:	f7f5 ffdc 	bl	8000404 <__aeabi_i2d>
 800a44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a450:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a454:	3501      	adds	r5, #1
 800a456:	e7d5      	b.n	800a404 <__kernel_rem_pio2+0x58>
 800a458:	4610      	mov	r0, r2
 800a45a:	4619      	mov	r1, r3
 800a45c:	e7f8      	b.n	800a450 <__kernel_rem_pio2+0xa4>
 800a45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a462:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a466:	f7f6 f837 	bl	80004d8 <__aeabi_dmul>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a472:	f7f5 fe7b 	bl	800016c <__adddf3>
 800a476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a47a:	3601      	adds	r6, #1
 800a47c:	9b06      	ldr	r3, [sp, #24]
 800a47e:	3f08      	subs	r7, #8
 800a480:	429e      	cmp	r6, r3
 800a482:	ddec      	ble.n	800a45e <__kernel_rem_pio2+0xb2>
 800a484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a488:	3508      	adds	r5, #8
 800a48a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a48e:	f108 0801 	add.w	r8, r8, #1
 800a492:	e7c4      	b.n	800a41e <__kernel_rem_pio2+0x72>
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	aa0c      	add	r2, sp, #48	; 0x30
 800a498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a49c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a49e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a4a0:	9f04      	ldr	r7, [sp, #16]
 800a4a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a8:	463e      	mov	r6, r7
 800a4aa:	ab98      	add	r3, sp, #608	; 0x260
 800a4ac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a4b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4b4:	f8cd b008 	str.w	fp, [sp, #8]
 800a4b8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800a4bc:	2e00      	cmp	r6, #0
 800a4be:	dc71      	bgt.n	800a5a4 <__kernel_rem_pio2+0x1f8>
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	f001 fa5b 	bl	800b980 <scalbn>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	f7f6 f800 	bl	80004d8 <__aeabi_dmul>
 800a4d8:	f001 f9d2 	bl	800b880 <floor>
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4b78      	ldr	r3, [pc, #480]	; (800a6c0 <__kernel_rem_pio2+0x314>)
 800a4e0:	f7f5 fffa 	bl	80004d8 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f5 fe3c 	bl	8000168 <__aeabi_dsub>
 800a4f0:	460d      	mov	r5, r1
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	f7f6 faa0 	bl	8000a38 <__aeabi_d2iz>
 800a4f8:	9007      	str	r0, [sp, #28]
 800a4fa:	f7f5 ff83 	bl	8000404 <__aeabi_i2d>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4620      	mov	r0, r4
 800a504:	4629      	mov	r1, r5
 800a506:	f7f5 fe2f 	bl	8000168 <__aeabi_dsub>
 800a50a:	f1ba 0f00 	cmp.w	sl, #0
 800a50e:	4680      	mov	r8, r0
 800a510:	4689      	mov	r9, r1
 800a512:	dd70      	ble.n	800a5f6 <__kernel_rem_pio2+0x24a>
 800a514:	1e7a      	subs	r2, r7, #1
 800a516:	ab0c      	add	r3, sp, #48	; 0x30
 800a518:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a51c:	9c07      	ldr	r4, [sp, #28]
 800a51e:	f1ca 0118 	rsb	r1, sl, #24
 800a522:	fa40 f301 	asr.w	r3, r0, r1
 800a526:	441c      	add	r4, r3
 800a528:	408b      	lsls	r3, r1
 800a52a:	1ac0      	subs	r0, r0, r3
 800a52c:	ab0c      	add	r3, sp, #48	; 0x30
 800a52e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a532:	f1ca 0317 	rsb	r3, sl, #23
 800a536:	9407      	str	r4, [sp, #28]
 800a538:	fa40 f303 	asr.w	r3, r0, r3
 800a53c:	9302      	str	r3, [sp, #8]
 800a53e:	9b02      	ldr	r3, [sp, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	dd66      	ble.n	800a612 <__kernel_rem_pio2+0x266>
 800a544:	2200      	movs	r2, #0
 800a546:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a54a:	4614      	mov	r4, r2
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	3301      	adds	r3, #1
 800a550:	9307      	str	r3, [sp, #28]
 800a552:	4297      	cmp	r7, r2
 800a554:	f300 809f 	bgt.w	800a696 <__kernel_rem_pio2+0x2ea>
 800a558:	f1ba 0f00 	cmp.w	sl, #0
 800a55c:	dd07      	ble.n	800a56e <__kernel_rem_pio2+0x1c2>
 800a55e:	f1ba 0f01 	cmp.w	sl, #1
 800a562:	f000 80b9 	beq.w	800a6d8 <__kernel_rem_pio2+0x32c>
 800a566:	f1ba 0f02 	cmp.w	sl, #2
 800a56a:	f000 80bf 	beq.w	800a6ec <__kernel_rem_pio2+0x340>
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d14e      	bne.n	800a612 <__kernel_rem_pio2+0x266>
 800a574:	4642      	mov	r2, r8
 800a576:	464b      	mov	r3, r9
 800a578:	2000      	movs	r0, #0
 800a57a:	4952      	ldr	r1, [pc, #328]	; (800a6c4 <__kernel_rem_pio2+0x318>)
 800a57c:	f7f5 fdf4 	bl	8000168 <__aeabi_dsub>
 800a580:	4680      	mov	r8, r0
 800a582:	4689      	mov	r9, r1
 800a584:	2c00      	cmp	r4, #0
 800a586:	d044      	beq.n	800a612 <__kernel_rem_pio2+0x266>
 800a588:	4652      	mov	r2, sl
 800a58a:	2000      	movs	r0, #0
 800a58c:	494d      	ldr	r1, [pc, #308]	; (800a6c4 <__kernel_rem_pio2+0x318>)
 800a58e:	f001 f9f7 	bl	800b980 <scalbn>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f5 fde5 	bl	8000168 <__aeabi_dsub>
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4689      	mov	r9, r1
 800a5a2:	e036      	b.n	800a612 <__kernel_rem_pio2+0x266>
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4b48      	ldr	r3, [pc, #288]	; (800a6c8 <__kernel_rem_pio2+0x31c>)
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7f5 ff94 	bl	80004d8 <__aeabi_dmul>
 800a5b0:	f7f6 fa42 	bl	8000a38 <__aeabi_d2iz>
 800a5b4:	f7f5 ff26 	bl	8000404 <__aeabi_i2d>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4b44      	ldr	r3, [pc, #272]	; (800a6cc <__kernel_rem_pio2+0x320>)
 800a5bc:	4680      	mov	r8, r0
 800a5be:	4689      	mov	r9, r1
 800a5c0:	f7f5 ff8a 	bl	80004d8 <__aeabi_dmul>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f5 fdcc 	bl	8000168 <__aeabi_dsub>
 800a5d0:	f7f6 fa32 	bl	8000a38 <__aeabi_d2iz>
 800a5d4:	9b02      	ldr	r3, [sp, #8]
 800a5d6:	3e01      	subs	r6, #1
 800a5d8:	f843 0b04 	str.w	r0, [r3], #4
 800a5dc:	9302      	str	r3, [sp, #8]
 800a5de:	ab70      	add	r3, sp, #448	; 0x1c0
 800a5e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	f7f5 fdbe 	bl	800016c <__adddf3>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	460d      	mov	r5, r1
 800a5f4:	e762      	b.n	800a4bc <__kernel_rem_pio2+0x110>
 800a5f6:	d105      	bne.n	800a604 <__kernel_rem_pio2+0x258>
 800a5f8:	1e7b      	subs	r3, r7, #1
 800a5fa:	aa0c      	add	r2, sp, #48	; 0x30
 800a5fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a600:	15c3      	asrs	r3, r0, #23
 800a602:	e79b      	b.n	800a53c <__kernel_rem_pio2+0x190>
 800a604:	2200      	movs	r2, #0
 800a606:	4b32      	ldr	r3, [pc, #200]	; (800a6d0 <__kernel_rem_pio2+0x324>)
 800a608:	f7f6 f9ec 	bl	80009e4 <__aeabi_dcmpge>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d13f      	bne.n	800a690 <__kernel_rem_pio2+0x2e4>
 800a610:	9002      	str	r0, [sp, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	2300      	movs	r3, #0
 800a616:	4640      	mov	r0, r8
 800a618:	4649      	mov	r1, r9
 800a61a:	f7f6 f9c5 	bl	80009a8 <__aeabi_dcmpeq>
 800a61e:	2800      	cmp	r0, #0
 800a620:	f000 80b5 	beq.w	800a78e <__kernel_rem_pio2+0x3e2>
 800a624:	1e7c      	subs	r4, r7, #1
 800a626:	4623      	mov	r3, r4
 800a628:	2200      	movs	r2, #0
 800a62a:	9904      	ldr	r1, [sp, #16]
 800a62c:	428b      	cmp	r3, r1
 800a62e:	da64      	bge.n	800a6fa <__kernel_rem_pio2+0x34e>
 800a630:	2a00      	cmp	r2, #0
 800a632:	d078      	beq.n	800a726 <__kernel_rem_pio2+0x37a>
 800a634:	ab0c      	add	r3, sp, #48	; 0x30
 800a636:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a63a:	f1aa 0a18 	sub.w	sl, sl, #24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 80a3 	beq.w	800a78a <__kernel_rem_pio2+0x3de>
 800a644:	4652      	mov	r2, sl
 800a646:	2000      	movs	r0, #0
 800a648:	491e      	ldr	r1, [pc, #120]	; (800a6c4 <__kernel_rem_pio2+0x318>)
 800a64a:	f001 f999 	bl	800b980 <scalbn>
 800a64e:	46a2      	mov	sl, r4
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	f04f 0800 	mov.w	r8, #0
 800a658:	00e3      	lsls	r3, r4, #3
 800a65a:	9306      	str	r3, [sp, #24]
 800a65c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a6c8 <__kernel_rem_pio2+0x31c>
 800a660:	ab70      	add	r3, sp, #448	; 0x1c0
 800a662:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800a666:	f1ba 0f00 	cmp.w	sl, #0
 800a66a:	f280 80c6 	bge.w	800a7fa <__kernel_rem_pio2+0x44e>
 800a66e:	4627      	mov	r7, r4
 800a670:	f04f 0800 	mov.w	r8, #0
 800a674:	2f00      	cmp	r7, #0
 800a676:	f2c0 80f3 	blt.w	800a860 <__kernel_rem_pio2+0x4b4>
 800a67a:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <__kernel_rem_pio2+0x328>)
 800a67c:	f04f 0a00 	mov.w	sl, #0
 800a680:	461d      	mov	r5, r3
 800a682:	ab70      	add	r3, sp, #448	; 0x1c0
 800a684:	f04f 0b00 	mov.w	fp, #0
 800a688:	2600      	movs	r6, #0
 800a68a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a68e:	e0d9      	b.n	800a844 <__kernel_rem_pio2+0x498>
 800a690:	2302      	movs	r3, #2
 800a692:	9302      	str	r3, [sp, #8]
 800a694:	e756      	b.n	800a544 <__kernel_rem_pio2+0x198>
 800a696:	f8db 3000 	ldr.w	r3, [fp]
 800a69a:	b954      	cbnz	r4, 800a6b2 <__kernel_rem_pio2+0x306>
 800a69c:	b123      	cbz	r3, 800a6a8 <__kernel_rem_pio2+0x2fc>
 800a69e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a6a2:	f8cb 3000 	str.w	r3, [fp]
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	461c      	mov	r4, r3
 800a6aa:	3201      	adds	r2, #1
 800a6ac:	f10b 0b04 	add.w	fp, fp, #4
 800a6b0:	e74f      	b.n	800a552 <__kernel_rem_pio2+0x1a6>
 800a6b2:	1acb      	subs	r3, r1, r3
 800a6b4:	f8cb 3000 	str.w	r3, [fp]
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	e7f5      	b.n	800a6a8 <__kernel_rem_pio2+0x2fc>
 800a6bc:	0800c8f8 	.word	0x0800c8f8
 800a6c0:	40200000 	.word	0x40200000
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	3e700000 	.word	0x3e700000
 800a6cc:	41700000 	.word	0x41700000
 800a6d0:	3fe00000 	.word	0x3fe00000
 800a6d4:	0800c8b8 	.word	0x0800c8b8
 800a6d8:	1e7a      	subs	r2, r7, #1
 800a6da:	ab0c      	add	r3, sp, #48	; 0x30
 800a6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6e4:	a90c      	add	r1, sp, #48	; 0x30
 800a6e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6ea:	e740      	b.n	800a56e <__kernel_rem_pio2+0x1c2>
 800a6ec:	1e7a      	subs	r2, r7, #1
 800a6ee:	ab0c      	add	r3, sp, #48	; 0x30
 800a6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a6f8:	e7f4      	b.n	800a6e4 <__kernel_rem_pio2+0x338>
 800a6fa:	a90c      	add	r1, sp, #48	; 0x30
 800a6fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a700:	3b01      	subs	r3, #1
 800a702:	430a      	orrs	r2, r1
 800a704:	e791      	b.n	800a62a <__kernel_rem_pio2+0x27e>
 800a706:	3401      	adds	r4, #1
 800a708:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d0fa      	beq.n	800a706 <__kernel_rem_pio2+0x35a>
 800a710:	9b08      	ldr	r3, [sp, #32]
 800a712:	1c7e      	adds	r6, r7, #1
 800a714:	18fd      	adds	r5, r7, r3
 800a716:	ab20      	add	r3, sp, #128	; 0x80
 800a718:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a71c:	443c      	add	r4, r7
 800a71e:	42b4      	cmp	r4, r6
 800a720:	da04      	bge.n	800a72c <__kernel_rem_pio2+0x380>
 800a722:	4627      	mov	r7, r4
 800a724:	e6c0      	b.n	800a4a8 <__kernel_rem_pio2+0xfc>
 800a726:	2401      	movs	r4, #1
 800a728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72a:	e7ed      	b.n	800a708 <__kernel_rem_pio2+0x35c>
 800a72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72e:	462f      	mov	r7, r5
 800a730:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a734:	f7f5 fe66 	bl	8000404 <__aeabi_i2d>
 800a738:	f04f 0b00 	mov.w	fp, #0
 800a73c:	f04f 0800 	mov.w	r8, #0
 800a740:	f04f 0900 	mov.w	r9, #0
 800a744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a746:	e8e7 0102 	strd	r0, r1, [r7], #8
 800a74a:	3b08      	subs	r3, #8
 800a74c:	9302      	str	r3, [sp, #8]
 800a74e:	9b06      	ldr	r3, [sp, #24]
 800a750:	459b      	cmp	fp, r3
 800a752:	dd07      	ble.n	800a764 <__kernel_rem_pio2+0x3b8>
 800a754:	ab70      	add	r3, sp, #448	; 0x1c0
 800a756:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a75a:	463d      	mov	r5, r7
 800a75c:	e9c3 8900 	strd	r8, r9, [r3]
 800a760:	3601      	adds	r6, #1
 800a762:	e7dc      	b.n	800a71e <__kernel_rem_pio2+0x372>
 800a764:	9902      	ldr	r1, [sp, #8]
 800a766:	f10b 0b01 	add.w	fp, fp, #1
 800a76a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a76e:	9102      	str	r1, [sp, #8]
 800a770:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800a774:	f7f5 feb0 	bl	80004d8 <__aeabi_dmul>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4640      	mov	r0, r8
 800a77e:	4649      	mov	r1, r9
 800a780:	f7f5 fcf4 	bl	800016c <__adddf3>
 800a784:	4680      	mov	r8, r0
 800a786:	4689      	mov	r9, r1
 800a788:	e7e1      	b.n	800a74e <__kernel_rem_pio2+0x3a2>
 800a78a:	3c01      	subs	r4, #1
 800a78c:	e752      	b.n	800a634 <__kernel_rem_pio2+0x288>
 800a78e:	f1ca 0200 	rsb	r2, sl, #0
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f001 f8f3 	bl	800b980 <scalbn>
 800a79a:	2200      	movs	r2, #0
 800a79c:	4ba5      	ldr	r3, [pc, #660]	; (800aa34 <__kernel_rem_pio2+0x688>)
 800a79e:	4604      	mov	r4, r0
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	f7f6 f91f 	bl	80009e4 <__aeabi_dcmpge>
 800a7a6:	b1f8      	cbz	r0, 800a7e8 <__kernel_rem_pio2+0x43c>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	4ba3      	ldr	r3, [pc, #652]	; (800aa38 <__kernel_rem_pio2+0x68c>)
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	f7f5 fe92 	bl	80004d8 <__aeabi_dmul>
 800a7b4:	f7f6 f940 	bl	8000a38 <__aeabi_d2iz>
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	f7f5 fe23 	bl	8000404 <__aeabi_i2d>
 800a7be:	2200      	movs	r2, #0
 800a7c0:	4b9c      	ldr	r3, [pc, #624]	; (800aa34 <__kernel_rem_pio2+0x688>)
 800a7c2:	f7f5 fe89 	bl	80004d8 <__aeabi_dmul>
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f7f5 fccb 	bl	8000168 <__aeabi_dsub>
 800a7d2:	f7f6 f931 	bl	8000a38 <__aeabi_d2iz>
 800a7d6:	1c7c      	adds	r4, r7, #1
 800a7d8:	ab0c      	add	r3, sp, #48	; 0x30
 800a7da:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a7de:	f10a 0a18 	add.w	sl, sl, #24
 800a7e2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a7e6:	e72d      	b.n	800a644 <__kernel_rem_pio2+0x298>
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f7f6 f924 	bl	8000a38 <__aeabi_d2iz>
 800a7f0:	ab0c      	add	r3, sp, #48	; 0x30
 800a7f2:	463c      	mov	r4, r7
 800a7f4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a7f8:	e724      	b.n	800a644 <__kernel_rem_pio2+0x298>
 800a7fa:	ab0c      	add	r3, sp, #48	; 0x30
 800a7fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a800:	f7f5 fe00 	bl	8000404 <__aeabi_i2d>
 800a804:	4632      	mov	r2, r6
 800a806:	463b      	mov	r3, r7
 800a808:	f7f5 fe66 	bl	80004d8 <__aeabi_dmul>
 800a80c:	4642      	mov	r2, r8
 800a80e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800a812:	464b      	mov	r3, r9
 800a814:	4630      	mov	r0, r6
 800a816:	4639      	mov	r1, r7
 800a818:	f7f5 fe5e 	bl	80004d8 <__aeabi_dmul>
 800a81c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a820:	4606      	mov	r6, r0
 800a822:	460f      	mov	r7, r1
 800a824:	e71f      	b.n	800a666 <__kernel_rem_pio2+0x2ba>
 800a826:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a82a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a82e:	f7f5 fe53 	bl	80004d8 <__aeabi_dmul>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4650      	mov	r0, sl
 800a838:	4659      	mov	r1, fp
 800a83a:	f7f5 fc97 	bl	800016c <__adddf3>
 800a83e:	4682      	mov	sl, r0
 800a840:	468b      	mov	fp, r1
 800a842:	3601      	adds	r6, #1
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	429e      	cmp	r6, r3
 800a848:	dc01      	bgt.n	800a84e <__kernel_rem_pio2+0x4a2>
 800a84a:	45b0      	cmp	r8, r6
 800a84c:	daeb      	bge.n	800a826 <__kernel_rem_pio2+0x47a>
 800a84e:	ab48      	add	r3, sp, #288	; 0x120
 800a850:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a854:	e9c3 ab00 	strd	sl, fp, [r3]
 800a858:	3f01      	subs	r7, #1
 800a85a:	f108 0801 	add.w	r8, r8, #1
 800a85e:	e709      	b.n	800a674 <__kernel_rem_pio2+0x2c8>
 800a860:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a862:	2b02      	cmp	r3, #2
 800a864:	dc09      	bgt.n	800a87a <__kernel_rem_pio2+0x4ce>
 800a866:	2b00      	cmp	r3, #0
 800a868:	dc34      	bgt.n	800a8d4 <__kernel_rem_pio2+0x528>
 800a86a:	d05e      	beq.n	800a92a <__kernel_rem_pio2+0x57e>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	f003 0007 	and.w	r0, r3, #7
 800a872:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d1f5      	bne.n	800a86c <__kernel_rem_pio2+0x4c0>
 800a880:	9a06      	ldr	r2, [sp, #24]
 800a882:	ab48      	add	r3, sp, #288	; 0x120
 800a884:	441a      	add	r2, r3
 800a886:	4615      	mov	r5, r2
 800a888:	4692      	mov	sl, r2
 800a88a:	46a3      	mov	fp, r4
 800a88c:	f1bb 0f00 	cmp.w	fp, #0
 800a890:	dc7a      	bgt.n	800a988 <__kernel_rem_pio2+0x5dc>
 800a892:	46aa      	mov	sl, r5
 800a894:	46a3      	mov	fp, r4
 800a896:	f1bb 0f01 	cmp.w	fp, #1
 800a89a:	f300 8094 	bgt.w	800a9c6 <__kernel_rem_pio2+0x61a>
 800a89e:	2700      	movs	r7, #0
 800a8a0:	463e      	mov	r6, r7
 800a8a2:	2c01      	cmp	r4, #1
 800a8a4:	f300 80ae 	bgt.w	800aa04 <__kernel_rem_pio2+0x658>
 800a8a8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800a8ac:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800a8b0:	9b02      	ldr	r3, [sp, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 80b0 	bne.w	800aa18 <__kernel_rem_pio2+0x66c>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	9801      	ldr	r0, [sp, #4]
 800a8be:	e9c0 2300 	strd	r2, r3, [r0]
 800a8c2:	4622      	mov	r2, r4
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	4633      	mov	r3, r6
 800a8ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a8d2:	e7cb      	b.n	800a86c <__kernel_rem_pio2+0x4c0>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	9a06      	ldr	r2, [sp, #24]
 800a8d8:	ab48      	add	r3, sp, #288	; 0x120
 800a8da:	441a      	add	r2, r3
 800a8dc:	4615      	mov	r5, r2
 800a8de:	46a0      	mov	r8, r4
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	f1b8 0f00 	cmp.w	r8, #0
 800a8e6:	da3c      	bge.n	800a962 <__kernel_rem_pio2+0x5b6>
 800a8e8:	9b02      	ldr	r3, [sp, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d040      	beq.n	800a970 <__kernel_rem_pio2+0x5c4>
 800a8ee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	9d01      	ldr	r5, [sp, #4]
 800a8f8:	2601      	movs	r6, #1
 800a8fa:	e9c5 2300 	strd	r2, r3, [r5]
 800a8fe:	460b      	mov	r3, r1
 800a900:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a904:	f7f5 fc30 	bl	8000168 <__aeabi_dsub>
 800a908:	4684      	mov	ip, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	ad48      	add	r5, sp, #288	; 0x120
 800a90e:	42b4      	cmp	r4, r6
 800a910:	f105 0508 	add.w	r5, r5, #8
 800a914:	da2e      	bge.n	800a974 <__kernel_rem_pio2+0x5c8>
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	b10b      	cbz	r3, 800a91e <__kernel_rem_pio2+0x572>
 800a91a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a91e:	4662      	mov	r2, ip
 800a920:	463b      	mov	r3, r7
 800a922:	9901      	ldr	r1, [sp, #4]
 800a924:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a928:	e7a0      	b.n	800a86c <__kernel_rem_pio2+0x4c0>
 800a92a:	9a06      	ldr	r2, [sp, #24]
 800a92c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800a92e:	ab48      	add	r3, sp, #288	; 0x120
 800a930:	441a      	add	r2, r3
 800a932:	4615      	mov	r5, r2
 800a934:	4637      	mov	r7, r6
 800a936:	2c00      	cmp	r4, #0
 800a938:	da09      	bge.n	800a94e <__kernel_rem_pio2+0x5a2>
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	b10b      	cbz	r3, 800a942 <__kernel_rem_pio2+0x596>
 800a93e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a942:	4632      	mov	r2, r6
 800a944:	463b      	mov	r3, r7
 800a946:	9901      	ldr	r1, [sp, #4]
 800a948:	e9c1 2300 	strd	r2, r3, [r1]
 800a94c:	e78e      	b.n	800a86c <__kernel_rem_pio2+0x4c0>
 800a94e:	4630      	mov	r0, r6
 800a950:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 fc09 	bl	800016c <__adddf3>
 800a95a:	3c01      	subs	r4, #1
 800a95c:	4606      	mov	r6, r0
 800a95e:	460f      	mov	r7, r1
 800a960:	e7e9      	b.n	800a936 <__kernel_rem_pio2+0x58a>
 800a962:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a966:	f7f5 fc01 	bl	800016c <__adddf3>
 800a96a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a96e:	e7b8      	b.n	800a8e2 <__kernel_rem_pio2+0x536>
 800a970:	460d      	mov	r5, r1
 800a972:	e7be      	b.n	800a8f2 <__kernel_rem_pio2+0x546>
 800a974:	4660      	mov	r0, ip
 800a976:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a97a:	4639      	mov	r1, r7
 800a97c:	f7f5 fbf6 	bl	800016c <__adddf3>
 800a980:	3601      	adds	r6, #1
 800a982:	4684      	mov	ip, r0
 800a984:	460f      	mov	r7, r1
 800a986:	e7c2      	b.n	800a90e <__kernel_rem_pio2+0x562>
 800a988:	e9da 6700 	ldrd	r6, r7, [sl]
 800a98c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	4640      	mov	r0, r8
 800a996:	4649      	mov	r1, r9
 800a998:	f7f5 fbe8 	bl	800016c <__adddf3>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	f7f5 fbde 	bl	8000168 <__aeabi_dsub>
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	f7f5 fbdc 	bl	800016c <__adddf3>
 800a9b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9b8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a9bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9c0:	e9ca 2300 	strd	r2, r3, [sl]
 800a9c4:	e762      	b.n	800a88c <__kernel_rem_pio2+0x4e0>
 800a9c6:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9ca:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	f7f5 fbc9 	bl	800016c <__adddf3>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	f7f5 fbbf 	bl	8000168 <__aeabi_dsub>
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	f7f5 fbbd 	bl	800016c <__adddf3>
 800a9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9f6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a9fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9fe:	e9ca 2300 	strd	r2, r3, [sl]
 800aa02:	e748      	b.n	800a896 <__kernel_rem_pio2+0x4ea>
 800aa04:	4638      	mov	r0, r7
 800aa06:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	f7f5 fbae 	bl	800016c <__adddf3>
 800aa10:	3c01      	subs	r4, #1
 800aa12:	4607      	mov	r7, r0
 800aa14:	460e      	mov	r6, r1
 800aa16:	e744      	b.n	800a8a2 <__kernel_rem_pio2+0x4f6>
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aa1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800aa22:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800aa26:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800aa2a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800aa2e:	601d      	str	r5, [r3, #0]
 800aa30:	615e      	str	r6, [r3, #20]
 800aa32:	e71b      	b.n	800a86c <__kernel_rem_pio2+0x4c0>
 800aa34:	41700000 	.word	0x41700000
 800aa38:	3e700000 	.word	0x3e700000
 800aa3c:	00000000 	.word	0x00000000

0800aa40 <__kernel_sin>:
 800aa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa44:	b086      	sub	sp, #24
 800aa46:	e9cd 2300 	strd	r2, r3, [sp]
 800aa4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa52:	4682      	mov	sl, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aa58:	da03      	bge.n	800aa62 <__kernel_sin+0x22>
 800aa5a:	f7f5 ffed 	bl	8000a38 <__aeabi_d2iz>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d050      	beq.n	800ab04 <__kernel_sin+0xc4>
 800aa62:	4652      	mov	r2, sl
 800aa64:	4623      	mov	r3, r4
 800aa66:	4650      	mov	r0, sl
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f7f5 fd35 	bl	80004d8 <__aeabi_dmul>
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4650      	mov	r0, sl
 800aa78:	4621      	mov	r1, r4
 800aa7a:	f7f5 fd2d 	bl	80004d8 <__aeabi_dmul>
 800aa7e:	a33e      	add	r3, pc, #248	; (adr r3, 800ab78 <__kernel_sin+0x138>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f5 fd24 	bl	80004d8 <__aeabi_dmul>
 800aa90:	a33b      	add	r3, pc, #236	; (adr r3, 800ab80 <__kernel_sin+0x140>)
 800aa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa96:	f7f5 fb67 	bl	8000168 <__aeabi_dsub>
 800aa9a:	4632      	mov	r2, r6
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	f7f5 fd1b 	bl	80004d8 <__aeabi_dmul>
 800aaa2:	a339      	add	r3, pc, #228	; (adr r3, 800ab88 <__kernel_sin+0x148>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 fb60 	bl	800016c <__adddf3>
 800aaac:	4632      	mov	r2, r6
 800aaae:	463b      	mov	r3, r7
 800aab0:	f7f5 fd12 	bl	80004d8 <__aeabi_dmul>
 800aab4:	a336      	add	r3, pc, #216	; (adr r3, 800ab90 <__kernel_sin+0x150>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fb55 	bl	8000168 <__aeabi_dsub>
 800aabe:	4632      	mov	r2, r6
 800aac0:	463b      	mov	r3, r7
 800aac2:	f7f5 fd09 	bl	80004d8 <__aeabi_dmul>
 800aac6:	a334      	add	r3, pc, #208	; (adr r3, 800ab98 <__kernel_sin+0x158>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f7f5 fb4e 	bl	800016c <__adddf3>
 800aad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad4:	b9dd      	cbnz	r5, 800ab0e <__kernel_sin+0xce>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f7f5 fcfb 	bl	80004d8 <__aeabi_dmul>
 800aae2:	a32f      	add	r3, pc, #188	; (adr r3, 800aba0 <__kernel_sin+0x160>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fb3e 	bl	8000168 <__aeabi_dsub>
 800aaec:	4642      	mov	r2, r8
 800aaee:	464b      	mov	r3, r9
 800aaf0:	f7f5 fcf2 	bl	80004d8 <__aeabi_dmul>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4650      	mov	r0, sl
 800aafa:	4621      	mov	r1, r4
 800aafc:	f7f5 fb36 	bl	800016c <__adddf3>
 800ab00:	4682      	mov	sl, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	4650      	mov	r0, sl
 800ab06:	4621      	mov	r1, r4
 800ab08:	b006      	add	sp, #24
 800ab0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0e:	2200      	movs	r2, #0
 800ab10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab14:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <__kernel_sin+0x168>)
 800ab16:	f7f5 fcdf 	bl	80004d8 <__aeabi_dmul>
 800ab1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab22:	4640      	mov	r0, r8
 800ab24:	4649      	mov	r1, r9
 800ab26:	f7f5 fcd7 	bl	80004d8 <__aeabi_dmul>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab32:	f7f5 fb19 	bl	8000168 <__aeabi_dsub>
 800ab36:	4632      	mov	r2, r6
 800ab38:	463b      	mov	r3, r7
 800ab3a:	f7f5 fccd 	bl	80004d8 <__aeabi_dmul>
 800ab3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab42:	f7f5 fb11 	bl	8000168 <__aeabi_dsub>
 800ab46:	a316      	add	r3, pc, #88	; (adr r3, 800aba0 <__kernel_sin+0x160>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fcc0 	bl	80004d8 <__aeabi_dmul>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 fb04 	bl	800016c <__adddf3>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4650      	mov	r0, sl
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	f7f5 fafc 	bl	8000168 <__aeabi_dsub>
 800ab70:	e7c6      	b.n	800ab00 <__kernel_sin+0xc0>
 800ab72:	bf00      	nop
 800ab74:	f3af 8000 	nop.w
 800ab78:	5acfd57c 	.word	0x5acfd57c
 800ab7c:	3de5d93a 	.word	0x3de5d93a
 800ab80:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab84:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab88:	57b1fe7d 	.word	0x57b1fe7d
 800ab8c:	3ec71de3 	.word	0x3ec71de3
 800ab90:	19c161d5 	.word	0x19c161d5
 800ab94:	3f2a01a0 	.word	0x3f2a01a0
 800ab98:	1110f8a6 	.word	0x1110f8a6
 800ab9c:	3f811111 	.word	0x3f811111
 800aba0:	55555549 	.word	0x55555549
 800aba4:	3fc55555 	.word	0x3fc55555
 800aba8:	3fe00000 	.word	0x3fe00000

0800abac <__kernel_cosf>:
 800abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800abb4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800abb8:	4606      	mov	r6, r0
 800abba:	4688      	mov	r8, r1
 800abbc:	da03      	bge.n	800abc6 <__kernel_cosf+0x1a>
 800abbe:	f7f6 fa9d 	bl	80010fc <__aeabi_f2iz>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d05c      	beq.n	800ac80 <__kernel_cosf+0xd4>
 800abc6:	4631      	mov	r1, r6
 800abc8:	4630      	mov	r0, r6
 800abca:	f7f6 f8bb 	bl	8000d44 <__aeabi_fmul>
 800abce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800abd2:	4605      	mov	r5, r0
 800abd4:	f7f6 f8b6 	bl	8000d44 <__aeabi_fmul>
 800abd8:	492b      	ldr	r1, [pc, #172]	; (800ac88 <__kernel_cosf+0xdc>)
 800abda:	4607      	mov	r7, r0
 800abdc:	4628      	mov	r0, r5
 800abde:	f7f6 f8b1 	bl	8000d44 <__aeabi_fmul>
 800abe2:	492a      	ldr	r1, [pc, #168]	; (800ac8c <__kernel_cosf+0xe0>)
 800abe4:	f7f5 ffa6 	bl	8000b34 <__addsf3>
 800abe8:	4629      	mov	r1, r5
 800abea:	f7f6 f8ab 	bl	8000d44 <__aeabi_fmul>
 800abee:	4928      	ldr	r1, [pc, #160]	; (800ac90 <__kernel_cosf+0xe4>)
 800abf0:	f7f5 ff9e 	bl	8000b30 <__aeabi_fsub>
 800abf4:	4629      	mov	r1, r5
 800abf6:	f7f6 f8a5 	bl	8000d44 <__aeabi_fmul>
 800abfa:	4926      	ldr	r1, [pc, #152]	; (800ac94 <__kernel_cosf+0xe8>)
 800abfc:	f7f5 ff9a 	bl	8000b34 <__addsf3>
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f6 f89f 	bl	8000d44 <__aeabi_fmul>
 800ac06:	4924      	ldr	r1, [pc, #144]	; (800ac98 <__kernel_cosf+0xec>)
 800ac08:	f7f5 ff92 	bl	8000b30 <__aeabi_fsub>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f6 f899 	bl	8000d44 <__aeabi_fmul>
 800ac12:	4922      	ldr	r1, [pc, #136]	; (800ac9c <__kernel_cosf+0xf0>)
 800ac14:	f7f5 ff8e 	bl	8000b34 <__addsf3>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7f6 f893 	bl	8000d44 <__aeabi_fmul>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f6 f890 	bl	8000d44 <__aeabi_fmul>
 800ac24:	4641      	mov	r1, r8
 800ac26:	4605      	mov	r5, r0
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7f6 f88b 	bl	8000d44 <__aeabi_fmul>
 800ac2e:	4601      	mov	r1, r0
 800ac30:	4628      	mov	r0, r5
 800ac32:	f7f5 ff7d 	bl	8000b30 <__aeabi_fsub>
 800ac36:	4b1a      	ldr	r3, [pc, #104]	; (800aca0 <__kernel_cosf+0xf4>)
 800ac38:	4605      	mov	r5, r0
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	dc0a      	bgt.n	800ac54 <__kernel_cosf+0xa8>
 800ac3e:	4601      	mov	r1, r0
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7f5 ff75 	bl	8000b30 <__aeabi_fsub>
 800ac46:	4601      	mov	r1, r0
 800ac48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ac4c:	f7f5 ff70 	bl	8000b30 <__aeabi_fsub>
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <__kernel_cosf+0xf8>)
 800ac56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ac5a:	429c      	cmp	r4, r3
 800ac5c:	bfcc      	ite	gt
 800ac5e:	4c12      	ldrgt	r4, [pc, #72]	; (800aca8 <__kernel_cosf+0xfc>)
 800ac60:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ac64:	4621      	mov	r1, r4
 800ac66:	f7f5 ff63 	bl	8000b30 <__aeabi_fsub>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	4638      	mov	r0, r7
 800ac70:	f7f5 ff5e 	bl	8000b30 <__aeabi_fsub>
 800ac74:	4629      	mov	r1, r5
 800ac76:	f7f5 ff5b 	bl	8000b30 <__aeabi_fsub>
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	e7e5      	b.n	800ac4c <__kernel_cosf+0xa0>
 800ac80:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ac84:	e7e4      	b.n	800ac50 <__kernel_cosf+0xa4>
 800ac86:	bf00      	nop
 800ac88:	ad47d74e 	.word	0xad47d74e
 800ac8c:	310f74f6 	.word	0x310f74f6
 800ac90:	3493f27c 	.word	0x3493f27c
 800ac94:	37d00d01 	.word	0x37d00d01
 800ac98:	3ab60b61 	.word	0x3ab60b61
 800ac9c:	3d2aaaab 	.word	0x3d2aaaab
 800aca0:	3e999999 	.word	0x3e999999
 800aca4:	3f480000 	.word	0x3f480000
 800aca8:	3e900000 	.word	0x3e900000

0800acac <__kernel_rem_pio2f>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	b0db      	sub	sp, #364	; 0x16c
 800acb2:	9202      	str	r2, [sp, #8]
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800acb8:	4bc5      	ldr	r3, [pc, #788]	; (800afd0 <__kernel_rem_pio2f+0x324>)
 800acba:	9005      	str	r0, [sp, #20]
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	9100      	str	r1, [sp, #0]
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	9b04      	ldr	r3, [sp, #16]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	9303      	str	r3, [sp, #12]
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	f2c0 809b 	blt.w	800ae08 <__kernel_rem_pio2f+0x15c>
 800acd2:	1edc      	subs	r4, r3, #3
 800acd4:	bf48      	it	mi
 800acd6:	1d1c      	addmi	r4, r3, #4
 800acd8:	10e4      	asrs	r4, r4, #3
 800acda:	2500      	movs	r5, #0
 800acdc:	f04f 0a00 	mov.w	sl, #0
 800ace0:	1c67      	adds	r7, r4, #1
 800ace2:	00fb      	lsls	r3, r7, #3
 800ace4:	9306      	str	r3, [sp, #24]
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	9a03      	ldr	r2, [sp, #12]
 800acea:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	1aa6      	subs	r6, r4, r2
 800acf2:	eb03 0802 	add.w	r8, r3, r2
 800acf6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800acf8:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800acfc:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800ad00:	4545      	cmp	r5, r8
 800ad02:	f340 8083 	ble.w	800ae0c <__kernel_rem_pio2f+0x160>
 800ad06:	f04f 0800 	mov.w	r8, #0
 800ad0a:	f04f 0b00 	mov.w	fp, #0
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	aa1e      	add	r2, sp, #120	; 0x78
 800ad12:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ad16:	ab46      	add	r3, sp, #280	; 0x118
 800ad18:	9a01      	ldr	r2, [sp, #4]
 800ad1a:	4590      	cmp	r8, r2
 800ad1c:	f340 809c 	ble.w	800ae58 <__kernel_rem_pio2f+0x1ac>
 800ad20:	4613      	mov	r3, r2
 800ad22:	aa0a      	add	r2, sp, #40	; 0x28
 800ad24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad28:	9308      	str	r3, [sp, #32]
 800ad2a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ad2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad34:	9307      	str	r3, [sp, #28]
 800ad36:	ad0a      	add	r5, sp, #40	; 0x28
 800ad38:	462e      	mov	r6, r5
 800ad3a:	46c3      	mov	fp, r8
 800ad3c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800ad40:	ab5a      	add	r3, sp, #360	; 0x168
 800ad42:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ad46:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ad4a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800ad4e:	f1bb 0f00 	cmp.w	fp, #0
 800ad52:	f300 8086 	bgt.w	800ae62 <__kernel_rem_pio2f+0x1b6>
 800ad56:	4639      	mov	r1, r7
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fedd 	bl	800bb18 <scalbnf>
 800ad5e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800ad62:	4604      	mov	r4, r0
 800ad64:	f7f5 ffee 	bl	8000d44 <__aeabi_fmul>
 800ad68:	f000 fe90 	bl	800ba8c <floorf>
 800ad6c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ad70:	f7f5 ffe8 	bl	8000d44 <__aeabi_fmul>
 800ad74:	4601      	mov	r1, r0
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7f5 feda 	bl	8000b30 <__aeabi_fsub>
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	f7f6 f9bd 	bl	80010fc <__aeabi_f2iz>
 800ad82:	4606      	mov	r6, r0
 800ad84:	f7f5 ff8a 	bl	8000c9c <__aeabi_i2f>
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7f5 fed0 	bl	8000b30 <__aeabi_fsub>
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	4681      	mov	r9, r0
 800ad94:	f340 8084 	ble.w	800aea0 <__kernel_rem_pio2f+0x1f4>
 800ad98:	f108 32ff 	add.w	r2, r8, #4294967295
 800ad9c:	ab0a      	add	r3, sp, #40	; 0x28
 800ad9e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800ada2:	f1c7 0108 	rsb	r1, r7, #8
 800ada6:	fa44 f301 	asr.w	r3, r4, r1
 800adaa:	441e      	add	r6, r3
 800adac:	408b      	lsls	r3, r1
 800adae:	1ae4      	subs	r4, r4, r3
 800adb0:	f1c7 0007 	rsb	r0, r7, #7
 800adb4:	ab0a      	add	r3, sp, #40	; 0x28
 800adb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adba:	4104      	asrs	r4, r0
 800adbc:	2c00      	cmp	r4, #0
 800adbe:	dd7e      	ble.n	800aebe <__kernel_rem_pio2f+0x212>
 800adc0:	2200      	movs	r2, #0
 800adc2:	4692      	mov	sl, r2
 800adc4:	3601      	adds	r6, #1
 800adc6:	4590      	cmp	r8, r2
 800adc8:	f300 80b0 	bgt.w	800af2c <__kernel_rem_pio2f+0x280>
 800adcc:	2f00      	cmp	r7, #0
 800adce:	dd05      	ble.n	800addc <__kernel_rem_pio2f+0x130>
 800add0:	2f01      	cmp	r7, #1
 800add2:	f000 80bd 	beq.w	800af50 <__kernel_rem_pio2f+0x2a4>
 800add6:	2f02      	cmp	r7, #2
 800add8:	f000 80c5 	beq.w	800af66 <__kernel_rem_pio2f+0x2ba>
 800addc:	2c02      	cmp	r4, #2
 800adde:	d16e      	bne.n	800aebe <__kernel_rem_pio2f+0x212>
 800ade0:	4649      	mov	r1, r9
 800ade2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ade6:	f7f5 fea3 	bl	8000b30 <__aeabi_fsub>
 800adea:	4681      	mov	r9, r0
 800adec:	f1ba 0f00 	cmp.w	sl, #0
 800adf0:	d065      	beq.n	800aebe <__kernel_rem_pio2f+0x212>
 800adf2:	4639      	mov	r1, r7
 800adf4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800adf8:	f000 fe8e 	bl	800bb18 <scalbnf>
 800adfc:	4601      	mov	r1, r0
 800adfe:	4648      	mov	r0, r9
 800ae00:	f7f5 fe96 	bl	8000b30 <__aeabi_fsub>
 800ae04:	4681      	mov	r9, r0
 800ae06:	e05a      	b.n	800aebe <__kernel_rem_pio2f+0x212>
 800ae08:	2400      	movs	r4, #0
 800ae0a:	e766      	b.n	800acda <__kernel_rem_pio2f+0x2e>
 800ae0c:	42ee      	cmn	r6, r5
 800ae0e:	d407      	bmi.n	800ae20 <__kernel_rem_pio2f+0x174>
 800ae10:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae14:	f7f5 ff42 	bl	8000c9c <__aeabi_i2f>
 800ae18:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800ae1c:	3501      	adds	r5, #1
 800ae1e:	e76f      	b.n	800ad00 <__kernel_rem_pio2f+0x54>
 800ae20:	4650      	mov	r0, sl
 800ae22:	e7f9      	b.n	800ae18 <__kernel_rem_pio2f+0x16c>
 800ae24:	9b05      	ldr	r3, [sp, #20]
 800ae26:	f8da 1000 	ldr.w	r1, [sl]
 800ae2a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800ae2e:	f7f5 ff89 	bl	8000d44 <__aeabi_fmul>
 800ae32:	4601      	mov	r1, r0
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7f5 fe7d 	bl	8000b34 <__addsf3>
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	f109 0901 	add.w	r9, r9, #1
 800ae40:	ab46      	add	r3, sp, #280	; 0x118
 800ae42:	9a03      	ldr	r2, [sp, #12]
 800ae44:	f1aa 0a04 	sub.w	sl, sl, #4
 800ae48:	4591      	cmp	r9, r2
 800ae4a:	ddeb      	ble.n	800ae24 <__kernel_rem_pio2f+0x178>
 800ae4c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ae50:	3504      	adds	r5, #4
 800ae52:	f108 0801 	add.w	r8, r8, #1
 800ae56:	e75f      	b.n	800ad18 <__kernel_rem_pio2f+0x6c>
 800ae58:	46aa      	mov	sl, r5
 800ae5a:	465e      	mov	r6, fp
 800ae5c:	f04f 0900 	mov.w	r9, #0
 800ae60:	e7ef      	b.n	800ae42 <__kernel_rem_pio2f+0x196>
 800ae62:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7f5 ff6c 	bl	8000d44 <__aeabi_fmul>
 800ae6c:	f7f6 f946 	bl	80010fc <__aeabi_f2iz>
 800ae70:	f7f5 ff14 	bl	8000c9c <__aeabi_i2f>
 800ae74:	4649      	mov	r1, r9
 800ae76:	9009      	str	r0, [sp, #36]	; 0x24
 800ae78:	f7f5 ff64 	bl	8000d44 <__aeabi_fmul>
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7f5 fe56 	bl	8000b30 <__aeabi_fsub>
 800ae84:	f7f6 f93a 	bl	80010fc <__aeabi_f2iz>
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae8e:	f846 0b04 	str.w	r0, [r6], #4
 800ae92:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7f5 fe4c 	bl	8000b34 <__addsf3>
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	e756      	b.n	800ad4e <__kernel_rem_pio2f+0xa2>
 800aea0:	d106      	bne.n	800aeb0 <__kernel_rem_pio2f+0x204>
 800aea2:	f108 33ff 	add.w	r3, r8, #4294967295
 800aea6:	aa0a      	add	r2, sp, #40	; 0x28
 800aea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aeac:	1224      	asrs	r4, r4, #8
 800aeae:	e785      	b.n	800adbc <__kernel_rem_pio2f+0x110>
 800aeb0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800aeb4:	f7f6 f8f8 	bl	80010a8 <__aeabi_fcmpge>
 800aeb8:	4604      	mov	r4, r0
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d134      	bne.n	800af28 <__kernel_rem_pio2f+0x27c>
 800aebe:	2100      	movs	r1, #0
 800aec0:	4648      	mov	r0, r9
 800aec2:	f7f6 f8d3 	bl	800106c <__aeabi_fcmpeq>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f000 809a 	beq.w	800b000 <__kernel_rem_pio2f+0x354>
 800aecc:	f108 35ff 	add.w	r5, r8, #4294967295
 800aed0:	462b      	mov	r3, r5
 800aed2:	2200      	movs	r2, #0
 800aed4:	9901      	ldr	r1, [sp, #4]
 800aed6:	428b      	cmp	r3, r1
 800aed8:	da4d      	bge.n	800af76 <__kernel_rem_pio2f+0x2ca>
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	d07c      	beq.n	800afd8 <__kernel_rem_pio2f+0x32c>
 800aede:	ab0a      	add	r3, sp, #40	; 0x28
 800aee0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aee4:	3f08      	subs	r7, #8
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 8088 	beq.w	800affc <__kernel_rem_pio2f+0x350>
 800aeec:	4639      	mov	r1, r7
 800aeee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aef2:	f000 fe11 	bl	800bb18 <scalbnf>
 800aef6:	46aa      	mov	sl, r5
 800aef8:	4681      	mov	r9, r0
 800aefa:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800aefe:	af46      	add	r7, sp, #280	; 0x118
 800af00:	f1ba 0f00 	cmp.w	sl, #0
 800af04:	f280 80b1 	bge.w	800b06a <__kernel_rem_pio2f+0x3be>
 800af08:	46a9      	mov	r9, r5
 800af0a:	f04f 0a00 	mov.w	sl, #0
 800af0e:	2200      	movs	r2, #0
 800af10:	f1b9 0f00 	cmp.w	r9, #0
 800af14:	f2c0 80db 	blt.w	800b0ce <__kernel_rem_pio2f+0x422>
 800af18:	a946      	add	r1, sp, #280	; 0x118
 800af1a:	4617      	mov	r7, r2
 800af1c:	f04f 0800 	mov.w	r8, #0
 800af20:	4b2c      	ldr	r3, [pc, #176]	; (800afd4 <__kernel_rem_pio2f+0x328>)
 800af22:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800af26:	e0c3      	b.n	800b0b0 <__kernel_rem_pio2f+0x404>
 800af28:	2402      	movs	r4, #2
 800af2a:	e749      	b.n	800adc0 <__kernel_rem_pio2f+0x114>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	d108      	bne.n	800af46 <__kernel_rem_pio2f+0x29a>
 800af34:	b11b      	cbz	r3, 800af3e <__kernel_rem_pio2f+0x292>
 800af36:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	2301      	movs	r3, #1
 800af3e:	469a      	mov	sl, r3
 800af40:	3201      	adds	r2, #1
 800af42:	3504      	adds	r5, #4
 800af44:	e73f      	b.n	800adc6 <__kernel_rem_pio2f+0x11a>
 800af46:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800af4a:	602b      	str	r3, [r5, #0]
 800af4c:	4653      	mov	r3, sl
 800af4e:	e7f6      	b.n	800af3e <__kernel_rem_pio2f+0x292>
 800af50:	f108 32ff 	add.w	r2, r8, #4294967295
 800af54:	ab0a      	add	r3, sp, #40	; 0x28
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5e:	a90a      	add	r1, sp, #40	; 0x28
 800af60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af64:	e73a      	b.n	800addc <__kernel_rem_pio2f+0x130>
 800af66:	f108 32ff 	add.w	r2, r8, #4294967295
 800af6a:	ab0a      	add	r3, sp, #40	; 0x28
 800af6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af74:	e7f3      	b.n	800af5e <__kernel_rem_pio2f+0x2b2>
 800af76:	a90a      	add	r1, sp, #40	; 0x28
 800af78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	430a      	orrs	r2, r1
 800af80:	e7a8      	b.n	800aed4 <__kernel_rem_pio2f+0x228>
 800af82:	3301      	adds	r3, #1
 800af84:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af88:	2900      	cmp	r1, #0
 800af8a:	d0fa      	beq.n	800af82 <__kernel_rem_pio2f+0x2d6>
 800af8c:	9a04      	ldr	r2, [sp, #16]
 800af8e:	f108 0501 	add.w	r5, r8, #1
 800af92:	eb08 0402 	add.w	r4, r8, r2
 800af96:	aa1e      	add	r2, sp, #120	; 0x78
 800af98:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800af9c:	4498      	add	r8, r3
 800af9e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800afa2:	45a8      	cmp	r8, r5
 800afa4:	f6ff aec7 	blt.w	800ad36 <__kernel_rem_pio2f+0x8a>
 800afa8:	9b07      	ldr	r3, [sp, #28]
 800afaa:	46a3      	mov	fp, r4
 800afac:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afb0:	f7f5 fe74 	bl	8000c9c <__aeabi_i2f>
 800afb4:	f04f 0a00 	mov.w	sl, #0
 800afb8:	2600      	movs	r6, #0
 800afba:	f84b 0b04 	str.w	r0, [fp], #4
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	459a      	cmp	sl, r3
 800afc2:	dd0c      	ble.n	800afde <__kernel_rem_pio2f+0x332>
 800afc4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800afc8:	465c      	mov	r4, fp
 800afca:	3501      	adds	r5, #1
 800afcc:	e7e9      	b.n	800afa2 <__kernel_rem_pio2f+0x2f6>
 800afce:	bf00      	nop
 800afd0:	0800c934 	.word	0x0800c934
 800afd4:	0800c908 	.word	0x0800c908
 800afd8:	2301      	movs	r3, #1
 800afda:	9a08      	ldr	r2, [sp, #32]
 800afdc:	e7d2      	b.n	800af84 <__kernel_rem_pio2f+0x2d8>
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	f854 0904 	ldr.w	r0, [r4], #-4
 800afe4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800afe8:	f7f5 feac 	bl	8000d44 <__aeabi_fmul>
 800afec:	4601      	mov	r1, r0
 800afee:	4630      	mov	r0, r6
 800aff0:	f7f5 fda0 	bl	8000b34 <__addsf3>
 800aff4:	f10a 0a01 	add.w	sl, sl, #1
 800aff8:	4606      	mov	r6, r0
 800affa:	e7e0      	b.n	800afbe <__kernel_rem_pio2f+0x312>
 800affc:	3d01      	subs	r5, #1
 800affe:	e76e      	b.n	800aede <__kernel_rem_pio2f+0x232>
 800b000:	9b06      	ldr	r3, [sp, #24]
 800b002:	9a02      	ldr	r2, [sp, #8]
 800b004:	4648      	mov	r0, r9
 800b006:	1a99      	subs	r1, r3, r2
 800b008:	f000 fd86 	bl	800bb18 <scalbnf>
 800b00c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b010:	4605      	mov	r5, r0
 800b012:	f7f6 f849 	bl	80010a8 <__aeabi_fcmpge>
 800b016:	b300      	cbz	r0, 800b05a <__kernel_rem_pio2f+0x3ae>
 800b018:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b01c:	4628      	mov	r0, r5
 800b01e:	f7f5 fe91 	bl	8000d44 <__aeabi_fmul>
 800b022:	f7f6 f86b 	bl	80010fc <__aeabi_f2iz>
 800b026:	f7f5 fe39 	bl	8000c9c <__aeabi_i2f>
 800b02a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b02e:	4681      	mov	r9, r0
 800b030:	f7f5 fe88 	bl	8000d44 <__aeabi_fmul>
 800b034:	4601      	mov	r1, r0
 800b036:	4628      	mov	r0, r5
 800b038:	f7f5 fd7a 	bl	8000b30 <__aeabi_fsub>
 800b03c:	f7f6 f85e 	bl	80010fc <__aeabi_f2iz>
 800b040:	ab0a      	add	r3, sp, #40	; 0x28
 800b042:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b046:	4648      	mov	r0, r9
 800b048:	f7f6 f858 	bl	80010fc <__aeabi_f2iz>
 800b04c:	f108 0501 	add.w	r5, r8, #1
 800b050:	ab0a      	add	r3, sp, #40	; 0x28
 800b052:	3708      	adds	r7, #8
 800b054:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b058:	e748      	b.n	800aeec <__kernel_rem_pio2f+0x240>
 800b05a:	4628      	mov	r0, r5
 800b05c:	f7f6 f84e 	bl	80010fc <__aeabi_f2iz>
 800b060:	ab0a      	add	r3, sp, #40	; 0x28
 800b062:	4645      	mov	r5, r8
 800b064:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b068:	e740      	b.n	800aeec <__kernel_rem_pio2f+0x240>
 800b06a:	ab0a      	add	r3, sp, #40	; 0x28
 800b06c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b070:	f7f5 fe14 	bl	8000c9c <__aeabi_i2f>
 800b074:	4649      	mov	r1, r9
 800b076:	f7f5 fe65 	bl	8000d44 <__aeabi_fmul>
 800b07a:	4641      	mov	r1, r8
 800b07c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800b080:	4648      	mov	r0, r9
 800b082:	f7f5 fe5f 	bl	8000d44 <__aeabi_fmul>
 800b086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b08a:	4681      	mov	r9, r0
 800b08c:	e738      	b.n	800af00 <__kernel_rem_pio2f+0x254>
 800b08e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b092:	f85b 1b04 	ldr.w	r1, [fp], #4
 800b096:	9203      	str	r2, [sp, #12]
 800b098:	9302      	str	r3, [sp, #8]
 800b09a:	f7f5 fe53 	bl	8000d44 <__aeabi_fmul>
 800b09e:	4601      	mov	r1, r0
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f7f5 fd47 	bl	8000b34 <__addsf3>
 800b0a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f108 0801 	add.w	r8, r8, #1
 800b0b0:	9901      	ldr	r1, [sp, #4]
 800b0b2:	4588      	cmp	r8, r1
 800b0b4:	dc01      	bgt.n	800b0ba <__kernel_rem_pio2f+0x40e>
 800b0b6:	45c2      	cmp	sl, r8
 800b0b8:	dae9      	bge.n	800b08e <__kernel_rem_pio2f+0x3e2>
 800b0ba:	ab5a      	add	r3, sp, #360	; 0x168
 800b0bc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b0c0:	f843 7ca0 	str.w	r7, [r3, #-160]
 800b0c4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0c8:	f10a 0a01 	add.w	sl, sl, #1
 800b0cc:	e720      	b.n	800af10 <__kernel_rem_pio2f+0x264>
 800b0ce:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	dc07      	bgt.n	800b0e4 <__kernel_rem_pio2f+0x438>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dc4d      	bgt.n	800b174 <__kernel_rem_pio2f+0x4c8>
 800b0d8:	d02e      	beq.n	800b138 <__kernel_rem_pio2f+0x48c>
 800b0da:	f006 0007 	and.w	r0, r6, #7
 800b0de:	b05b      	add	sp, #364	; 0x16c
 800b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d1f7      	bne.n	800b0da <__kernel_rem_pio2f+0x42e>
 800b0ea:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800b0ee:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800b0f2:	46b8      	mov	r8, r7
 800b0f4:	46aa      	mov	sl, r5
 800b0f6:	f1ba 0f00 	cmp.w	sl, #0
 800b0fa:	dc48      	bgt.n	800b18e <__kernel_rem_pio2f+0x4e2>
 800b0fc:	46a9      	mov	r9, r5
 800b0fe:	f1b9 0f01 	cmp.w	r9, #1
 800b102:	dc5f      	bgt.n	800b1c4 <__kernel_rem_pio2f+0x518>
 800b104:	2000      	movs	r0, #0
 800b106:	2d01      	cmp	r5, #1
 800b108:	dc75      	bgt.n	800b1f6 <__kernel_rem_pio2f+0x54a>
 800b10a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b10c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b10e:	2c00      	cmp	r4, #0
 800b110:	d177      	bne.n	800b202 <__kernel_rem_pio2f+0x556>
 800b112:	9900      	ldr	r1, [sp, #0]
 800b114:	600a      	str	r2, [r1, #0]
 800b116:	460a      	mov	r2, r1
 800b118:	604b      	str	r3, [r1, #4]
 800b11a:	6090      	str	r0, [r2, #8]
 800b11c:	e7dd      	b.n	800b0da <__kernel_rem_pio2f+0x42e>
 800b11e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800b122:	f7f5 fd07 	bl	8000b34 <__addsf3>
 800b126:	3d01      	subs	r5, #1
 800b128:	2d00      	cmp	r5, #0
 800b12a:	daf8      	bge.n	800b11e <__kernel_rem_pio2f+0x472>
 800b12c:	b10c      	cbz	r4, 800b132 <__kernel_rem_pio2f+0x486>
 800b12e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b132:	9b00      	ldr	r3, [sp, #0]
 800b134:	6018      	str	r0, [r3, #0]
 800b136:	e7d0      	b.n	800b0da <__kernel_rem_pio2f+0x42e>
 800b138:	2000      	movs	r0, #0
 800b13a:	af32      	add	r7, sp, #200	; 0xc8
 800b13c:	e7f4      	b.n	800b128 <__kernel_rem_pio2f+0x47c>
 800b13e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b142:	f7f5 fcf7 	bl	8000b34 <__addsf3>
 800b146:	3f01      	subs	r7, #1
 800b148:	2f00      	cmp	r7, #0
 800b14a:	daf8      	bge.n	800b13e <__kernel_rem_pio2f+0x492>
 800b14c:	b1bc      	cbz	r4, 800b17e <__kernel_rem_pio2f+0x4d2>
 800b14e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b152:	9a00      	ldr	r2, [sp, #0]
 800b154:	4601      	mov	r1, r0
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800b15a:	f7f5 fce9 	bl	8000b30 <__aeabi_fsub>
 800b15e:	2701      	movs	r7, #1
 800b160:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b164:	42bd      	cmp	r5, r7
 800b166:	da0c      	bge.n	800b182 <__kernel_rem_pio2f+0x4d6>
 800b168:	b10c      	cbz	r4, 800b16e <__kernel_rem_pio2f+0x4c2>
 800b16a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	6058      	str	r0, [r3, #4]
 800b172:	e7b2      	b.n	800b0da <__kernel_rem_pio2f+0x42e>
 800b174:	462f      	mov	r7, r5
 800b176:	2000      	movs	r0, #0
 800b178:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800b17c:	e7e4      	b.n	800b148 <__kernel_rem_pio2f+0x49c>
 800b17e:	4603      	mov	r3, r0
 800b180:	e7e7      	b.n	800b152 <__kernel_rem_pio2f+0x4a6>
 800b182:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800b186:	f7f5 fcd5 	bl	8000b34 <__addsf3>
 800b18a:	3701      	adds	r7, #1
 800b18c:	e7ea      	b.n	800b164 <__kernel_rem_pio2f+0x4b8>
 800b18e:	f8d8 3000 	ldr.w	r3, [r8]
 800b192:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	9302      	str	r3, [sp, #8]
 800b19c:	9201      	str	r2, [sp, #4]
 800b19e:	f7f5 fcc9 	bl	8000b34 <__addsf3>
 800b1a2:	9a01      	ldr	r2, [sp, #4]
 800b1a4:	4601      	mov	r1, r0
 800b1a6:	4681      	mov	r9, r0
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	f7f5 fcc1 	bl	8000b30 <__aeabi_fsub>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	f7f5 fcbd 	bl	8000b34 <__addsf3>
 800b1ba:	f848 0904 	str.w	r0, [r8], #-4
 800b1be:	f8c8 9000 	str.w	r9, [r8]
 800b1c2:	e798      	b.n	800b0f6 <__kernel_rem_pio2f+0x44a>
 800b1c4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b1c8:	f8d7 a000 	ldr.w	sl, [r7]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	4651      	mov	r1, sl
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	f7f5 fcaf 	bl	8000b34 <__addsf3>
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	4601      	mov	r1, r0
 800b1da:	4680      	mov	r8, r0
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7f5 fca7 	bl	8000b30 <__aeabi_fsub>
 800b1e2:	4651      	mov	r1, sl
 800b1e4:	f7f5 fca6 	bl	8000b34 <__addsf3>
 800b1e8:	f847 0904 	str.w	r0, [r7], #-4
 800b1ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800b1f0:	f8c7 8000 	str.w	r8, [r7]
 800b1f4:	e783      	b.n	800b0fe <__kernel_rem_pio2f+0x452>
 800b1f6:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800b1fa:	f7f5 fc9b 	bl	8000b34 <__addsf3>
 800b1fe:	3d01      	subs	r5, #1
 800b200:	e781      	b.n	800b106 <__kernel_rem_pio2f+0x45a>
 800b202:	9900      	ldr	r1, [sp, #0]
 800b204:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800b208:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b20c:	600a      	str	r2, [r1, #0]
 800b20e:	604b      	str	r3, [r1, #4]
 800b210:	460a      	mov	r2, r1
 800b212:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b216:	e780      	b.n	800b11a <__kernel_rem_pio2f+0x46e>

0800b218 <__kernel_sinf>:
 800b218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b21c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b220:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b224:	4604      	mov	r4, r0
 800b226:	460f      	mov	r7, r1
 800b228:	4691      	mov	r9, r2
 800b22a:	da03      	bge.n	800b234 <__kernel_sinf+0x1c>
 800b22c:	f7f5 ff66 	bl	80010fc <__aeabi_f2iz>
 800b230:	2800      	cmp	r0, #0
 800b232:	d035      	beq.n	800b2a0 <__kernel_sinf+0x88>
 800b234:	4621      	mov	r1, r4
 800b236:	4620      	mov	r0, r4
 800b238:	f7f5 fd84 	bl	8000d44 <__aeabi_fmul>
 800b23c:	4605      	mov	r5, r0
 800b23e:	4601      	mov	r1, r0
 800b240:	4620      	mov	r0, r4
 800b242:	f7f5 fd7f 	bl	8000d44 <__aeabi_fmul>
 800b246:	4929      	ldr	r1, [pc, #164]	; (800b2ec <__kernel_sinf+0xd4>)
 800b248:	4606      	mov	r6, r0
 800b24a:	4628      	mov	r0, r5
 800b24c:	f7f5 fd7a 	bl	8000d44 <__aeabi_fmul>
 800b250:	4927      	ldr	r1, [pc, #156]	; (800b2f0 <__kernel_sinf+0xd8>)
 800b252:	f7f5 fc6d 	bl	8000b30 <__aeabi_fsub>
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 fd74 	bl	8000d44 <__aeabi_fmul>
 800b25c:	4925      	ldr	r1, [pc, #148]	; (800b2f4 <__kernel_sinf+0xdc>)
 800b25e:	f7f5 fc69 	bl	8000b34 <__addsf3>
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 fd6e 	bl	8000d44 <__aeabi_fmul>
 800b268:	4923      	ldr	r1, [pc, #140]	; (800b2f8 <__kernel_sinf+0xe0>)
 800b26a:	f7f5 fc61 	bl	8000b30 <__aeabi_fsub>
 800b26e:	4629      	mov	r1, r5
 800b270:	f7f5 fd68 	bl	8000d44 <__aeabi_fmul>
 800b274:	4921      	ldr	r1, [pc, #132]	; (800b2fc <__kernel_sinf+0xe4>)
 800b276:	f7f5 fc5d 	bl	8000b34 <__addsf3>
 800b27a:	4680      	mov	r8, r0
 800b27c:	f1b9 0f00 	cmp.w	r9, #0
 800b280:	d111      	bne.n	800b2a6 <__kernel_sinf+0x8e>
 800b282:	4601      	mov	r1, r0
 800b284:	4628      	mov	r0, r5
 800b286:	f7f5 fd5d 	bl	8000d44 <__aeabi_fmul>
 800b28a:	491d      	ldr	r1, [pc, #116]	; (800b300 <__kernel_sinf+0xe8>)
 800b28c:	f7f5 fc50 	bl	8000b30 <__aeabi_fsub>
 800b290:	4631      	mov	r1, r6
 800b292:	f7f5 fd57 	bl	8000d44 <__aeabi_fmul>
 800b296:	4601      	mov	r1, r0
 800b298:	4620      	mov	r0, r4
 800b29a:	f7f5 fc4b 	bl	8000b34 <__addsf3>
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	f7f5 fd4a 	bl	8000d44 <__aeabi_fmul>
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	4681      	mov	r9, r0
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7f5 fd45 	bl	8000d44 <__aeabi_fmul>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	4648      	mov	r0, r9
 800b2be:	f7f5 fc37 	bl	8000b30 <__aeabi_fsub>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 fd3e 	bl	8000d44 <__aeabi_fmul>
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f5 fc31 	bl	8000b30 <__aeabi_fsub>
 800b2ce:	490c      	ldr	r1, [pc, #48]	; (800b300 <__kernel_sinf+0xe8>)
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7f5 fd36 	bl	8000d44 <__aeabi_fmul>
 800b2d8:	4601      	mov	r1, r0
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f7f5 fc2a 	bl	8000b34 <__addsf3>
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f7f5 fc24 	bl	8000b30 <__aeabi_fsub>
 800b2e8:	e7d9      	b.n	800b29e <__kernel_sinf+0x86>
 800b2ea:	bf00      	nop
 800b2ec:	2f2ec9d3 	.word	0x2f2ec9d3
 800b2f0:	32d72f34 	.word	0x32d72f34
 800b2f4:	3638ef1b 	.word	0x3638ef1b
 800b2f8:	39500d01 	.word	0x39500d01
 800b2fc:	3c088889 	.word	0x3c088889
 800b300:	3e2aaaab 	.word	0x3e2aaaab

0800b304 <__kernel_tanf>:
 800b304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 800b30c:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 800b310:	4604      	mov	r4, r0
 800b312:	460e      	mov	r6, r1
 800b314:	4690      	mov	r8, r2
 800b316:	4607      	mov	r7, r0
 800b318:	da1b      	bge.n	800b352 <__kernel_tanf+0x4e>
 800b31a:	f7f5 feef 	bl	80010fc <__aeabi_f2iz>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d12f      	bne.n	800b382 <__kernel_tanf+0x7e>
 800b322:	f108 0301 	add.w	r3, r8, #1
 800b326:	ea53 030a 	orrs.w	r3, r3, sl
 800b32a:	d10c      	bne.n	800b346 <__kernel_tanf+0x42>
 800b32c:	4620      	mov	r0, r4
 800b32e:	f7fe f849 	bl	80093c4 <fabsf>
 800b332:	4601      	mov	r1, r0
 800b334:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b338:	f7f5 fdb8 	bl	8000eac <__aeabi_fdiv>
 800b33c:	4604      	mov	r4, r0
 800b33e:	4620      	mov	r0, r4
 800b340:	b003      	add	sp, #12
 800b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b346:	f1b8 0f01 	cmp.w	r8, #1
 800b34a:	d0f8      	beq.n	800b33e <__kernel_tanf+0x3a>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4872      	ldr	r0, [pc, #456]	; (800b518 <__kernel_tanf+0x214>)
 800b350:	e7f2      	b.n	800b338 <__kernel_tanf+0x34>
 800b352:	4b72      	ldr	r3, [pc, #456]	; (800b51c <__kernel_tanf+0x218>)
 800b354:	459a      	cmp	sl, r3
 800b356:	db14      	blt.n	800b382 <__kernel_tanf+0x7e>
 800b358:	2800      	cmp	r0, #0
 800b35a:	bfbe      	ittt	lt
 800b35c:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 800b360:	4604      	movlt	r4, r0
 800b362:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 800b366:	486e      	ldr	r0, [pc, #440]	; (800b520 <__kernel_tanf+0x21c>)
 800b368:	4621      	mov	r1, r4
 800b36a:	f7f5 fbe1 	bl	8000b30 <__aeabi_fsub>
 800b36e:	4604      	mov	r4, r0
 800b370:	4631      	mov	r1, r6
 800b372:	486c      	ldr	r0, [pc, #432]	; (800b524 <__kernel_tanf+0x220>)
 800b374:	f7f5 fbdc 	bl	8000b30 <__aeabi_fsub>
 800b378:	4621      	mov	r1, r4
 800b37a:	f7f5 fbdb 	bl	8000b34 <__addsf3>
 800b37e:	2600      	movs	r6, #0
 800b380:	4604      	mov	r4, r0
 800b382:	4621      	mov	r1, r4
 800b384:	4620      	mov	r0, r4
 800b386:	f7f5 fcdd 	bl	8000d44 <__aeabi_fmul>
 800b38a:	4601      	mov	r1, r0
 800b38c:	4681      	mov	r9, r0
 800b38e:	f7f5 fcd9 	bl	8000d44 <__aeabi_fmul>
 800b392:	4649      	mov	r1, r9
 800b394:	4605      	mov	r5, r0
 800b396:	4620      	mov	r0, r4
 800b398:	f7f5 fcd4 	bl	8000d44 <__aeabi_fmul>
 800b39c:	4962      	ldr	r1, [pc, #392]	; (800b528 <__kernel_tanf+0x224>)
 800b39e:	4683      	mov	fp, r0
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	f7f5 fccf 	bl	8000d44 <__aeabi_fmul>
 800b3a6:	4961      	ldr	r1, [pc, #388]	; (800b52c <__kernel_tanf+0x228>)
 800b3a8:	f7f5 fbc4 	bl	8000b34 <__addsf3>
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f7f5 fcc9 	bl	8000d44 <__aeabi_fmul>
 800b3b2:	495f      	ldr	r1, [pc, #380]	; (800b530 <__kernel_tanf+0x22c>)
 800b3b4:	f7f5 fbbe 	bl	8000b34 <__addsf3>
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	f7f5 fcc3 	bl	8000d44 <__aeabi_fmul>
 800b3be:	495d      	ldr	r1, [pc, #372]	; (800b534 <__kernel_tanf+0x230>)
 800b3c0:	f7f5 fbb8 	bl	8000b34 <__addsf3>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7f5 fcbd 	bl	8000d44 <__aeabi_fmul>
 800b3ca:	495b      	ldr	r1, [pc, #364]	; (800b538 <__kernel_tanf+0x234>)
 800b3cc:	f7f5 fbb2 	bl	8000b34 <__addsf3>
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 fcb7 	bl	8000d44 <__aeabi_fmul>
 800b3d6:	4959      	ldr	r1, [pc, #356]	; (800b53c <__kernel_tanf+0x238>)
 800b3d8:	f7f5 fbac 	bl	8000b34 <__addsf3>
 800b3dc:	4649      	mov	r1, r9
 800b3de:	f7f5 fcb1 	bl	8000d44 <__aeabi_fmul>
 800b3e2:	4957      	ldr	r1, [pc, #348]	; (800b540 <__kernel_tanf+0x23c>)
 800b3e4:	9001      	str	r0, [sp, #4]
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f7f5 fcac 	bl	8000d44 <__aeabi_fmul>
 800b3ec:	4955      	ldr	r1, [pc, #340]	; (800b544 <__kernel_tanf+0x240>)
 800b3ee:	f7f5 fba1 	bl	8000b34 <__addsf3>
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f5 fca6 	bl	8000d44 <__aeabi_fmul>
 800b3f8:	4953      	ldr	r1, [pc, #332]	; (800b548 <__kernel_tanf+0x244>)
 800b3fa:	f7f5 fb9b 	bl	8000b34 <__addsf3>
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 fca0 	bl	8000d44 <__aeabi_fmul>
 800b404:	4951      	ldr	r1, [pc, #324]	; (800b54c <__kernel_tanf+0x248>)
 800b406:	f7f5 fb95 	bl	8000b34 <__addsf3>
 800b40a:	4629      	mov	r1, r5
 800b40c:	f7f5 fc9a 	bl	8000d44 <__aeabi_fmul>
 800b410:	494f      	ldr	r1, [pc, #316]	; (800b550 <__kernel_tanf+0x24c>)
 800b412:	f7f5 fb8f 	bl	8000b34 <__addsf3>
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 fc94 	bl	8000d44 <__aeabi_fmul>
 800b41c:	494d      	ldr	r1, [pc, #308]	; (800b554 <__kernel_tanf+0x250>)
 800b41e:	f7f5 fb89 	bl	8000b34 <__addsf3>
 800b422:	9b01      	ldr	r3, [sp, #4]
 800b424:	4601      	mov	r1, r0
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 fb84 	bl	8000b34 <__addsf3>
 800b42c:	4659      	mov	r1, fp
 800b42e:	f7f5 fc89 	bl	8000d44 <__aeabi_fmul>
 800b432:	4631      	mov	r1, r6
 800b434:	f7f5 fb7e 	bl	8000b34 <__addsf3>
 800b438:	4649      	mov	r1, r9
 800b43a:	f7f5 fc83 	bl	8000d44 <__aeabi_fmul>
 800b43e:	4631      	mov	r1, r6
 800b440:	f7f5 fb78 	bl	8000b34 <__addsf3>
 800b444:	4605      	mov	r5, r0
 800b446:	4944      	ldr	r1, [pc, #272]	; (800b558 <__kernel_tanf+0x254>)
 800b448:	4658      	mov	r0, fp
 800b44a:	f7f5 fc7b 	bl	8000d44 <__aeabi_fmul>
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 fb70 	bl	8000b34 <__addsf3>
 800b454:	4601      	mov	r1, r0
 800b456:	4681      	mov	r9, r0
 800b458:	4620      	mov	r0, r4
 800b45a:	f7f5 fb6b 	bl	8000b34 <__addsf3>
 800b45e:	4b2f      	ldr	r3, [pc, #188]	; (800b51c <__kernel_tanf+0x218>)
 800b460:	4605      	mov	r5, r0
 800b462:	459a      	cmp	sl, r3
 800b464:	db2b      	blt.n	800b4be <__kernel_tanf+0x1ba>
 800b466:	4640      	mov	r0, r8
 800b468:	f7f5 fc18 	bl	8000c9c <__aeabi_i2f>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4606      	mov	r6, r0
 800b470:	4628      	mov	r0, r5
 800b472:	f7f5 fc67 	bl	8000d44 <__aeabi_fmul>
 800b476:	4631      	mov	r1, r6
 800b478:	4680      	mov	r8, r0
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7f5 fb5a 	bl	8000b34 <__addsf3>
 800b480:	4601      	mov	r1, r0
 800b482:	4640      	mov	r0, r8
 800b484:	f7f5 fd12 	bl	8000eac <__aeabi_fdiv>
 800b488:	4649      	mov	r1, r9
 800b48a:	f7f5 fb51 	bl	8000b30 <__aeabi_fsub>
 800b48e:	4601      	mov	r1, r0
 800b490:	4620      	mov	r0, r4
 800b492:	f7f5 fb4d 	bl	8000b30 <__aeabi_fsub>
 800b496:	4601      	mov	r1, r0
 800b498:	f7f5 fb4c 	bl	8000b34 <__addsf3>
 800b49c:	4601      	mov	r1, r0
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7f5 fb46 	bl	8000b30 <__aeabi_fsub>
 800b4a4:	17bf      	asrs	r7, r7, #30
 800b4a6:	f007 0702 	and.w	r7, r7, #2
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	f1c7 0001 	rsb	r0, r7, #1
 800b4b0:	f7f5 fbf4 	bl	8000c9c <__aeabi_i2f>
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7f5 fc44 	bl	8000d44 <__aeabi_fmul>
 800b4bc:	e73e      	b.n	800b33c <__kernel_tanf+0x38>
 800b4be:	f1b8 0f01 	cmp.w	r8, #1
 800b4c2:	d027      	beq.n	800b514 <__kernel_tanf+0x210>
 800b4c4:	4e25      	ldr	r6, [pc, #148]	; (800b55c <__kernel_tanf+0x258>)
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	ea06 0800 	and.w	r8, r6, r0
 800b4cc:	4812      	ldr	r0, [pc, #72]	; (800b518 <__kernel_tanf+0x214>)
 800b4ce:	f7f5 fced 	bl	8000eac <__aeabi_fdiv>
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4006      	ands	r6, r0
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	4640      	mov	r0, r8
 800b4da:	f7f5 fb29 	bl	8000b30 <__aeabi_fsub>
 800b4de:	4601      	mov	r1, r0
 800b4e0:	4648      	mov	r0, r9
 800b4e2:	f7f5 fb25 	bl	8000b30 <__aeabi_fsub>
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	f7f5 fc2c 	bl	8000d44 <__aeabi_fmul>
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	f7f5 fc27 	bl	8000d44 <__aeabi_fmul>
 800b4f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b4fa:	f7f5 fb1b 	bl	8000b34 <__addsf3>
 800b4fe:	4601      	mov	r1, r0
 800b500:	4620      	mov	r0, r4
 800b502:	f7f5 fb17 	bl	8000b34 <__addsf3>
 800b506:	4639      	mov	r1, r7
 800b508:	f7f5 fc1c 	bl	8000d44 <__aeabi_fmul>
 800b50c:	4631      	mov	r1, r6
 800b50e:	f7f5 fb11 	bl	8000b34 <__addsf3>
 800b512:	e713      	b.n	800b33c <__kernel_tanf+0x38>
 800b514:	4604      	mov	r4, r0
 800b516:	e712      	b.n	800b33e <__kernel_tanf+0x3a>
 800b518:	bf800000 	.word	0xbf800000
 800b51c:	3f2ca140 	.word	0x3f2ca140
 800b520:	3f490fda 	.word	0x3f490fda
 800b524:	33222168 	.word	0x33222168
 800b528:	37d95384 	.word	0x37d95384
 800b52c:	3895c07a 	.word	0x3895c07a
 800b530:	398137b9 	.word	0x398137b9
 800b534:	3abede48 	.word	0x3abede48
 800b538:	3c11371f 	.word	0x3c11371f
 800b53c:	3d5d0dd1 	.word	0x3d5d0dd1
 800b540:	b79bae5f 	.word	0xb79bae5f
 800b544:	38a3f445 	.word	0x38a3f445
 800b548:	3a1a26c8 	.word	0x3a1a26c8
 800b54c:	3b6b6916 	.word	0x3b6b6916
 800b550:	3cb327a4 	.word	0x3cb327a4
 800b554:	3e088889 	.word	0x3e088889
 800b558:	3eaaaaab 	.word	0x3eaaaaab
 800b55c:	fffff000 	.word	0xfffff000

0800b560 <atan>:
 800b560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	4bb6      	ldr	r3, [pc, #728]	; (800b840 <atan+0x2e0>)
 800b566:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b56a:	429e      	cmp	r6, r3
 800b56c:	4604      	mov	r4, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	468b      	mov	fp, r1
 800b572:	dd17      	ble.n	800b5a4 <atan+0x44>
 800b574:	4bb3      	ldr	r3, [pc, #716]	; (800b844 <atan+0x2e4>)
 800b576:	429e      	cmp	r6, r3
 800b578:	dc01      	bgt.n	800b57e <atan+0x1e>
 800b57a:	d109      	bne.n	800b590 <atan+0x30>
 800b57c:	b140      	cbz	r0, 800b590 <atan+0x30>
 800b57e:	4622      	mov	r2, r4
 800b580:	462b      	mov	r3, r5
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f4 fdf1 	bl	800016c <__adddf3>
 800b58a:	4604      	mov	r4, r0
 800b58c:	460d      	mov	r5, r1
 800b58e:	e005      	b.n	800b59c <atan+0x3c>
 800b590:	f1bb 0f00 	cmp.w	fp, #0
 800b594:	4cac      	ldr	r4, [pc, #688]	; (800b848 <atan+0x2e8>)
 800b596:	f300 8121 	bgt.w	800b7dc <atan+0x27c>
 800b59a:	4dac      	ldr	r5, [pc, #688]	; (800b84c <atan+0x2ec>)
 800b59c:	4620      	mov	r0, r4
 800b59e:	4629      	mov	r1, r5
 800b5a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a4:	4baa      	ldr	r3, [pc, #680]	; (800b850 <atan+0x2f0>)
 800b5a6:	429e      	cmp	r6, r3
 800b5a8:	dc11      	bgt.n	800b5ce <atan+0x6e>
 800b5aa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b5ae:	429e      	cmp	r6, r3
 800b5b0:	dc0a      	bgt.n	800b5c8 <atan+0x68>
 800b5b2:	a38b      	add	r3, pc, #556	; (adr r3, 800b7e0 <atan+0x280>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f4 fdd8 	bl	800016c <__adddf3>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4ba5      	ldr	r3, [pc, #660]	; (800b854 <atan+0x2f4>)
 800b5c0:	f7f5 fa1a 	bl	80009f8 <__aeabi_dcmpgt>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d1e9      	bne.n	800b59c <atan+0x3c>
 800b5c8:	f04f 3aff 	mov.w	sl, #4294967295
 800b5cc:	e027      	b.n	800b61e <atan+0xbe>
 800b5ce:	f000 f951 	bl	800b874 <fabs>
 800b5d2:	4ba1      	ldr	r3, [pc, #644]	; (800b858 <atan+0x2f8>)
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	429e      	cmp	r6, r3
 800b5d8:	460d      	mov	r5, r1
 800b5da:	f300 80b8 	bgt.w	800b74e <atan+0x1ee>
 800b5de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b5e2:	429e      	cmp	r6, r3
 800b5e4:	f300 809c 	bgt.w	800b720 <atan+0x1c0>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	f7f4 fdbe 	bl	800016c <__adddf3>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4b98      	ldr	r3, [pc, #608]	; (800b854 <atan+0x2f4>)
 800b5f4:	f7f4 fdb8 	bl	8000168 <__aeabi_dsub>
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	f7f4 fdb1 	bl	800016c <__adddf3>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4630      	mov	r0, r6
 800b610:	4639      	mov	r1, r7
 800b612:	f7f5 f88b 	bl	800072c <__aeabi_ddiv>
 800b616:	f04f 0a00 	mov.w	sl, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	460d      	mov	r5, r1
 800b61e:	4622      	mov	r2, r4
 800b620:	462b      	mov	r3, r5
 800b622:	4620      	mov	r0, r4
 800b624:	4629      	mov	r1, r5
 800b626:	f7f4 ff57 	bl	80004d8 <__aeabi_dmul>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	4680      	mov	r8, r0
 800b630:	4689      	mov	r9, r1
 800b632:	f7f4 ff51 	bl	80004d8 <__aeabi_dmul>
 800b636:	a36c      	add	r3, pc, #432	; (adr r3, 800b7e8 <atan+0x288>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	4606      	mov	r6, r0
 800b63e:	460f      	mov	r7, r1
 800b640:	f7f4 ff4a 	bl	80004d8 <__aeabi_dmul>
 800b644:	a36a      	add	r3, pc, #424	; (adr r3, 800b7f0 <atan+0x290>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f7f4 fd8f 	bl	800016c <__adddf3>
 800b64e:	4632      	mov	r2, r6
 800b650:	463b      	mov	r3, r7
 800b652:	f7f4 ff41 	bl	80004d8 <__aeabi_dmul>
 800b656:	a368      	add	r3, pc, #416	; (adr r3, 800b7f8 <atan+0x298>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 fd86 	bl	800016c <__adddf3>
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	f7f4 ff38 	bl	80004d8 <__aeabi_dmul>
 800b668:	a365      	add	r3, pc, #404	; (adr r3, 800b800 <atan+0x2a0>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f4 fd7d 	bl	800016c <__adddf3>
 800b672:	4632      	mov	r2, r6
 800b674:	463b      	mov	r3, r7
 800b676:	f7f4 ff2f 	bl	80004d8 <__aeabi_dmul>
 800b67a:	a363      	add	r3, pc, #396	; (adr r3, 800b808 <atan+0x2a8>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7f4 fd74 	bl	800016c <__adddf3>
 800b684:	4632      	mov	r2, r6
 800b686:	463b      	mov	r3, r7
 800b688:	f7f4 ff26 	bl	80004d8 <__aeabi_dmul>
 800b68c:	a360      	add	r3, pc, #384	; (adr r3, 800b810 <atan+0x2b0>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 fd6b 	bl	800016c <__adddf3>
 800b696:	4642      	mov	r2, r8
 800b698:	464b      	mov	r3, r9
 800b69a:	f7f4 ff1d 	bl	80004d8 <__aeabi_dmul>
 800b69e:	a35e      	add	r3, pc, #376	; (adr r3, 800b818 <atan+0x2b8>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4689      	mov	r9, r1
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	a35b      	add	r3, pc, #364	; (adr r3, 800b820 <atan+0x2c0>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7f4 fd57 	bl	8000168 <__aeabi_dsub>
 800b6ba:	4632      	mov	r2, r6
 800b6bc:	463b      	mov	r3, r7
 800b6be:	f7f4 ff0b 	bl	80004d8 <__aeabi_dmul>
 800b6c2:	a359      	add	r3, pc, #356	; (adr r3, 800b828 <atan+0x2c8>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fd4e 	bl	8000168 <__aeabi_dsub>
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	463b      	mov	r3, r7
 800b6d0:	f7f4 ff02 	bl	80004d8 <__aeabi_dmul>
 800b6d4:	a356      	add	r3, pc, #344	; (adr r3, 800b830 <atan+0x2d0>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fd45 	bl	8000168 <__aeabi_dsub>
 800b6de:	4632      	mov	r2, r6
 800b6e0:	463b      	mov	r3, r7
 800b6e2:	f7f4 fef9 	bl	80004d8 <__aeabi_dmul>
 800b6e6:	a354      	add	r3, pc, #336	; (adr r3, 800b838 <atan+0x2d8>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fd3c 	bl	8000168 <__aeabi_dsub>
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	f7f4 fef0 	bl	80004d8 <__aeabi_dmul>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	4649      	mov	r1, r9
 800b700:	f7f4 fd34 	bl	800016c <__adddf3>
 800b704:	4622      	mov	r2, r4
 800b706:	462b      	mov	r3, r5
 800b708:	f7f4 fee6 	bl	80004d8 <__aeabi_dmul>
 800b70c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	d144      	bne.n	800b7a0 <atan+0x240>
 800b716:	4620      	mov	r0, r4
 800b718:	4629      	mov	r1, r5
 800b71a:	f7f4 fd25 	bl	8000168 <__aeabi_dsub>
 800b71e:	e734      	b.n	800b58a <atan+0x2a>
 800b720:	2200      	movs	r2, #0
 800b722:	4b4c      	ldr	r3, [pc, #304]	; (800b854 <atan+0x2f4>)
 800b724:	f7f4 fd20 	bl	8000168 <__aeabi_dsub>
 800b728:	2200      	movs	r2, #0
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	4620      	mov	r0, r4
 800b730:	4629      	mov	r1, r5
 800b732:	4b48      	ldr	r3, [pc, #288]	; (800b854 <atan+0x2f4>)
 800b734:	f7f4 fd1a 	bl	800016c <__adddf3>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4630      	mov	r0, r6
 800b73e:	4639      	mov	r1, r7
 800b740:	f7f4 fff4 	bl	800072c <__aeabi_ddiv>
 800b744:	f04f 0a01 	mov.w	sl, #1
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	e767      	b.n	800b61e <atan+0xbe>
 800b74e:	4b43      	ldr	r3, [pc, #268]	; (800b85c <atan+0x2fc>)
 800b750:	429e      	cmp	r6, r3
 800b752:	da1a      	bge.n	800b78a <atan+0x22a>
 800b754:	2200      	movs	r2, #0
 800b756:	4b42      	ldr	r3, [pc, #264]	; (800b860 <atan+0x300>)
 800b758:	f7f4 fd06 	bl	8000168 <__aeabi_dsub>
 800b75c:	2200      	movs	r2, #0
 800b75e:	4606      	mov	r6, r0
 800b760:	460f      	mov	r7, r1
 800b762:	4620      	mov	r0, r4
 800b764:	4629      	mov	r1, r5
 800b766:	4b3e      	ldr	r3, [pc, #248]	; (800b860 <atan+0x300>)
 800b768:	f7f4 feb6 	bl	80004d8 <__aeabi_dmul>
 800b76c:	2200      	movs	r2, #0
 800b76e:	4b39      	ldr	r3, [pc, #228]	; (800b854 <atan+0x2f4>)
 800b770:	f7f4 fcfc 	bl	800016c <__adddf3>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f4 ffd6 	bl	800072c <__aeabi_ddiv>
 800b780:	f04f 0a02 	mov.w	sl, #2
 800b784:	4604      	mov	r4, r0
 800b786:	460d      	mov	r5, r1
 800b788:	e749      	b.n	800b61e <atan+0xbe>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	2000      	movs	r0, #0
 800b790:	4934      	ldr	r1, [pc, #208]	; (800b864 <atan+0x304>)
 800b792:	f7f4 ffcb 	bl	800072c <__aeabi_ddiv>
 800b796:	f04f 0a03 	mov.w	sl, #3
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	e73e      	b.n	800b61e <atan+0xbe>
 800b7a0:	4b31      	ldr	r3, [pc, #196]	; (800b868 <atan+0x308>)
 800b7a2:	4e32      	ldr	r6, [pc, #200]	; (800b86c <atan+0x30c>)
 800b7a4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b7a8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b7ac:	e9da 2300 	ldrd	r2, r3, [sl]
 800b7b0:	f7f4 fcda 	bl	8000168 <__aeabi_dsub>
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	462b      	mov	r3, r5
 800b7b8:	f7f4 fcd6 	bl	8000168 <__aeabi_dsub>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b7c4:	f7f4 fcd0 	bl	8000168 <__aeabi_dsub>
 800b7c8:	f1bb 0f00 	cmp.w	fp, #0
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	f6bf aee4 	bge.w	800b59c <atan+0x3c>
 800b7d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7d8:	461d      	mov	r5, r3
 800b7da:	e6df      	b.n	800b59c <atan+0x3c>
 800b7dc:	4d24      	ldr	r5, [pc, #144]	; (800b870 <atan+0x310>)
 800b7de:	e6dd      	b.n	800b59c <atan+0x3c>
 800b7e0:	8800759c 	.word	0x8800759c
 800b7e4:	7e37e43c 	.word	0x7e37e43c
 800b7e8:	e322da11 	.word	0xe322da11
 800b7ec:	3f90ad3a 	.word	0x3f90ad3a
 800b7f0:	24760deb 	.word	0x24760deb
 800b7f4:	3fa97b4b 	.word	0x3fa97b4b
 800b7f8:	a0d03d51 	.word	0xa0d03d51
 800b7fc:	3fb10d66 	.word	0x3fb10d66
 800b800:	c54c206e 	.word	0xc54c206e
 800b804:	3fb745cd 	.word	0x3fb745cd
 800b808:	920083ff 	.word	0x920083ff
 800b80c:	3fc24924 	.word	0x3fc24924
 800b810:	5555550d 	.word	0x5555550d
 800b814:	3fd55555 	.word	0x3fd55555
 800b818:	2c6a6c2f 	.word	0x2c6a6c2f
 800b81c:	bfa2b444 	.word	0xbfa2b444
 800b820:	52defd9a 	.word	0x52defd9a
 800b824:	3fadde2d 	.word	0x3fadde2d
 800b828:	af749a6d 	.word	0xaf749a6d
 800b82c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b830:	fe231671 	.word	0xfe231671
 800b834:	3fbc71c6 	.word	0x3fbc71c6
 800b838:	9998ebc4 	.word	0x9998ebc4
 800b83c:	3fc99999 	.word	0x3fc99999
 800b840:	440fffff 	.word	0x440fffff
 800b844:	7ff00000 	.word	0x7ff00000
 800b848:	54442d18 	.word	0x54442d18
 800b84c:	bff921fb 	.word	0xbff921fb
 800b850:	3fdbffff 	.word	0x3fdbffff
 800b854:	3ff00000 	.word	0x3ff00000
 800b858:	3ff2ffff 	.word	0x3ff2ffff
 800b85c:	40038000 	.word	0x40038000
 800b860:	3ff80000 	.word	0x3ff80000
 800b864:	bff00000 	.word	0xbff00000
 800b868:	0800c960 	.word	0x0800c960
 800b86c:	0800c940 	.word	0x0800c940
 800b870:	3ff921fb 	.word	0x3ff921fb

0800b874 <fabs>:
 800b874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b878:	4770      	bx	lr
 800b87a:	0000      	movs	r0, r0
 800b87c:	0000      	movs	r0, r0
	...

0800b880 <floor>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b888:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b88c:	2e13      	cmp	r6, #19
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	4607      	mov	r7, r0
 800b894:	460c      	mov	r4, r1
 800b896:	4605      	mov	r5, r0
 800b898:	dc34      	bgt.n	800b904 <floor+0x84>
 800b89a:	2e00      	cmp	r6, #0
 800b89c:	da15      	bge.n	800b8ca <floor+0x4a>
 800b89e:	a334      	add	r3, pc, #208	; (adr r3, 800b970 <floor+0xf0>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7f4 fc62 	bl	800016c <__adddf3>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f7f5 f8a4 	bl	80009f8 <__aeabi_dcmpgt>
 800b8b0:	b140      	cbz	r0, 800b8c4 <floor+0x44>
 800b8b2:	2c00      	cmp	r4, #0
 800b8b4:	da59      	bge.n	800b96a <floor+0xea>
 800b8b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b8ba:	ea57 0503 	orrs.w	r5, r7, r3
 800b8be:	d001      	beq.n	800b8c4 <floor+0x44>
 800b8c0:	2500      	movs	r5, #0
 800b8c2:	4c2d      	ldr	r4, [pc, #180]	; (800b978 <floor+0xf8>)
 800b8c4:	4623      	mov	r3, r4
 800b8c6:	462f      	mov	r7, r5
 800b8c8:	e025      	b.n	800b916 <floor+0x96>
 800b8ca:	4a2c      	ldr	r2, [pc, #176]	; (800b97c <floor+0xfc>)
 800b8cc:	fa42 f806 	asr.w	r8, r2, r6
 800b8d0:	ea01 0208 	and.w	r2, r1, r8
 800b8d4:	4302      	orrs	r2, r0
 800b8d6:	d01e      	beq.n	800b916 <floor+0x96>
 800b8d8:	a325      	add	r3, pc, #148	; (adr r3, 800b970 <floor+0xf0>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fc45 	bl	800016c <__adddf3>
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f7f5 f887 	bl	80009f8 <__aeabi_dcmpgt>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d0ea      	beq.n	800b8c4 <floor+0x44>
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	bfbe      	ittt	lt
 800b8f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b8f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b8fa:	19a4      	addlt	r4, r4, r6
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	ea24 0408 	bic.w	r4, r4, r8
 800b902:	e7df      	b.n	800b8c4 <floor+0x44>
 800b904:	2e33      	cmp	r6, #51	; 0x33
 800b906:	dd0a      	ble.n	800b91e <floor+0x9e>
 800b908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b90c:	d103      	bne.n	800b916 <floor+0x96>
 800b90e:	f7f4 fc2d 	bl	800016c <__adddf3>
 800b912:	4607      	mov	r7, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4638      	mov	r0, r7
 800b918:	4619      	mov	r1, r3
 800b91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91e:	f04f 32ff 	mov.w	r2, #4294967295
 800b922:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b926:	fa22 f808 	lsr.w	r8, r2, r8
 800b92a:	ea18 0f00 	tst.w	r8, r0
 800b92e:	d0f2      	beq.n	800b916 <floor+0x96>
 800b930:	a30f      	add	r3, pc, #60	; (adr r3, 800b970 <floor+0xf0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fc19 	bl	800016c <__adddf3>
 800b93a:	2200      	movs	r2, #0
 800b93c:	2300      	movs	r3, #0
 800b93e:	f7f5 f85b 	bl	80009f8 <__aeabi_dcmpgt>
 800b942:	2800      	cmp	r0, #0
 800b944:	d0be      	beq.n	800b8c4 <floor+0x44>
 800b946:	2c00      	cmp	r4, #0
 800b948:	da02      	bge.n	800b950 <floor+0xd0>
 800b94a:	2e14      	cmp	r6, #20
 800b94c:	d103      	bne.n	800b956 <floor+0xd6>
 800b94e:	3401      	adds	r4, #1
 800b950:	ea25 0508 	bic.w	r5, r5, r8
 800b954:	e7b6      	b.n	800b8c4 <floor+0x44>
 800b956:	2301      	movs	r3, #1
 800b958:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b95c:	fa03 f606 	lsl.w	r6, r3, r6
 800b960:	4435      	add	r5, r6
 800b962:	42bd      	cmp	r5, r7
 800b964:	bf38      	it	cc
 800b966:	18e4      	addcc	r4, r4, r3
 800b968:	e7f2      	b.n	800b950 <floor+0xd0>
 800b96a:	2500      	movs	r5, #0
 800b96c:	462c      	mov	r4, r5
 800b96e:	e7a9      	b.n	800b8c4 <floor+0x44>
 800b970:	8800759c 	.word	0x8800759c
 800b974:	7e37e43c 	.word	0x7e37e43c
 800b978:	bff00000 	.word	0xbff00000
 800b97c:	000fffff 	.word	0x000fffff

0800b980 <scalbn>:
 800b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b982:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b986:	4604      	mov	r4, r0
 800b988:	460d      	mov	r5, r1
 800b98a:	4617      	mov	r7, r2
 800b98c:	460b      	mov	r3, r1
 800b98e:	b996      	cbnz	r6, 800b9b6 <scalbn+0x36>
 800b990:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b994:	4303      	orrs	r3, r0
 800b996:	d039      	beq.n	800ba0c <scalbn+0x8c>
 800b998:	4b35      	ldr	r3, [pc, #212]	; (800ba70 <scalbn+0xf0>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7f4 fd9c 	bl	80004d8 <__aeabi_dmul>
 800b9a0:	4b34      	ldr	r3, [pc, #208]	; (800ba74 <scalbn+0xf4>)
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	429f      	cmp	r7, r3
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	da0f      	bge.n	800b9ca <scalbn+0x4a>
 800b9aa:	a32d      	add	r3, pc, #180	; (adr r3, 800ba60 <scalbn+0xe0>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fd92 	bl	80004d8 <__aeabi_dmul>
 800b9b4:	e006      	b.n	800b9c4 <scalbn+0x44>
 800b9b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b9ba:	4296      	cmp	r6, r2
 800b9bc:	d10a      	bne.n	800b9d4 <scalbn+0x54>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	f7f4 fbd4 	bl	800016c <__adddf3>
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	e020      	b.n	800ba0c <scalbn+0x8c>
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b9d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b9d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b9d8:	19b9      	adds	r1, r7, r6
 800b9da:	4291      	cmp	r1, r2
 800b9dc:	dd0e      	ble.n	800b9fc <scalbn+0x7c>
 800b9de:	a322      	add	r3, pc, #136	; (adr r3, 800ba68 <scalbn+0xe8>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b9e8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b9ec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b9f0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b9f4:	4820      	ldr	r0, [pc, #128]	; (800ba78 <scalbn+0xf8>)
 800b9f6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b9fa:	e7d9      	b.n	800b9b0 <scalbn+0x30>
 800b9fc:	2900      	cmp	r1, #0
 800b9fe:	dd08      	ble.n	800ba12 <scalbn+0x92>
 800ba00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba12:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ba16:	da16      	bge.n	800ba46 <scalbn+0xc6>
 800ba18:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba1c:	429f      	cmp	r7, r3
 800ba1e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ba22:	dd08      	ble.n	800ba36 <scalbn+0xb6>
 800ba24:	4c15      	ldr	r4, [pc, #84]	; (800ba7c <scalbn+0xfc>)
 800ba26:	4814      	ldr	r0, [pc, #80]	; (800ba78 <scalbn+0xf8>)
 800ba28:	f363 74df 	bfi	r4, r3, #31, #1
 800ba2c:	a30e      	add	r3, pc, #56	; (adr r3, 800ba68 <scalbn+0xe8>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	4621      	mov	r1, r4
 800ba34:	e7bc      	b.n	800b9b0 <scalbn+0x30>
 800ba36:	4c12      	ldr	r4, [pc, #72]	; (800ba80 <scalbn+0x100>)
 800ba38:	4812      	ldr	r0, [pc, #72]	; (800ba84 <scalbn+0x104>)
 800ba3a:	f363 74df 	bfi	r4, r3, #31, #1
 800ba3e:	a308      	add	r3, pc, #32	; (adr r3, 800ba60 <scalbn+0xe0>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	e7f5      	b.n	800ba32 <scalbn+0xb2>
 800ba46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba4a:	3136      	adds	r1, #54	; 0x36
 800ba4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4b0b      	ldr	r3, [pc, #44]	; (800ba88 <scalbn+0x108>)
 800ba5c:	e7a8      	b.n	800b9b0 <scalbn+0x30>
 800ba5e:	bf00      	nop
 800ba60:	c2f8f359 	.word	0xc2f8f359
 800ba64:	01a56e1f 	.word	0x01a56e1f
 800ba68:	8800759c 	.word	0x8800759c
 800ba6c:	7e37e43c 	.word	0x7e37e43c
 800ba70:	43500000 	.word	0x43500000
 800ba74:	ffff3cb0 	.word	0xffff3cb0
 800ba78:	8800759c 	.word	0x8800759c
 800ba7c:	7e37e43c 	.word	0x7e37e43c
 800ba80:	01a56e1f 	.word	0x01a56e1f
 800ba84:	c2f8f359 	.word	0xc2f8f359
 800ba88:	3c900000 	.word	0x3c900000

0800ba8c <floorf>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800ba92:	3d7f      	subs	r5, #127	; 0x7f
 800ba94:	2d16      	cmp	r5, #22
 800ba96:	4601      	mov	r1, r0
 800ba98:	4604      	mov	r4, r0
 800ba9a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ba9e:	dc26      	bgt.n	800baee <floorf+0x62>
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	da0e      	bge.n	800bac2 <floorf+0x36>
 800baa4:	4917      	ldr	r1, [pc, #92]	; (800bb04 <floorf+0x78>)
 800baa6:	f7f5 f845 	bl	8000b34 <__addsf3>
 800baaa:	2100      	movs	r1, #0
 800baac:	f7f5 fb06 	bl	80010bc <__aeabi_fcmpgt>
 800bab0:	b128      	cbz	r0, 800babe <floorf+0x32>
 800bab2:	2c00      	cmp	r4, #0
 800bab4:	da23      	bge.n	800bafe <floorf+0x72>
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <floorf+0x7c>)
 800bab8:	2e00      	cmp	r6, #0
 800baba:	bf18      	it	ne
 800babc:	461c      	movne	r4, r3
 800babe:	4621      	mov	r1, r4
 800bac0:	e01b      	b.n	800bafa <floorf+0x6e>
 800bac2:	4e12      	ldr	r6, [pc, #72]	; (800bb0c <floorf+0x80>)
 800bac4:	412e      	asrs	r6, r5
 800bac6:	4230      	tst	r0, r6
 800bac8:	d017      	beq.n	800bafa <floorf+0x6e>
 800baca:	490e      	ldr	r1, [pc, #56]	; (800bb04 <floorf+0x78>)
 800bacc:	f7f5 f832 	bl	8000b34 <__addsf3>
 800bad0:	2100      	movs	r1, #0
 800bad2:	f7f5 faf3 	bl	80010bc <__aeabi_fcmpgt>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d0f1      	beq.n	800babe <floorf+0x32>
 800bada:	2c00      	cmp	r4, #0
 800badc:	bfbe      	ittt	lt
 800bade:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800bae2:	fa43 f505 	asrlt.w	r5, r3, r5
 800bae6:	1964      	addlt	r4, r4, r5
 800bae8:	ea24 0406 	bic.w	r4, r4, r6
 800baec:	e7e7      	b.n	800babe <floorf+0x32>
 800baee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800baf2:	d302      	bcc.n	800bafa <floorf+0x6e>
 800baf4:	f7f5 f81e 	bl	8000b34 <__addsf3>
 800baf8:	4601      	mov	r1, r0
 800bafa:	4608      	mov	r0, r1
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
 800bafe:	2400      	movs	r4, #0
 800bb00:	e7dd      	b.n	800babe <floorf+0x32>
 800bb02:	bf00      	nop
 800bb04:	7149f2ca 	.word	0x7149f2ca
 800bb08:	bf800000 	.word	0xbf800000
 800bb0c:	007fffff 	.word	0x007fffff

0800bb10 <nanf>:
 800bb10:	4800      	ldr	r0, [pc, #0]	; (800bb14 <nanf+0x4>)
 800bb12:	4770      	bx	lr
 800bb14:	7fc00000 	.word	0x7fc00000

0800bb18 <scalbnf>:
 800bb18:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4603      	mov	r3, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	4604      	mov	r4, r0
 800bb24:	d02a      	beq.n	800bb7c <scalbnf+0x64>
 800bb26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bb2a:	d304      	bcc.n	800bb36 <scalbnf+0x1e>
 800bb2c:	4601      	mov	r1, r0
 800bb2e:	f7f5 f801 	bl	8000b34 <__addsf3>
 800bb32:	4603      	mov	r3, r0
 800bb34:	e022      	b.n	800bb7c <scalbnf+0x64>
 800bb36:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800bb3a:	d117      	bne.n	800bb6c <scalbnf+0x54>
 800bb3c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800bb40:	f7f5 f900 	bl	8000d44 <__aeabi_fmul>
 800bb44:	4a17      	ldr	r2, [pc, #92]	; (800bba4 <scalbnf+0x8c>)
 800bb46:	4603      	mov	r3, r0
 800bb48:	4295      	cmp	r5, r2
 800bb4a:	db0b      	blt.n	800bb64 <scalbnf+0x4c>
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bb52:	3a19      	subs	r2, #25
 800bb54:	442a      	add	r2, r5
 800bb56:	2afe      	cmp	r2, #254	; 0xfe
 800bb58:	dd0a      	ble.n	800bb70 <scalbnf+0x58>
 800bb5a:	4913      	ldr	r1, [pc, #76]	; (800bba8 <scalbnf+0x90>)
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f361 001e 	bfi	r0, r1, #0, #31
 800bb62:	e000      	b.n	800bb66 <scalbnf+0x4e>
 800bb64:	4911      	ldr	r1, [pc, #68]	; (800bbac <scalbnf+0x94>)
 800bb66:	f7f5 f8ed 	bl	8000d44 <__aeabi_fmul>
 800bb6a:	e7e2      	b.n	800bb32 <scalbnf+0x1a>
 800bb6c:	0dd2      	lsrs	r2, r2, #23
 800bb6e:	e7f1      	b.n	800bb54 <scalbnf+0x3c>
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	dd05      	ble.n	800bb80 <scalbnf+0x68>
 800bb74:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800bb78:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	f112 0f16 	cmn.w	r2, #22
 800bb84:	da05      	bge.n	800bb92 <scalbnf+0x7a>
 800bb86:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bb8a:	4295      	cmp	r5, r2
 800bb8c:	dce5      	bgt.n	800bb5a <scalbnf+0x42>
 800bb8e:	4907      	ldr	r1, [pc, #28]	; (800bbac <scalbnf+0x94>)
 800bb90:	e7e4      	b.n	800bb5c <scalbnf+0x44>
 800bb92:	3219      	adds	r2, #25
 800bb94:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800bb98:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800bb9c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800bba0:	e7e1      	b.n	800bb66 <scalbnf+0x4e>
 800bba2:	bf00      	nop
 800bba4:	ffff3cb0 	.word	0xffff3cb0
 800bba8:	7149f2ca 	.word	0x7149f2ca
 800bbac:	0da24260 	.word	0x0da24260

0800bbb0 <_init>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	bf00      	nop
 800bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb6:	bc08      	pop	{r3}
 800bbb8:	469e      	mov	lr, r3
 800bbba:	4770      	bx	lr

0800bbbc <_fini>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	bf00      	nop
 800bbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc2:	bc08      	pop	{r3}
 800bbc4:	469e      	mov	lr, r3
 800bbc6:	4770      	bx	lr
